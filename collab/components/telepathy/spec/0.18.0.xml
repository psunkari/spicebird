<?xml version="1.0" ?><tp:spec xmlns:tp="http://telepathy.freedesktop.org/wiki/DbusSpec#extensions-v0" xmlns:xi="http://www.w3.org/2001/XInclude">

<tp:title>telepathy-glib</tp:title>

<tp:spec>

<tp:title>Connection Manager interfaces</tp:title>

<node name="/Connection_Manager" xml:base="../spec/Connection_Manager.xml">
  <tp:copyright>Copyright (C) 2005-2008 Collabora Limited</tp:copyright>
  <tp:copyright>Copyright (C) 2005-2008 Nokia Corporation</tp:copyright>
  <tp:copyright>Copyright (C) 2006 INdT</tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.ConnectionManager">

    <tp:simple-type name="Connection_Manager_Name" type="s">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The name of a connection manager, found in its well-known
          bus name and object path. This must be a non-empty string of
          ASCII letters, digits and underscores, starting with a letter.
          This is typically the name of the executable with any &quot;telepathy-&quot;
          prefix removed, and any hyphen/minus signs replaced by
          underscores.</p>

        <p>Connection manager names SHOULD NOT be the same as the name of
          the protocol they implement.</p>

        <tp:rationale>
          <p>This is likely to lead to conflicts between different
            implementations of the same protocol (or indeed inability
            to distinguish between the different implementations!). The
            Telepathy project traditionally uses some sort of pun (Haze is
            based on libpurple, Salut implements a protocol often called
            Bonjour, and Wilde implements the OSCAR protocol).</p>
        </tp:rationale>

        <p>Connection manager names SHOULD NOT be the same as the name of
          a library on which they are based.</p>

        <tp:rationale>
          <p>We often abbreviate, for instance, telepathy-haze as &quot;Haze&quot;,
            but abbreviating telepathy-sofiasip to &quot;Sofia-SIP&quot; would cause
            confusion between the connection manager and the library it
            uses. Please don't repeat that mistake.</p>
        </tp:rationale>
      </tp:docstring>
      <tp:changed version="0.17.1">Prior to version 0.17.1, the allowed
        characters were not specified</tp:changed>
    </tp:simple-type>

    <tp:simple-type array-name="Protocol_List" name="Protocol" type="s">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>An instant messaging protocol. It must consist only of ASCII
          letters, digits and hyphen/minus signs (U+002D &quot;-&quot;), and must start
          with a letter. Where possible, this SHOULD be
          chosen from the following well-known values:</p>

        <ul>
          <li>aim - AOL Instant Messenger (OSCAR or TOC)</li>
          <li>gadugadu - Gadu-Gadu</li>
          <li>groupwise - Novell Groupwise</li>
          <li>icq - ICQ (OSCAR)</li>
          <li>irc - Internet Relay Chat (RFC 1459, 2810-2813)</li>
          <li>jabber - XMPP (RFC 3920, 3921) or Jabber</li>
          <li>local-xmpp - Link-local XMPP (XEP-0174) (Bonjour, Salut)</li>
          <li>msn - MSNP (Windows Live Messenger)</li>
          <li>myspace - MySpaceIM</li>
          <li>napster - Napster</li>
          <li>qq - Tencent QQ</li>
          <li>sametime - IBM Lotus Sametime</li>
          <li>silc - SILC</li>
          <li>sip - Session Initiation Protocol (SIP)</li>
          <li>trepia - Trepia</li>
          <li>yahoo - YMSG (Yahoo! Messenger)</li>
          <li>zephyr - Zephyr</li>
        </ul>
      </tp:docstring>
      <tp:changed version="0.17.1">Prior to version 0.17.1, the allowed
        characters were not specified</tp:changed>
    </tp:simple-type>

    <tp:struct array-name="Param_Spec_List" name="Param_Spec">
      <tp:docstring>A struct representing an allowed parameter, as returned
        by GetParameters on the ConnectionManager interface.</tp:docstring>
      <tp:member name="Name" type="s">
        <tp:docstring>A string parameter name</tp:docstring>
      </tp:member>
      <tp:member name="Flags" tp:type="Conn_Mgr_Param_Flags" type="u">
        <tp:docstring>A bitwise OR of the parameter flags</tp:docstring>
      </tp:member>
      <tp:member name="Signature" tp:type="DBus_Signature" type="s">
        <tp:docstring>A string containing the D-Bus type signature
          for this parameter</tp:docstring>
      </tp:member>
      <tp:member name="Default_Value" type="v">
        <tp:docstring>The default value (if the Has_Default flag is not
          present, there is no default and this takes some dummy value,
          which SHOULD be of the appropriate D-Bus type)</tp:docstring>
      </tp:member>
    </tp:struct>

    <tp:flags name="Conn_Mgr_Param_Flags" type="u" value-prefix="Conn_Mgr_Param_Flag">
      <tp:flag suffix="Required" value="1">
        <tp:docstring>
          This parameter is required for connecting to the server.
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="Register" value="2">
        <tp:docstring>
          This parameter is required for registering an account on the
          server.
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="Has_Default" value="4">
        <tp:docstring>
          This parameter has a default value, which is returned in
          GetParameters; not providing this parameter is equivalent to
          providing the default.
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="Secret" value="8">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>This parameter should be considered private or secret; for
            instance, clients should store it in a &quot;password safe&quot; like
            gnome-keyring or kwallet, omit it from debug logs, and use a
            text input widget that hides the value of the parameter.</p>

          <p>(Clients that support older connection managers may also treat
            any parameter whose name contains &quot;password&quot; as though it had this
            flag.)</p>
        </tp:docstring>
        <tp:added version="0.17.2"/>
      </tp:flag>
      <tp:flag suffix="DBus_Property" value="16">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          This parameter is also a D-Bus property on the resulting <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection</tp:dbus-ref>; a
          parameter named <code>com.example.Duck.Macaroni</code> with this flag
          corresponds to the <code>Macaroni</code> property on the
          <code>com.example.Duck</code> interface.  Its value can be queried
          and possibly changed on an existing Connection using methods on the
          <code>org.freedesktop.DBus.Properties</code> interface.
        </tp:docstring>
        <tp:added version="0.17.16"/>
      </tp:flag>
    </tp:flags>

    <method name="GetParameters" tp:name-for-bindings="Get_Parameters">
      <arg direction="in" name="Protocol" tp:type="Protocol" type="s">
        <tp:docstring>
          The required protocol name
        </tp:docstring>
      </arg>
      <arg direction="out" name="Parameters" tp:type="Param_Spec[]" type="a(susv)">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          An array of structs representing possible parameters.
        </tp:docstring>
      </arg>
      <tp:docstring>
        Get a list of the parameters which must or may be provided to the
        <tp:member-ref>RequestConnection</tp:member-ref> method when connecting
        to the given protocol,
        or registering (the boolean &quot;register&quot; parameter is available,
        and set to true).
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.NotImplemented">
          The requested protocol is not supported by this manager
        </tp:error>
      </tp:possible-errors>
    </method>

    <method name="ListProtocols" tp:name-for-bindings="List_Protocols">
      <arg direction="out" name="Protocols" tp:type="Protocol[]" type="as">
        <tp:docstring>
          A array of string protocol identifiers supported by this manager
        </tp:docstring>
      </arg>
      <tp:docstring>
        Get a list of protocol identifiers that are implemented by this
        connection manager.
      </tp:docstring>
    </method>

    <signal name="NewConnection" tp:name-for-bindings="New_Connection">
      <arg name="Bus_Name" tp:type="DBus_Bus_Name" type="s">
        <tp:docstring>
          The D-Bus service where the connection object can be found
        </tp:docstring>
      </arg>
      <arg name="Object_Path" type="o">
        <tp:docstring>
          The object path of the Connection object on this service
        </tp:docstring>
      </arg>
      <arg name="Protocol" tp:type="Protocol" type="s">
        <tp:docstring>
          The identifier for the protocol this connection uses
        </tp:docstring>
      </arg>
      <tp:docstring>
        Emitted when a new <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection</tp:dbus-ref> object
        is created.
      </tp:docstring>
    </signal>

    <method name="RequestConnection" tp:name-for-bindings="Request_Connection">
      <arg direction="in" name="Protocol" tp:type="Protocol" type="s">
        <tp:docstring>
          The protocol identifier
        </tp:docstring>
      </arg>
      <arg direction="in" name="Parameters" tp:type="String_Variant_Map" type="a{sv}">
        <tp:docstring>
          A dictionary mapping parameter names to values of the appropriate
          type, as indicated by <tp:member-ref>GetParameters</tp:member-ref>
          and the above well-known list.
        </tp:docstring>
      </arg>
      <arg direction="out" name="Bus_Name" tp:type="DBus_Bus_Name" type="s">
        <tp:docstring>
          A D-Bus service name where the new Connection object can be found
        </tp:docstring>
      </arg>
      <arg direction="out" name="Object_Path" type="o">
        <tp:docstring>
          The D-Bus object path to the Connection on this service
        </tp:docstring>
      </arg>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Request a
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection</tp:dbus-ref>
          object representing a given account on a given
          protocol with the given parameters. The method returns the bus name
          and the object path where the new Connection object can be found,
          which should have the status of Connection_Status_Disconnected, to
          allow signal handlers to be attached before connecting is started
          with the
          <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection">Connect</tp:dbus-ref>
          method.</p>

        <p>The parameters which must and may be provided in the parameters
        dictionary can be discovered with the
        <tp:member-ref>GetParameters</tp:member-ref> method. These
        parameters, their types, and their default values may be cached
        in files so that all available connection managers do not need to be
        started to discover which protocols are available.</p>

        <p>To request values for these parameters from the user, a client must
        have prior knowledge of the meaning of the parameter names, so the
        following well-known names and types should be used where appropriate:</p>

        <dl>
          <dt>account (s)</dt>
          <dd>The identifier for the user's account on the server</dd>

          <dt>server (s)</dt>
          <dd>A fully qualified domain name or numeric IPv4 or IPv6 address.
            Using the fully-qualified domain name form is recommended whenever
            possible. If this parameter is specified and the account for that
            protocol also specifies a server, this parameter should override
            that in the user id.</dd>

          <dt>port (q)</dt>
          <dd>A TCP or UDP port number. If this parameter is specified and the
            account for that protocol also specifies a port, this parameter
            should override that in the account.</dd>

          <dt>password (s)</dt>
          <dd>A password associated with the account.</dd>

          <dt>require-encryption (b)</dt>
          <dd>Require encryption for this connection. A connection should fail
            to connect if require-encryption is set and an encrypted connection
            is not possible.</dd>

          <dt>register (b)</dt>
          <dd>This account should be created on the server if it does not
            already exist.</dd>

          <dt>ident (s)</dt>
          <dd>The local username to report to the server if necessary, such as
            in IRC.</dd>

          <dt>fullname (s)</dt>
          <dd>The user's full name if the service requires this when
            authenticating or registering.</dd>

          <dt>stun-server (s)</dt>
          <dd>The IP address or FQDN of a STUN server to use for NAT traversal,
            without any &quot;:port&quot; suffix.</dd>

          <dt>stun-port (q)</dt>
          <dd>The UDP port number on the stun-server to use for STUN. Only
            significant if the stun-server is also supplied.</dd>

          <dt>keepalive-interval (u)</dt>
          <dd>The time in seconds between pings sent to the server to ensure
            that the connection is still alive, or <tt>0</tt> to disable such
            pings.</dd>
        </dl>

        <p>Every successful RequestConnection call will cause the emission of a
        <tp:member-ref>NewConnection</tp:member-ref> signal for the same newly
        created connection. The
        requester can use the returned object path and service name
        independently of the emission of that signal. In that case this signal
        emission is most useful for, e.g. other processes that are monitoring
        the creation of new connections.</p>
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotImplemented">
          The requested protocol is not supported by this manager
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable">
          The requested connection already appears to exist
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument">
          Unrecognised connection parameters
        </tp:error>
      </tp:possible-errors>
    </method>

    <property access="read" name="Interfaces" tp:name-for-bindings="Interfaces" type="as">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>A list of the extra interfaces provided by this connection manager
          (i.e. extra functionality that can be provided even before a
          connection has been created).</p>

        <p>No interfaces suitable for listing in this property are currently
          defined; it's provided as a hook for possible future
          functionality.</p>

        <p>To be compatible with older connection managers, if retrieving
          this property fails, clients SHOULD assume that its value is
          an empty list.</p>
      </tp:docstring>
      <tp:added version="0.17.8"/>
    </property>

    <!-- FIXME: One thing we could perhaps use Interfaces for would be a
    ConnectionManager.Interface.Capabilities that can give hints regarding
    the capabilities (in the sense of
    Connection.Interface.Requests.AvailableChannelClasses and/or
    Connection.GetInterfaces()) that a Connection from this CM is likely
    to have -->

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>A D-Bus service which allows connections to be created. The manager
      processes are intended to be started by D-Bus service activation.</p>

    <p>For service discovery, each Telepathy connection manager must have
      a <em>connection manager name</em> (see
      <tp:type>Connection_Manager_Name</tp:type> for syntax).</p>

    <p>The connection manager must then provide a well-known bus name of
      <code>org.freedesktop.Telepathy.ConnectionManager.<em>cmname</em></code>
      where <em>cmname</em> is its connection manager name. If it makes sense
      to start the connection manager using D-Bus service activation, it
      must register that well-known name for service activation by installing
      a .service file.</p>

    <p>Clients can list the running connection managers by calling the
      ListNames method on the D-Bus daemon's org.freedesktop.DBus interface
      and looking for names matching the above pattern; they can list the
      activatable connection managers by calling ListActivatableNames, and
      they should usually combine the two lists to get a complete list of
      running or activatable connection managers.</p>

    <p>When the connection manager is running, it must have an object
      implementing the ConnectionManager interface at the object path
      <code>/org/freedesktop/Telepathy/ConnectionManager/<em>cmname</em></code>.
    </p>

    <p>Connection managers' capabilities can be determined dynamically by
      calling their <tp:member-ref>ListProtocols</tp:member-ref> method, then
      for each protocol of interest, calling
      <tp:member-ref>GetParameters</tp:member-ref> to discover the required and
      optional parameters.
      However, since it is inefficient to activate all possible connection
      managers on the system just to find out what they can do, there
      is a standard mechanism to store static information about CMs in
      &quot;.manager files&quot;.</p>

    <p>To look up a connection manager's supported protocols, clients
      should search the data directories specified by
      <a href="http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html">the
        freedesktop.org XDG Base Directory Specification</a> ($XDG_DATA_HOME,
      defaulting to $HOME/.local/share if unset, followed by
      colon-separated paths from $XDG_DATA_DIRS, defaulting to
      /usr/local/share:/usr/share if unset) for the first file named
      <code>telepathy/managers/<em>cmname</em>.manager</code> that can be
      read without error. This file has the same syntax as a
      <a href="http://standards.freedesktop.org/desktop-entry-spec/desktop-entry-spec-latest.html">freedesktop.org Desktop Entry file</a>.</p>

    <p>Clients must still support connection managers for which no
      <code>.manager</code> file can be found, which they can do by activating
      the connection manager and calling its methods; the
      <code>.manager</code> file is merely an optimization. Connection managers
      whose list of protocols can change at any time (for instance, via
      a plugin architecture) should not install a <code>.manager</code>
      file.</p>

    <p>For each protocol name <em>proto</em> that would be returned by
      ListProtocols, the .manager file contains a group
      headed <code>[Protocol <em>proto</em>]</code>. For each parameter
      <em>p</em> that would be returned by GetParameters(<em>proto</em>), the
      .manager file contains a key <code>param-<em>p</em></code> with a value
      consisting of a D-Bus signature (a single complete type), optionally
      followed by a space and a space-separated list of flags. The supported
      flags are:</p>

    <ul>
      <li><code>required</code>, corresponding to
        Conn_Mgr_Param_Flag_Required</li>
      <li><code>register</code>, corresponding
        to Conn_Mgr_Param_Flag_Register</li>
      <li><code>secret</code>, corresponding
        to Conn_Mgr_Param_Flag_Secret</li>
      <li><code>dbus-property</code>, corresponding
        to Conn_Mgr_Param_Flag_DBus_Property</li>
    </ul>

    <p>The group may also contain a key <code>default-<em>p</em></code>
      whose value is a string form of the default value for the parameter.
      If this key exists, it sets the default, and also sets the flag
      Conn_Mgr_Param_Flag_Has_Default. The default value is formatted
      according to the D-Bus signature as follows:</p>

    <dl>
      <dt>s (string)</dt>
        <dd>The UTF-8 string, with the standard backslash escape
          sequences supported by the Desktop Entry Specification
          (the &quot;localestring&quot; type from the Desktop Entry Specification)</dd>
      <dt>o (object path)</dt>
        <dd>The object path as an ASCII string</dd>
      <dt>b (boolean)</dt>
        <dd>&quot;true&quot; (case-insensitively) or &quot;1&quot; means True, &quot;false&quot;
          (case-insensitively) or &quot;0&quot; means False</dd>
      <dt>y, q, u, t (8-, 16-, 32-, 64-bit unsigned integer)</dt>
        <dd>ASCII decimal integer</dd>
      <dt>n, i, x (16-, 32-, 64-bit signed integer)</dt>
        <dd>ASCII decimal integer, optionally prefixed with &quot;-&quot;</dd>
      <dt>d (double-precision floating point)</dt>
        <dd>ASCII decimal number</dd>
      <dt>as (array of string)</dt>
        <dd>A sequence of UTF-8 strings each followed by a semicolon, with
          any semicolons they contain escaped with a backslash
          (the &quot;localestrings&quot; type from the Desktop Entry Specification)</dd>
    </dl>

    <p>Currently, no other D-Bus signatures are allowed to have default values,
      but clients parsing the .manager file MUST ignore defaults
      that they cannot parse, and treat them as if the
      <code>default-<em>p</em></code> key was not present at all.</p>

    <p>It is not required that a connection manager be able to support multiple
    protocols, or even multiple connections. When a connection is made, a
    service name where the connection object can be found is returned. A
    manager which can only make one connection may then remove itself from its
    well-known bus name, causing a new connection manager to be activated when
    somebody attempts to make a new connection.</p>
    </tp:docstring>

    <tp:changed version="0.17.2">Prior to version 0.17.2, support for
      CMs with no .manager file was not explicitly required.</tp:changed>
    <tp:changed version="0.17.16">Prior to version 0.17.16 the serialization
      of string arrays (signature 'as') was not defined</tp:changed>
  </interface>
</node>

</tp:spec>
<tp:spec>

<tp:title>Connection interfaces</tp:title>

<node name="/Connection" xml:base="../spec/Connection.xml">
  <tp:copyright>Copyright (C) 2005-2009 Collabora Limited</tp:copyright>
  <tp:copyright>Copyright (C) 2005-2009 Nokia Corporation</tp:copyright>
  <tp:copyright>Copyright (C) 2006 INdT</tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
<p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
USA.</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Connection">
    <tp:requires interface="org.freedesktop.Telepathy.Connection.Interface.Requests"/>
    <tp:requires interface="org.freedesktop.Telepathy.Connection.Interface.Contacts"/>

    <tp:struct array-name="Channel_Info_List" name="Channel_Info">
      <tp:deprecated version="0.17.23"/>
      <tp:docstring>A struct representing a channel, as returned by
        ListChannels on the Connection interface.</tp:docstring>
      <tp:member name="Channel" type="o">
        <tp:docstring>The object path of the channel, which is on the
          same bus name as the connection</tp:docstring>
      </tp:member>
      <tp:member name="Channel_Type" tp:type="DBus_Interface" type="s">
        <tp:docstring>The channel's type</tp:docstring>
      </tp:member>
      <tp:member name="Handle_Type" tp:type="Handle_Type" type="u">
        <tp:docstring>The type of the handle that the channel communicates
          with, or Handle_Type_None if there is no associated
          handle</tp:docstring>
      </tp:member>
      <tp:member name="Handle" tp:type="Handle" type="u">
        <tp:docstring>The handle that the channel communicates with,
          or 0 if there is no associated handle</tp:docstring>
      </tp:member>
    </tp:struct>

    <method name="Connect" tp:name-for-bindings="Connect">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Request that the connection be established. This will be done
          asynchronously and errors will be returned by emitting
          <tp:member-ref>StatusChanged</tp:member-ref> signals.</p>

        <p>Calling this method on a Connection that is already connecting
          or connected is allowed, and has no effect.</p>
      </tp:docstring>
    </method>

    <method name="Disconnect" tp:name-for-bindings="Disconnect">
      <tp:docstring>
        Request that the connection be closed. This closes the connection if
        it's not already in DISCONNECTED state, and destroys the connection
        object.
      </tp:docstring>
    </method>

    <method name="GetInterfaces" tp:name-for-bindings="Get_Interfaces">
      <arg direction="out" name="Interfaces" tp:type="DBus_Interface[]" type="as">
        <tp:docstring>
          An array of D-Bus interface names
        </tp:docstring>
      </arg>

      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Get the optional interfaces supported by this connection.
          Before the connection status changes to CONNECTED, the return
          from this method may change at any time, but it is guaranteed that
          interfaces will only be added, not removed. After the connection
          status changes to CONNECTED, the return from this method cannot
          change further.</p>

        <p>There is no explicit change notification; reasonable behaviour
          for a client would be to retrieve the interfaces list once
          initially, and once more when it becomes CONNECTED.</p>

        <tp:rationale>
          <p>In some connection managers, certain capabilities of a connection
            are known to be implemented for all connections (e.g. support
            for SimplePresence), and some interfaces (like SimplePresence) can
            even be used before connecting. Other capabilities may
            or may not exist, depending on server functionality; by the time
            the connection goes CONNECTED, the connection manager is expected
            to have evaluated the server's functionality and enabled any extra
            interfaces for the remainder of the Connection's lifetime.</p>
        </tp:rationale>
      </tp:docstring>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected">
          <tp:docstring>
             Before version 0.17.8 calling GetInterfaces while
             on a connection that is not yet CONNECTED wasn't allowed. If a
             CM returns this error, its list of interfaces should be regarded
             as empty until it becomes CONNECTED.
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <method name="GetProtocol" tp:name-for-bindings="Get_Protocol">
      <arg direction="out" name="Protocol" tp:type="Protocol" type="s">
        <tp:docstring>
          A string identifier for the protocol
        </tp:docstring>
      </arg>

      <tp:docstring>
        Get the protocol this connection is using.
      </tp:docstring>
    </method>

    <signal name="SelfHandleChanged" tp:name-for-bindings="Self_Handle_Changed">
      <tp:docstring>
        Emitted whenever the <tp:member-ref>SelfHandle</tp:member-ref> property
        changes. If the connection
        is not yet in the CONNECTED state, this signal is not guaranteed
        to be emitted.
      </tp:docstring>
      <tp:added version="0.17.10">Clients MAY assume that if the
        SelfHandle property exists, this signal will be emitted when
        necessary.</tp:added>

      <arg name="Self_Handle" tp:type="Contact_Handle" type="u">
        <tp:docstring>
          The new value of the SelfHandle property.
        </tp:docstring>
      </arg>
    </signal>

    <property access="read" name="SelfHandle" tp:name-for-bindings="Self_Handle" tp:type="Contact_Handle" type="u">
      <tp:docstring>
        The handle which represents the user on this connection, which will
        remain valid for the lifetime of this connection, or until a change
        in the user's identifier is signalled by the
        <tp:member-ref>SelfHandleChanged</tp:member-ref> signal.
        If the connection is not yet in the CONNECTED state, the value of
        this property MAY be zero.
      </tp:docstring>
      <tp:added version="0.17.10">For compatibility with older
        versions, clients should fall back to calling the
        <tp:member-ref>GetSelfHandle</tp:member-ref>
        method.</tp:added>
    </property>

    <method name="GetSelfHandle" tp:name-for-bindings="Get_Self_Handle">
      <arg direction="out" name="Self_Handle" tp:type="Contact_Handle" type="u">
        <tp:docstring>
          The value of the <tp:member-ref>SelfHandle</tp:member-ref> property
        </tp:docstring>
      </arg>

      <tp:docstring>
        Returns the value of the SelfHandle property. Change notification
        is via the SelfHandleChanged signal.
      </tp:docstring>
      <tp:deprecated version="0.17.10">Use GetAll to get the
        SelfHandle property (and all other Connection properties)
        instead.</tp:deprecated>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
      </tp:possible-errors>
    </method>

    <method name="GetStatus" tp:name-for-bindings="Get_Status">
      <arg direction="out" name="Status" tp:type="Connection_Status" type="u">
        <tp:docstring>
          An integer representing the current status
        </tp:docstring>
      </arg>

      <tp:docstring>
        Get the current status as defined in the
        <tp:member-ref>StatusChanged</tp:member-ref> signal.
      </tp:docstring>
    </method>

    <method name="HoldHandles" tp:name-for-bindings="Hold_Handles">
      <arg direction="in" name="Handle_Type" tp:type="Handle_Type" type="u">
        <tp:docstring>
          The type of handle to be held
        </tp:docstring>
      </arg>

      <arg direction="in" name="Handles" tp:type="Handle[]" type="au">
        <tp:docstring>
          A array of integer handles to hold
        </tp:docstring>
      </arg>

      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Notify the connection manger that your client is holding a copy
        of handles which may not be in use in any existing channel or
        list, and were not obtained by using the
        <tp:member-ref>RequestHandles</tp:member-ref> method. For
        example, a handle observed in an emitted signal, or displayed
        somewhere in the UI that is not associated with a channel. The
        connection manager must not deallocate a handle where any clients
        have used this method to indicate it is in use until the
        <tp:member-ref>ReleaseHandles</tp:member-ref>
        method is called, or the clients disappear from the bus.</p>

        <p>Note that HoldHandles is idempotent - calling it multiple times
          is equivalent to calling it once. If a handle is &quot;referenced&quot; by
          several components which share a D-Bus unique name, the client
          should perform reference counting internally, and only call
          ReleaseHandles when none of the cooperating components need the
          handle any longer.</p>
      </tp:docstring>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument">
          The handle type is invalid
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle">
          One of the given handles is not valid
        </tp:error>
      </tp:possible-errors>
    </method>

    <method name="InspectHandles" tp:name-for-bindings="Inspect_Handles">
      <arg direction="in" name="Handle_Type" tp:type="Handle_Type" type="u">
        <tp:docstring>
          The type of handle to be inspected
        </tp:docstring>
      </arg>

      <arg direction="in" name="Handles" tp:type="Handle[]" type="au">
        <tp:docstring>
          An array of integer handles of this type
        </tp:docstring>
      </arg>

      <arg direction="out" name="Identifiers" type="as">
        <tp:docstring>
          An array of identifiers corresponding to the given handles, in the same order.
        </tp:docstring>
      </arg>

      <tp:docstring>
        Return a string representation for a number of handles of a given
        type.
      </tp:docstring>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument">
          The handle type is invalid
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle">
          One of the given handles is not valid
        </tp:error>
      </tp:possible-errors>
    </method>

    <method name="ListChannels" tp:name-for-bindings="List_Channels">
      <tp:deprecated version="0.17.23">Use the
        <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection.Interface">Requests.Channels</tp:dbus-ref>
        property instead.
      </tp:deprecated>

      <arg direction="out" name="Channel_Info" tp:type="Channel_Info[]" type="a(osuu)">
        <tp:docstring>
          An array of structs representing channels.
        </tp:docstring>
      </arg>

      <tp:docstring>
        List all the channels which currently exist on this connection.
      </tp:docstring>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
      </tp:possible-errors>
    </method>

    <signal name="NewChannel" tp:name-for-bindings="New_Channel">
      <tp:deprecated version="0.17.23">Connection managers MUST still
        emit this signal, but clients SHOULD listen for the <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection.Interface">Requests.NewChannels</tp:dbus-ref>
        signal instead.
      </tp:deprecated>

      <arg name="Object_Path" type="o">
        <tp:docstring>
          A D-Bus object path for the channel object on this service
        </tp:docstring>
      </arg>

      <arg name="Channel_Type" tp:type="DBus_Interface" type="s">
        <tp:docstring>
          A D-Bus interface name representing the channel type
        </tp:docstring>
      </arg>

      <arg name="Handle_Type" tp:type="Handle_Type" type="u">
        <tp:docstring>
          An integer representing the type of handle this channel
          communicates with, or Handle_Type_None if no handle is specified
        </tp:docstring>
      </arg>

      <arg name="Handle" tp:type="Handle" type="u">
        <tp:docstring>
          A handle indicating the specific contact, room or list this
          channel communicates with, or zero if no handle is specified
        </tp:docstring>
      </arg>

      <arg name="Suppress_Handler" type="b">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>If true, the channel was requested by a client that intends to
            present it to the user itself (i.e. it passed suppress_handler=TRUE
            to the <tp:member-ref>RequestChannel</tp:member-ref> method), so no
            other handler should be
            launched. Clients MAY assume that channels where this is true
            were created by a user request.</p>

          <p>If false, either the channel was created due to incoming
            information from the service, or the channel was requested by
            a local client that does not intend to handle the channel itself
            (this usage is deprecated).</p>

          <p>Clients MUST NOT assume that only incoming channels will have
            this flag set to false.</p>
        </tp:docstring>
      </arg>

      <tp:docstring>
        Emitted when a new Channel object is created, either through user
        request or incoming information from the service.
      </tp:docstring>
    </signal>

    <method name="ReleaseHandles" tp:name-for-bindings="Release_Handles">
      <arg direction="in" name="Handle_Type" tp:type="Handle_Type" type="u">
        <tp:docstring>
          An integer handle type (as defined in RequestHandle)
        </tp:docstring>
      </arg>

      <arg direction="in" name="Handles" tp:type="Handle[]" type="au">
        <tp:docstring>
          An array of integer handles being held by the client
        </tp:docstring>
      </arg>

      <tp:docstring>
        Explicitly notify the connection manager that your client is no
        longer holding any references to the given handles, and that they
        may be deallocated if they are not held by any other clients or
        referenced by any existing channels. See HoldHandles for notes.
      </tp:docstring>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument">
          <tp:docstring>
            The handle type is invalid
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle">
          <tp:docstring>
            One of the given handles is not valid
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable">
          <tp:docstring>
            One of the given handles is not held by this client
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <method name="RequestChannel" tp:name-for-bindings="Request_Channel">
      <tp:deprecated version="0.17.23">Use
        <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection.Interface">Requests.CreateChannel</tp:dbus-ref>
        or <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection.Interface">Requests.EnsureChannel</tp:dbus-ref>
        instead. Connection managers MAY implement RequestChannel by
        raising NotImplemented, or implement fewer types of channel via
        this API.</tp:deprecated>

      <arg direction="in" name="Type" tp:type="DBus_Interface" type="s">
        <tp:docstring>
          A D-Bus interface name representing base channel type
        </tp:docstring>
      </arg>

      <arg direction="in" name="Handle_Type" tp:type="Handle_Type" type="u">
        <tp:docstring>
          An integer representing the handle type, or Handle_Type_None if
          no handle is specified
        </tp:docstring>
      </arg>

      <arg direction="in" name="Handle" tp:type="Handle" type="u">
        <tp:docstring>
          A nonzero integer handle representing a contact, room, list etc.
          according to handle_type, or zero if the handle_type is
          Handle_Type_None
        </tp:docstring>
      </arg>

      <arg direction="in" name="Suppress_Handler" type="b">
        <tp:docstring>
          <p>Clients SHOULD always set this to true.</p>

          <tp:rationale>
            <p>The historical meaning was that clients that did not
              intend to take responsibility for displaying the channel to
              the user could set this to FALSE, in which case the channel
              dispatcher would launch an appropriate channel handler.</p>

            <p>However, clients whose functionality relies on having a
              working channel dispatcher should obtain that functionality by
              calling methods on the channel dispatcher, so that they will
              get an appropriate error if the channel dispatcher is missing
              or not working.</p>

            <p>The channel dispatcher itself should set this to true too,
              so that it will ignore the
              <tp:member-ref>NewChannel</tp:member-ref> signal that results
              from the creation of the channel. It can then dispatch the
              channel returned from this method to an
              appropriate handler.</p>

            <p>So, there is no sensible use-case for setting this to false,
              and setting it to false can result in unhandled channels (in
              the case where clients assume that a channel dispatcher is
              present, but it isn't).</p>
          </tp:rationale>
        </tp:docstring>
      </arg>

      <arg direction="out" name="Object_Path" type="o">
        <tp:docstring>
          The D-Bus object path for the channel created or retrieved
        </tp:docstring>
      </arg>

      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Request a channel satisfying the specified type and communicating
          with the contact, room, list etc. indicated by the given
          handle_type and handle. The handle_type and handle may both be
          zero to request the creation of a new, empty channel, which may
          or may not be possible, depending on the protocol and channel
          type.</p>

        <p>On success, the returned channel will always be of the requested
          type (i.e. implement the requested channel-type interface).</p>

        <p>If a new, empty channel is requested, on success the returned
          channel will always be an &quot;anonymous&quot; channel for which the type
          and handle are both zero.</p>

        <p>If a channel to a contact, room etc. is requested, on success, the
          returned channel may either be a new or existing channel to
          the requested entity (i.e. its
          <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel">TargetHandleType</tp:dbus-ref>
          and <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel">TargetHandle</tp:dbus-ref>
          properties are the
          requested handle type and handle), or a newly created &quot;anonymous&quot;
          channel associated with the requested handle in some
          implementation-specific way.</p>

        <p>For example, for a contact handle, the returned channel
          might be &quot;anonymous&quot;, but implement the groups interface and have
          the requested contact already present among the members.</p>

        <p>If the request cannot be satisfied, an error is raised and no
          channel is created.</p>
      </tp:docstring>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotImplemented">
          <tp:docstring>
            Unknown channel type
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle">
          <tp:docstring>
            The given handle does not exist or cannot be created
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable">
          <tp:docstring>
            The requested channel type cannot be created with the given handle
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotCapable">
          <tp:docstring>
            The requested channel cannot be created because contact doesn't
            have the required capabilities.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.Channel.Banned"/>
        <tp:error name="org.freedesktop.Telepathy.Error.Channel.Full"/>
        <tp:error name="org.freedesktop.Telepathy.Error.Channel.InviteOnly"/>
      </tp:possible-errors>
    </method>

    <tp:enum name="Handle_Type" type="u">
      <tp:enumvalue suffix="None" value="0">
        <tp:docstring>
          A &quot;null&quot; handle type used to indicate the absence of a handle.
          When a handle type and a handle appear as a pair, if the handle
          type is zero, the handle must also be zero.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Contact" value="1">
        <tp:docstring>
          A contact
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Room" value="2">
        <tp:docstring>
          A chat room
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="List" value="3">
        <tp:docstring>
          A server-generated contact list (see Channel.Interface.Group)
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Group" value="4">
        <tp:docstring>
          A user-defined contact list (see Channel.Interface.Group)
        </tp:docstring>
      </tp:enumvalue>
    </tp:enum>

    <tp:simple-type array-name="Handle_List" name="Handle" type="u">
      <tp:docstring>An unsigned 32-bit integer representing a
        handle</tp:docstring>
    </tp:simple-type>

    <tp:simple-type array-name="Contact_Handle_List" name="Contact_Handle" type="u">
      <tp:docstring>An unsigned 32-bit integer representing a handle of type
        Handle_Type_Contact</tp:docstring>
    </tp:simple-type>

    <tp:simple-type array-name="Room_Handle_List" name="Room_Handle" type="u">
      <tp:docstring>An unsigned 32-bit integer representing a handle of type
        Handle_Type_Room</tp:docstring>
    </tp:simple-type>

    <tp:simple-type array-name="List_Handle_List" name="List_Handle" type="u">
      <tp:docstring>An unsigned 32-bit integer representing a handle of type
        Handle_Type_List</tp:docstring>
    </tp:simple-type>

    <tp:simple-type array-name="Group_Handle_List" name="Group_Handle" type="u">
      <tp:docstring>An unsigned 32-bit integer representing a handle of type
        Handle_Type_Group</tp:docstring>
    </tp:simple-type>

    <method name="RequestHandles" tp:name-for-bindings="Request_Handles">
      <arg direction="in" name="Handle_Type" tp:type="Handle_Type" type="u">
        <tp:docstring>
          The type of handle required
        </tp:docstring>
      </arg>

      <arg direction="in" name="Identifiers" type="as">
        <tp:docstring>
          An array of identifiers of entities to request handles for
        </tp:docstring>
      </arg>

      <arg direction="out" name="Handles" tp:type="Handle[]" type="au">
        <tp:docstring>
          An array of integer handle numbers in the same order as the given identifiers.
        </tp:docstring>
      </arg>

      <tp:docstring>
        Request several handles from the connection manager which represent a
        number of contacts, rooms or server-stored lists on the service. The
        connection manager should record that these handles are in use by the
        client who invokes this method, and must not deallocate the handles
        until the client disconnects from the bus or calls the
        <tp:member-ref>ReleaseHandles</tp:member-ref>
        method. Where the identifier refers to an entity that already has a
        handle in this connection manager, this handle should be returned
        instead. The handle number 0 must not be returned by the connection
        manager.
      </tp:docstring>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle">
          <tp:docstring>
            The given identifier does not identify a valid entity of the given
            type.

            <tp:rationale>
              For instance, an XMPP connection would raise this error for
              identifiers with type Handle_Type_Room that do not contain
              exactly one '@' character, that contain spaces, and so on.
            </tp:rationale>
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotImplemented">
          <tp:docstring>
            The given handle type is not valid, or is not implemented on this
            connection.

            <tp:rationale>
              For instance, a connection to a protocol that doesn't have
              chat rooms would raise this error for room handles, and all CMs
              would raise this error for Handle_Type_None.
            </tp:rationale>
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <tp:enum name="Connection_Status" plural="Connection_Statuses" type="u">
      <tp:enumvalue suffix="Connected" value="0">
        <tp:docstring>
            The connection is alive and all methods are available.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Connecting" value="1">
        <tp:docstring>
            The connection has not yet been established, or has been
            severed and reconnection is being attempted. Some methods may fail
            until the connection has been established.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Disconnected" value="2">
        <tp:docstring>
            The connection has been severed and no method calls are
            valid. The object may be removed from the bus at any time.
        </tp:docstring>
      </tp:enumvalue>
    </tp:enum>

    <tp:enum name="Connection_Status_Reason" type="u">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>A reason why the status of the connection changed. Apart from
          Requested, the values of this enumeration only make sense as
          reasons why the status changed to Disconnected.</p>
      </tp:docstring>

      <tp:enumvalue suffix="None_Specified" value="0">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>There is no reason set for this state change. Unknown status
            reasons SHOULD be treated like this reason.</p>

          <p>When disconnected for this reason, the equivalent D-Bus error is
            <code>org.freedesktop.Telepathy.Error.Disconnected</code>.</p>
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Requested" value="1">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The change is in response to a user request. Changes to the
            Connecting or Connected status SHOULD always indicate this reason;
            changes to the Disconnected status SHOULD indicate this reason
            if and only if the disconnection was requested by the user.</p>

          <p>When disconnected for this reason, the equivalent D-Bus error is
            <code>org.freedesktop.Telepathy.Error.Cancelled</code>.</p>
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Network_Error" value="2">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>There was an error sending or receiving on the network socket.</p>

          <p>When the status changes from Connecting to Disconnected for this
            reason, the equivalent D-Bus error is either
            <code>org.freedesktop.Telepathy.Error.NetworkError</code>,
            <code>org.freedesktop.Telepathy.Error.ConnectionRefused</code>,
            <code>org.freedesktop.Telepathy.Error.ConnectionFailed</code>
            or some more specific error.</p>

          <p>When the status changes from Connected to Disconnected for this
            reason, the equivalent D-Bus error is either
            <code>org.freedesktop.Telepathy.Error.NetworkError</code>,
            <code>org.freedesktop.Telepathy.Error.ConnectionLost</code>
            or some more specific error.</p>
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Authentication_Failed" value="3">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The username or password was invalid.</p>

          <p>When disconnected for this reason, the equivalent D-Bus error is
            <code>org.freedesktop.Telepathy.Error.AuthenticationFailed</code>.
          </p>
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Encryption_Error" value="4">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>There was an error negotiating SSL on this connection, or
            encryption was unavailable and require-encryption was set when the
            connection was created.</p>

          <p>When disconnected for this reason, the equivalent D-Bus error is
            <code>org.freedesktop.Telepathy.Error.EncryptionNotAvailable</code>
            if encryption was not available at all, or
            <code>org.freedesktop.Telepathy.Error.EncryptionError</code>
            if encryption failed.</p>
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Name_In_Use" value="5">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>In general, this reason indicates that the requested account
            name or other identification could not be used due to conflict
            with another connection. It can be divided into three cases:</p>

          <ul>
            <li>If the status change is from Connecting to Disconnected
              and the 'register' parameter to RequestConnection was present
              and true, the requested account could not be created on the
              server because it already exists.
              The equivalent D-Bus error is
              <code>org.freedesktop.Telepathy.Error.RegistrationExists</code>.
            </li>

            <li>If the status change is from Connecting to Disconnected
              but the 'register' parameter is absent or false, the connection
              manager could not connect to the specified account because
              a connection to that account already exists.
              The equivalent D-Bus error is
              <code>org.freedesktop.Telepathy.Error.AlreadyConnected</code>.

              <tp:rationale>
                In some protocols, like XMPP (when connecting with the same
                JID and resource as an existing connection), the existing
                connection &quot;wins&quot; and the new one fails to connect.
              </tp:rationale>
            </li>

            <li>If the status change is from Connected to Disconnected,
              the existing connection was automatically disconnected because
              a new connection to the same account (perhaps from a different
              client or location) was established.
              The equivalent D-Bus error is
              <code>org.freedesktop.Telepathy.Error.ConnectionReplaced</code>.

              <tp:rationale>
                In some protocols, like MSNP (when connecting twice with the
                same Passport), the new connection &quot;wins&quot; and the
                existing one is automatically disconnected.
              </tp:rationale>
            </li>
          </ul>
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Cert_Not_Provided" value="6">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The server did not provide a SSL certificate.</p>

          <p>When disconnected for this reason, the equivalent D-Bus error is
            <code>org.freedesktop.Telepathy.Error.Cert.NotProvided</code>.
          </p>
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Cert_Untrusted" value="7">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The server's SSL certificate is signed by an untrusted certifying
            authority. This error SHOULD NOT be used to represent a self-signed
            certificate: use the more specific Cert_Self_Signed reason for
            that.</p>

          <p>When disconnected for this reason, the equivalent D-Bus error is
            <code>org.freedesktop.Telepathy.Error.Cert.Untrusted</code>.
          </p>
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Cert_Expired" value="8">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The server's SSL certificate has expired.</p>

          <p>When disconnected for this reason, the equivalent D-Bus error is
            <code>org.freedesktop.Telepathy.Error.Cert.Expired</code>.
          </p>
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Cert_Not_Activated" value="9">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The server's SSL certificate is not yet valid.</p>

          <p>When disconnected for this reason, the equivalent D-Bus error is
            <code>org.freedesktop.Telepathy.Error.Cert.NotActivated</code>.
          </p>
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Cert_Hostname_Mismatch" value="10">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The server's SSL certificate did not match its hostname.</p>

          <p>When disconnected for this reason, the equivalent D-Bus error is
            <code>org.freedesktop.Telepathy.Error.Cert.HostnameMismatch</code>.
          </p>
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Cert_Fingerprint_Mismatch" value="11">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The server's SSL certificate does not have the expected
            fingerprint.</p>

          <p>When disconnected for this reason, the equivalent D-Bus error is
            <code>org.freedesktop.Telepathy.Error.Cert.FingerprintMismatch</code>.
          </p>
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Cert_Self_Signed" value="12">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The server's SSL certificate is self-signed.</p>

          <p>When disconnected for this reason, the equivalent D-Bus error is
            <code>org.freedesktop.Telepathy.Error.Cert.HostnameMismatch</code>.
          </p>
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Cert_Other_Error" value="13">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>There was some other error validating the server's SSL
            certificate.</p>

          <p>When disconnected for this reason, the equivalent D-Bus error is
            <code>org.freedesktop.Telepathy.Error.Cert.Invalid</code>.
          </p>
        </tp:docstring>
      </tp:enumvalue>
    </tp:enum>

    <signal name="ConnectionError" tp:name-for-bindings="Connection_Error">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Emitted when an error occurs that renders this connection unusable.
        </p>

        <p>Whenever this signal is emitted, it MUST immediately be followed by
          a <tp:member-ref>StatusChanged</tp:member-ref> signal with status
          Connection_Status_Reason_Disconnected and an appropriate reason
          code.</p>

        <p>Connection managers SHOULD emit this signal on disconnection, but
          need not do so. Clients MUST support connection managers that emit
          StatusChanged(Disconnected, ...) without first emitting
          ConnectionError.</p>

        <tp:rationale>
          <p>This signal provides additional information about the reason
            for disconnection. The reason for connection is always
            straightforward - it was requested - so it does not need further
            explanation. However, on errors, it can be useful to provide
            additional information.</p>

          <p>The <tp:type>Connection_Status_Reason</tp:type> is not given
            here, since it will be signalled in
            <tp:member-ref>StatusChanged</tp:member-ref>. A reasonable client
            implementation would be to store the information given by this
            signal until StatusChanged is received, at which point the
            information given by this signal can be used to supplement the
            StatusChanged signal.</p>
        </tp:rationale>
      </tp:docstring>

      <arg name="Error" tp:type="DBus_Error_Name" type="s">
        <tp:docstring>
          The name of a D-Bus error describing the error that occurred,
          which may correspond to a
          <tp:type>Connection_Status_Reason</tp:type>, or may be a more
          specific Telepathy error
          (such as
          <code>org.freedesktop.Telepathy.Errors.ConnectionRefused</code>
          for Connection_Status_Reason_Network_Error)
          or a protocol-specific or connection-manager-specific error in a
          suitable namespace.

          <tp:rationale>
            For instance, a SIP connection manager could signal
            &quot;402 Payment Required&quot; as an error in a
            connection-manager-specific namespace, or a link-local
            XMPP implementation that used Avahi could provide the error
            given to it by the avahi-daemon.
          </tp:rationale>
        </tp:docstring>
      </arg>

      <arg name="Details" tp:type="String_Variant_Map" type="a{sv}">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>Additional information about the error, which may include
            the following well-known keys:</p>

          <dl>
            <dt>debug-message (s)</dt>
            <dd>Debugging information on the change, corresponding to the
              message part of a D-Bus error message, which SHOULD NOT be
              displayed to users under normal circumstances</dd>
          </dl>

          <tp:rationale>
            <p>This argument allows for future extensions. For instance,
              if indicating DNS lookup failure, we could define a key
              that indicates the hostname that could not be found.</p>
          </tp:rationale>
        </tp:docstring>
      </arg>

    </signal>

    <signal name="StatusChanged" tp:name-for-bindings="Status_Changed">
      <arg name="Status" tp:type="Connection_Status" type="u">
        <tp:docstring>
          An integer indicating the new status, as defined by ConnectionStatus
        </tp:docstring>
      </arg>

      <arg name="Reason" tp:type="Connection_Status_Reason" type="u">
        <tp:docstring>
          An integer indicating the reason for the status change, as defined
          by ConnectionStatusReason
        </tp:docstring>
      </arg>

      <tp:docstring>
        Emitted when the status of the connection changes.  All states and
        reasons have numerical values, as defined in ConnectionStatus
        and ConnectionStatusReason.
      </tp:docstring>
    </signal>

    <tp:contact-attribute name="contact-id" type="s">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The same string that would be returned by
          <tp:member-ref>InspectHandles</tp:member-ref>. As a special case,
          this is always present in the result of <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection.Interface.Contacts">GetContactAttributes</tp:dbus-ref>,
          whether it was explicitly requested or not.</p>
      </tp:docstring>
    </tp:contact-attribute>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>This models a connection to a single user account on a communication
        service. Its basic capability is to provide the facility to request and
        receive channels of differing types (such as text channels or streaming
        media channels) which are used to carry out further communication.</p>

      <p>In order to allow Connection objects to be discovered by new clients,
        the object path and well-known bus name MUST be of the form
        <code>/org/freedesktop/Telepathy/Connection/cmname/proto/account</code>
        and
        <code>org.freedesktop.Telepathy.Connection.cmname.proto.account</code>
        where:</p>

      <ul>
        <li><em>cmname</em> is the same
          <tp:type>Connection_Manager_Name</tp:type> that appears
          in the connection manager's object path and well-known bus name</li>
        <li><em>proto</em> is the <tp:type>Protocol</tp:type> name as seen in
          <tp:dbus-ref namespace="org.freedesktop.Telepathy.ConnectionManager">ListProtocols</tp:dbus-ref>,
          but with &quot;-&quot; replaced with &quot;_&quot; to get a valid
          object path/bus name</li>
        <li><em>account</em> is some non-empty sequence of ASCII letters,
          digits and underscores not starting with a digit</li>
      </ul>

      <p><em>account</em> SHOULD be formed such that any valid distinct
        connection instance on this protocol has a distinct name. This
        might be formed by including the server name followed by the user
        name (escaped via some suitable mechanism like telepathy-glib's
        tp_escape_as_identifier() function to preserve uniqueness); on
        protocols where connecting multiple times is permissable, a
        per-connection identifier might be necessary to ensure
        uniqueness.</p>

      <p>Clients MAY parse the object path to determine the connection
        manager name and the protocol, but MUST NOT attempt to parse the
        <em>account</em> part. Connection managers MAY use any unique string
        for this part.</p>

    <p>As well as the methods and signatures below, arbitrary interfaces may be
    provided by the Connection object to represent extra connection-wide
    functionality, such as the Connection.Interface.SimplePresence for
    receiving and
    reporting presence information, and Connection.Interface.Aliasing for
    connections where contacts may set and change an alias for themselves.
    These interfaces can be discovered using the
    <tp:member-ref>GetInterfaces</tp:member-ref> method.</p>

    <p>Contacts, rooms, and server-stored lists (such as subscribed contacts,
    block lists, or allow lists) on a service are all represented by
    immutable <em>handles</em>, which are unsigned non-zero integers which are
    valid only for the lifetime of the connection object, and are used
    throughout the protocol where these entities are represented, allowing
    simple testing of equality within clients.</p>

    <p>Zero as a handle value is sometimes used as a &quot;null&quot; value to mean
    the absence of a contact, room, etc.</p>

    <p>Handles have per-type uniqueness, meaning that
    every (handle type, handle number) tuple is guaranteed to be unique within
    a connection and that a handle alone (without its type) is meaningless or
    ambiguous. Connection manager implementations should reference count these
    handles to determine if they are in use either by any active clients or any
    open channels, and may deallocate them when this ceases to be true. Clients
    may request handles of a given type and identifier with the
    <tp:member-ref>RequestHandles</tp:member-ref> method, inspect the entity
    identifier with the <tp:member-ref>InspectHandles</tp:member-ref>
    method, keep handles from being released with
    <tp:member-ref>HoldHandles</tp:member-ref>, and notify that they are no
    longer storing handles with
    <tp:member-ref>ReleaseHandles</tp:member-ref>.</p>
    </tp:docstring>

    <tp:changed version="0.17.10">Previously, the account part of
      Connection bus names/object paths was allowed to have more than one
      component (i.e. contain dots or slashes), resulting in Connection
      bus names and object paths with more than 7 components. We now restrict
      Connection bus names/object paths to have exactly 7
      components.</tp:changed>

    <tp:changed version="0.17.23">The Requests and Contacts interfaces
      are now mandatory. Their functionality will be merged into the main
      Connection interface at some point in future.</tp:changed>

  </interface>
</node>

<node name="/Connection_Interface_Aliasing" xml:base="../spec/Connection_Interface_Aliasing.xml">
  <tp:copyright> Copyright (C) 2005, 2006 Collabora Limited </tp:copyright>
  <tp:copyright> Copyright (C) 2005, 2006 Nokia Corporation </tp:copyright>
  <tp:copyright> Copyright (C) 2006 INdT </tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Connection.Interface.Aliasing">
    <tp:requires interface="org.freedesktop.Telepathy.Connection"/>

    <tp:mapping array-name="" name="Alias_Map">
      <tp:docstring>A dictionary whose keys are contact handles and whose
        values are aliases.</tp:docstring>
      <tp:member name="Handle" tp:type="Contact_Handle" type="u"/>
      <tp:member name="Alias" type="s"/>
    </tp:mapping>

    <tp:struct array-name="Alias_Pair_List" name="Alias_Pair">
      <tp:docstring>
        A pair (contact handle, alias) as seen in the
        <tp:member-ref>AliasesChanged</tp:member-ref> signal.
      </tp:docstring>
      <tp:member name="Handle" tp:type="Contact_Handle" type="u"/>
      <tp:member name="Alias" type="s"/>
    </tp:struct>

    <signal name="AliasesChanged" tp:name-for-bindings="Aliases_Changed">
      <arg name="Aliases" tp:type="Alias_Pair[]" type="a(us)">
        <!-- FIXME: if we break API, this could be an Alias_Map, a{us} -->
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          An array containing structs of:
          <ul>
            <li>the handle representing the contact</li>
            <li>the new alias</li>
          </ul>
        </tp:docstring>
      </arg>
      <tp:docstring>
        Signal emitted when a contact's alias (or that of the user) is changed.
      </tp:docstring>
    </signal>
    <tp:flags name="Connection_Alias_Flags" type="u" value-prefix="Connection_Alias_Flag">
      <tp:flag suffix="User_Set" value="1">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The aliases of contacts on this connection may be changed by the
            user of the service, not just by the contacts themselves. This is
            the case on Jabber, for instance.</p>
          <p>It is possible that aliases can be changed by the contacts too -
            which alias takes precedence is not defined by this
            specification, and depends on the server and/or connection manager
            implementation.</p>
          <p>This flag only applies to the aliases of &quot;globally valid&quot; contact
            handles. At this time, clients should not expect to be able to
            change the aliases corresponding to any channel-specific
            handles. If this becomes possible in future, a new flag will
            be defined.</p>
        </tp:docstring>
      </tp:flag>
    </tp:flags>
    <method name="GetAliasFlags" tp:name-for-bindings="Get_Alias_Flags">
      <arg direction="out" name="Alias_Flags" tp:type="Connection_Alias_Flags" type="u">
        <tp:docstring>
          An integer with a bitwise OR of flags from ConnectionAliasFlags
        </tp:docstring>
      </arg>
      <tp:docstring>
        Return a bitwise OR of flags detailing the behaviour of aliases on this
        connection.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
      </tp:possible-errors>
    </method>
    <method name="RequestAliases" tp:name-for-bindings="Request_Aliases">
      <arg direction="in" name="Contacts" tp:type="Contact_Handle[]" type="au">
        <tp:docstring>
          An array of handles representing contacts
        </tp:docstring>
      </arg>
      <arg direction="out" name="Aliases" type="as">
        <tp:docstring>
          A list of aliases in the same order as the contact handles
        </tp:docstring>
      </arg>
      <tp:docstring>
        Request the value of several contacts' aliases at once.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle"/>
      </tp:possible-errors>
    </method>
    <method name="GetAliases" tp:name-for-bindings="Get_Aliases">
      <arg direction="in" name="Contacts" tp:type="Contact_Handle[]" type="au">
        <tp:docstring>
          An array of handles representing contacts
        </tp:docstring>
      </arg>
      <arg direction="out" name="Aliases" tp:type="Alias_Map" type="a{us}">
        <tp:docstring>
          A dictionary mapping contact handles to aliases
        </tp:docstring>
      </arg>
      <tp:docstring>
        Request the value of several contacts' aliases at once. This SHOULD
        only return cached aliases, falling back on the contact identifier
        (i.e. the string corresponding to the handle) if none is present. Also
        if there was no cached alias, a request SHOULD be started of which the
        result is later signalled by
        <tp:member-ref>AliasesChanged</tp:member-ref>.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle"/>
      </tp:possible-errors>
    </method>
    <method name="SetAliases" tp:name-for-bindings="Set_Aliases">
      <arg direction="in" name="Aliases" tp:type="Alias_Map" type="a{us}">
        <tp:docstring>
          A dictionary mapping integer handles of contacts
          to strings of the new alias to set.
        </tp:docstring>
      </arg>
      <tp:docstring>
        Request that the alias of the given contact be changed. Success will be
        indicated by emitting an <tp:member-ref>AliasesChanged</tp:member-ref>
        signal. On connections where the CONNECTION_ALIAS_FLAG_USER_SET flag is
        not set, this method will only ever succeed if the contact is the
        user's own handle (as returned by <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection.GetSelfHandle</tp:dbus-ref>).
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument"/>
        <tp:error name="org.freedesktop.Telepathy.Error.PermissionDenied"/>
      </tp:possible-errors>
    </method>

    <tp:contact-attribute name="alias" type="s">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The same string that would be returned by
          <tp:member-ref>GetAliases</tp:member-ref>
          (always present with some value, possibly the
          same as Connection/contact-id, if information from the
          Aliasing interface was requested)
        </p>
      </tp:docstring>
    </tp:contact-attribute>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>An interface on connections to support protocols where contacts have an
    alias which they can change at will. Provides a method for the user to set
    their own alias, and a signal which should be emitted when a contact's
    alias is changed or first discovered.</p>

    <p>On connections where the user is allowed to set aliases for contacts and
    store them on the server, the <tp:member-ref>GetAliasFlags</tp:member-ref>
    method will have the CONNECTION_ALIAS_FLAG_USER_SET flag set, and the
    <tp:member-ref>SetAliases</tp:member-ref> method may be called on contact
    handles other than the user themselves.</p>

    <p>Aliases are intended to be used as the main displayed name for the
    contact, where available.</p>
    </tp:docstring>
  </interface>
</node>
<node name="/Connection_Interface_Avatars" xml:base="../spec/Connection_Interface_Avatars.xml">
  <tp:copyright>Copyright (C) 2005-2008 Collabora Limited</tp:copyright>
  <tp:copyright>Copyright (C) 2005-2008 Nokia Corporation</tp:copyright>
  <tp:copyright>Copyright (C) 2006 INdT</tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Connection.Interface.Avatars">
    <tp:requires interface="org.freedesktop.Telepathy.Connection"/>

    <tp:simple-type array-name="Avatar_Token_List" name="Avatar_Token" type="s">
      <tp:changed version="0.17.16">strengthened uniqueness requirements
        so (CM name, protocol, token) is unique; previously only
        (our Account, remote contact identifier, token) was required to be
        unique</tp:changed>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>An opaque token chosen by the connection manager, representing
          a particular avatar.</p>

        <tp:rationale>
          <p>Because avatars can be relatively large images, most protocols
            provide a way to detect whether an old avatar is still valid,
            or whether an avatar has changed, without pushing the actual
            avatar data to all clients.</p>
        </tp:rationale>

        <p>The connection manager MUST choose these tokens in a way that
          makes it highly unlikely that two different avatars with the same
          connection manager and protocol will have the same token.</p>

        <tp:rationale>
          <p>This means that clients MAY use the triple
            (<tp:type>Connection_Manager_Name</tp:type>,
            <tp:type>Protocol</tp:type>, avatar token) as a key for
            their avatar cache. For instance, an avatar for a
            telepathy-gabble Jabber contact might be stored in a file
            .../gabble/jabber/4e199b4a1c40b497a95fcd1cd896351733849949.png.</p>
        </tp:rationale>

        <p>For instance, some protocols (like XMPP) identify avatars by a
          hash of the avatar data; in this case, the hash can be used as the
          avatar token.</p>

        <p>Some protocols identify avatars by the timestamp of the last
          change to the avatar; in these protocols it would be necessary for
          the connection manager to encode both the timestamp and the
          contact's identifier into the avatar token in order to ensure
          uniqueness.</p>

        <p>This token SHOULD be kept short and reasonably suitable for use
          in a filename, but MAY contain any UTF-8 character (so clients using
          avatar tokens in filenames MUST be prepared to escape characters
          that are not valid in filenames). Connection managers for protocols
          where tokens would otherwise become inconveniently large or contain
          many unsuitable characters SHOULD hash the identifying data to
          generate the token.</p>
      </tp:docstring>
    </tp:simple-type>

    <tp:mapping name="Avatar_Token_Map">
      <tp:docstring>A dictionary whose keys are contact handles and whose
        values are avatar tokens.</tp:docstring>
      <tp:member name="Handle" tp:type="Contact_Handle" type="u"/>
      <tp:member name="Token" tp:type="Avatar_Token" type="s"/>
    </tp:mapping>

    <signal name="AvatarUpdated" tp:name-for-bindings="Avatar_Updated">
      <arg name="Contact" tp:type="Contact_Handle" type="u">
        <tp:docstring>
          An integer handle for the contact whose avatar has changed
        </tp:docstring>
      </arg>
      <arg name="New_Avatar_Token" tp:type="Avatar_Token" type="s">
        <tp:docstring>
          Unique token for their new avatar
        </tp:docstring>
      </arg>
      <tp:docstring>
        Emitted when the avatar for a contact has been updated, or first
        discovered on this connection. If the token differs from the token
        associated with the client's cached avatar for this contact, the new
        avatar should be requested with
        <tp:member-ref>RequestAvatars</tp:member-ref>.
      </tp:docstring>
    </signal>

    <signal name="AvatarRetrieved" tp:name-for-bindings="Avatar_Retrieved">
      <arg name="Contact" tp:type="Contact_Handle" type="u">
        <tp:docstring>
          The contact whose avatar has been retrieved
        </tp:docstring>
      </arg>
      <arg name="Token" tp:type="Avatar_Token" type="s">
        <tp:docstring>
          The token corresponding to the avatar
        </tp:docstring>
      </arg>
      <arg name="Avatar" type="ay">
        <tp:docstring>
          An array of bytes containing the image data
        </tp:docstring>
      </arg>
      <arg name="Type" type="s">
        <tp:docstring>
          A string containing the image MIME type (eg image/jpeg), or empty if
          unknown
        </tp:docstring>
      </arg>
      <tp:docstring>
        Emitted when the avatar for a contact has been retrieved.
      </tp:docstring>
    </signal>

    <property access="read" name="SupportedAvatarMIMETypes" tp:name-for-bindings="Supported_Avatar_MIME_Types" type="as">
      <tp:added version="0.17.22">Fall back to calling
        <tp:member-ref>GetAvatarRequirements</tp:member-ref> if getting this
          property fails.</tp:added>
      <tp:docstring>
        An array of supported MIME types (e.g. &quot;image/jpeg&quot;).
        Clients MAY assume that the first type in this array is preferred.
        This property cannot change after the Connection goes to the Connected
        state.
      </tp:docstring>
    </property>

    <property access="read" name="MinimumAvatarHeight" tp:name-for-bindings="Minimum_Avatar_Height" type="u">
      <tp:added version="0.17.22">Fall back to calling
        <tp:member-ref>GetAvatarRequirements</tp:member-ref> if getting this
          property fails.</tp:added>
      <tp:docstring>
        The minimum height in pixels of an avatar on this protocol, which MAY
        be 0.
        This property cannot change after the Connection goes to the Connected
        state.
      </tp:docstring>
    </property>

    <property access="read" name="MinimumAvatarWidth" tp:name-for-bindings="Minimum_Avatar_Width" type="u">
      <tp:added version="0.17.22">Fall back to calling
        <tp:member-ref>GetAvatarRequirements</tp:member-ref> if getting this
          property fails.</tp:added>
      <tp:docstring>
        The minimum width in pixels of an avatar on this protocol, which MAY
        be 0.
        This property cannot change after the Connection goes to the Connected
        state.
      </tp:docstring>
    </property>

    <property access="read" name="RecommendedAvatarHeight" tp:name-for-bindings="Recommended_Avatar_Height" type="u">
      <tp:added version="0.17.22"/>
      <tp:docstring>
        The recommended height in pixels of an avatar on this protocol, or 0 if
        there is no preferred height.
        This property cannot change after the Connection goes to the Connected
        state.

        <tp:rationale>
          In XMPP a recommended width is given by the protocol specification;
          in proprietary protocols, using the same avatar size as the
          proprietary client is likely to lead to the best display to other
          users.
        </tp:rationale>
      </tp:docstring>
    </property>

    <property access="read" name="RecommendedAvatarWidth" tp:name-for-bindings="Recommended_Avatar_Width" type="u">
      <tp:added version="0.17.22"/>
      <tp:docstring>
        The recommended width in pixels of an avatar on this protocol, or 0 if
        there is no preferred width.
        This property cannot change after the Connection goes to the Connected
        state.

        <tp:rationale>
          The rationale is the same as for
          <tp:member-ref>RecommendedAvatarHeight</tp:member-ref>.
        </tp:rationale>
      </tp:docstring>
    </property>

    <property access="read" name="MaximumAvatarHeight" tp:name-for-bindings="Maximum_Avatar_Height" type="u">
      <tp:added version="0.17.22">Fall back to calling
        <tp:member-ref>GetAvatarRequirements</tp:member-ref> if getting this
          property fails.</tp:added>
      <tp:docstring>
        The maximum height in pixels of an avatar on this protocol, or 0 if
        there is no limit.
        This property cannot change after the Connection goes to the Connected
        state.
      </tp:docstring>
    </property>

    <property access="read" name="MaximumAvatarWidth" tp:name-for-bindings="Maximum_Avatar_Width" type="u">
      <tp:added version="0.17.22">Fall back to calling
        <tp:member-ref>GetAvatarRequirements</tp:member-ref> if getting this
          property fails.</tp:added>
      <tp:docstring>
        The maximum width in pixels of an avatar on this protocol, or 0 if
        there is no limit.
        This property cannot change after the Connection goes to the Connected
        state.
      </tp:docstring>
    </property>

    <property access="read" name="MaximumAvatarBytes" tp:name-for-bindings="Maximum_Avatar_Bytes" type="u">
      <tp:added version="0.17.22">Fall back to calling
        <tp:member-ref>GetAvatarRequirements</tp:member-ref> if getting this
          property fails.</tp:added>
      <tp:docstring>
        The maximum size in bytes of an avatar on this protocol, or 0 if
        there is no limit.
        This property cannot change after the Connection goes to the Connected
        state.
      </tp:docstring>
    </property>

    <method name="GetAvatarRequirements" tp:name-for-bindings="Get_Avatar_Requirements">
      <tp:deprecated version="0.17.22">Use GetAll to retrieve the
        D-Bus properties on this interface, falling back to this method
        on failure.</tp:deprecated>
      <arg direction="out" name="MIME_Types" type="as">
        <tp:docstring>
          An array of supported MIME types (eg image/jpeg)
        </tp:docstring>
      </arg>
      <arg direction="out" name="Min_Width" type="q">
        <tp:docstring>
          The minimum image width in pixels
        </tp:docstring>
      </arg>
      <arg direction="out" name="Min_Height" type="q">
        <tp:docstring>
          The minimum image height in pixels
        </tp:docstring>
      </arg>
      <arg direction="out" name="Max_Width" type="q">
        <tp:docstring>
          The maximum image width in pixels, or 0 if there is no limit
        </tp:docstring>
      </arg>
      <arg direction="out" name="Max_Height" type="q">
        <tp:docstring>
          The maximum image height in pixels, or 0 if there is no limit
        </tp:docstring>
      </arg>
      <arg direction="out" name="Max_Bytes" type="u">
        <tp:docstring>
          The maximum image size in bytes, or 0 if there is no limit
        </tp:docstring>
      </arg>
      <tp:docstring>
        Get the required format of avatars on this connection.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.PermissionDenied"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable"/>
      </tp:possible-errors>
    </method>

    <method name="GetAvatarTokens" tp:name-for-bindings="Get_Avatar_Tokens">
      <arg direction="in" name="Contacts" tp:type="Contact_Handle[]" type="au">
        <tp:docstring>
        An array of handles representing contacts
        </tp:docstring>
      </arg>
      <arg direction="out" name="Tokens" tp:type="Avatar_Token[]" type="as">
        <tp:docstring>
          An array of avatar tokens or empty strings (if no avatar is set) in the
          same order as the given array of contact handles
        </tp:docstring>
      </arg>
      <tp:deprecated version="0.15.5">Use GetKnownAvatarTokens
        instead.</tp:deprecated>
      <tp:docstring>
        Get the unique tokens for all of the given contacts' avatars.

        Using this method in new Telepathy clients is deprecated; use
        <tp:member-ref>GetKnownAvatarTokens</tp:member-ref> instead.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument"/>
        <tp:error name="org.freedesktop.Telepathy.Error.PermissionDenied"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable"/>
      </tp:possible-errors>
    </method>

    <method name="GetKnownAvatarTokens" tp:name-for-bindings="Get_Known_Avatar_Tokens">
      <arg direction="in" name="Contacts" tp:type="Contact_Handle[]" type="au">
        <tp:docstring>
        An array of handles representing contacts
        </tp:docstring>
      </arg>
      <arg direction="out" name="Tokens" tp:type="Avatar_Token_Map" type="a{us}">
        <tp:docstring>
          A dictionary of handles mapped to avatar tokens, containing only
          the known avatar tokens.
        </tp:docstring>
      </arg>
      <tp:docstring>
        Get the unique tokens for the given contacts' avatars. These tokens
        can be persisted across connections, and should be used by the client
        to check whether the avatars have been updated.  For handles other than
        the self handle, only tokens that are already known are returned; an
        empty token means the given contact has no avatar.  However, a CM must
        always have the tokens for the self handle if one is set (even if it is
        set to no avatar).  On protocols where the avatar does not persist
        between connections, a CM should omit the self handle from the returned
        map until an avatar is explicitly set or cleared.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument"/>
        <tp:error name="org.freedesktop.Telepathy.Error.PermissionDenied"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable"/>
      </tp:possible-errors>
    </method>

    <method name="RequestAvatar" tp:name-for-bindings="Request_Avatar">
      <arg direction="in" name="Contact" tp:type="Contact_Handle" type="u">
        <tp:docstring>
          An integer handle for the contact to request the avatar for
        </tp:docstring>
      </arg>
      <arg direction="out" name="Data" type="ay">
        <tp:docstring>
          An array of bytes containing the image data
        </tp:docstring>
      </arg>
      <arg direction="out" name="MIME_Type" type="s">
        <tp:docstring>
        A string containing the image MIME type (eg image/jpeg), or empty if
        unknown
        </tp:docstring>
      </arg>
      <tp:deprecated version="0.15.5">Use RequestAvatars
        instead.</tp:deprecated>
      <tp:docstring>
        Request the avatar for a given contact. Using this method in new
        Telepathy clients is deprecated; use RequestAvatars instead.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle"/>
        <tp:error name="org.freedesktop.Telepathy.Error.PermissionDenied"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable">
          <tp:docstring>
            The contact does not currently have an avatar.
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <method name="RequestAvatars" tp:name-for-bindings="Request_Avatars">
      <arg direction="in" name="Contacts" tp:type="Contact_Handle[]" type="au">
        <tp:docstring>
          The contacts to retrieve avatars for
        </tp:docstring>
      </arg>
      <tp:docstring>
        Request avatars for a number of contacts. The
        <tp:member-ref>AvatarRetrieved</tp:member-ref> signal is emitted for
        each avatar retrieved. If the handles are valid but retrieving an
        avatar fails (for any reason, including the contact not having an
        avatar) the AvatarRetrieved signal is not emitted for that contact.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle"/>
      </tp:possible-errors>
    </method>

    <method name="SetAvatar" tp:name-for-bindings="Set_Avatar">
      <arg direction="in" name="Avatar" type="ay">
        <tp:docstring>
          An array of bytes representing the avatar image data
        </tp:docstring>
      </arg>
      <arg direction="in" name="MIME_Type" type="s">
        <tp:docstring>
          A string representing the image MIME type
        </tp:docstring>
      </arg>
      <arg direction="out" name="Token" tp:type="Avatar_Token" type="s">
        <tp:docstring>
          The string token of the new avatar
        </tp:docstring>
      </arg>
      <tp:docstring>
        Set a new avatar image for this connection. The avatar image must
        respect the requirements obtained by
        <tp:member-ref>GetAvatarRequirements</tp:member-ref>.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument"/>
        <tp:error name="org.freedesktop.Telepathy.Error.PermissionDenied"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable"/>
      </tp:possible-errors>
    </method>

    <method name="ClearAvatar" tp:name-for-bindings="Clear_Avatar">
      <tp:added version="0.15.0"/>
      <tp:docstring>
        Remove the avatar image for this connection.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
      </tp:possible-errors>
    </method>

    <tp:contact-attribute name="token" tp:type="Avatar_Token" type="s">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The same string that would be returned by
          <tp:member-ref>GetKnownAvatarTokens</tp:member-ref>
          (omitted from the result if the contact's avatar token is not known,
          present as an empty string if the contact is known not to have
          an avatar). Unlike in the
          <tp:member-ref>GetKnownAvatarTokens</tp:member-ref>
          method, the avatar tokens for the self handle aren't required to be
          present. This attribute should not be used to determine whether or
          not the Avatar needs to be set.
        </p>
      </tp:docstring>
    </tp:contact-attribute>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>An interface for requesting avatars for contacts on a given connection,
    receiving notification when avatars are changed, and publishing your own
    avatar.</p>

    <p>Avatars are identified by a string, the <tp:type>Avatar_Token</tp:type>,
    which represents a particular avatar. Tokens MUST be chosen by the
    connection manager in such a way that the triple
    (<tp:type>Connection_Manager_Name</tp:type>, <tp:type>Protocol</tp:type>,
    <tp:type>Avatar_Token</tp:type>) uniquely identifies an avatar.
    An empty token means that an avatar has not been set for this contact, and
    a changed token implies the contact's avatar has changed, but the strings
    should otherwise be considered opaque by clients.</p>

    <p>A client should use <tp:member-ref>GetKnownAvatarTokens</tp:member-ref>
    to request the tokens for the
    avatars of all the contacts it is interested in when it connects. The
    avatars can then be requested using
    <tp:member-ref>RequestAvatars</tp:member-ref> for the contacts.  Clients
    should bind to the <tp:member-ref>AvatarUpdated</tp:member-ref> signal and
    request a new copy of
    the avatar when a contacts' avatar token changes. Clients should cache the
    token and data of each contact's avatar between connections, to avoid
    repeatedly retrieving the same avatar.</p>

    <p>To publish an avatar, a client should use
    <tp:member-ref>SetAvatar</tp:member-ref> to provide an image which meets
    the requirements returned by the
    <tp:member-ref>GetAvatarRequirements</tp:member-ref>
    function. On some protocols the avatar is stored on the server, so setting
    the avatar is persistent, but on others it is transferred via a peer to
    peer mechanism, so needs to be set every connection. Hence, on every
    connection, clients should inspect the avatar token of the connection's
    self handle using <tp:member-ref>GetKnownAvatarTokens</tp:member-ref>; if
    the self handle is not in the
    returned map, the client should re-set the avatar. If the self handle's
    avatar token is known, but the avatar has been changed locally since the
    last connection, the client should upload the new avatar; if the avatar has
    not changed locally, then the client should download the avatar from the
    server if its token differs from the that of the local avatar.</p>

    <p>To remove the published avatar on protocols which have persistent avatars,
    a client should use the <tp:member-ref>ClearAvatar</tp:member-ref> method.
    This method can safely be used even if there is no avatar for this
    connection.</p>
    </tp:docstring>
  </interface>
</node>
<node name="/Connection_Interface_Capabilities" xml:base="../spec/Connection_Interface_Capabilities.xml">
  <tp:copyright> Copyright (C) 2005, 2006 Collabora Limited </tp:copyright>
  <tp:copyright> Copyright (C) 2005, 2006 Nokia Corporation </tp:copyright>
  <tp:copyright> Copyright (C) 2006 INdT </tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Connection.Interface.Capabilities">
    <tp:requires interface="org.freedesktop.Telepathy.Connection"/>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>An interface for connections where it is possible to know what channel
        types may be requested before the request is made to the connection
        object. Each capability represents a commitment by the connection
        manager that it will ordinarily be able to create a channel when given
        a request with the given type and handle.</p>

      <p>Capabilities pertain to particular contact handles, and represent
        activities such as having a text chat or a voice call with the user.
        The activities are represented by the D-Bus interface name of the
        channel type for that activity.</p>

      <p>The generic capability flags are defined by
        <tp:type>Connection_Capability_Flags</tp:type>.</p>

      <p>In addition, channel types may have type specific capability flags of
        their own, which are described in the documentation for each channel
        type.</p>

      <p>This interface also provides for user interfaces notifying the
        connection manager of what capabilities to advertise for the user. This
        is done by using the
        <tp:member-ref>AdvertiseCapabilities</tp:member-ref> method, and deals
        with the
        interface names of channel types and the type specific flags pertaining
        to them which are implemented by available client processes.</p>
    </tp:docstring>

    <tp:changed version="0.17.8">Previously, this interface
      also expressed capabilities of the connection itself, indicating what
      sorts of channels could be requested (for instance, the ability to
      open chatroom lists or chatrooms). However, this was never very
      well-defined or consistent, and as far as we know it was never
      implemented correctly. This usage is now deprecated.</tp:changed>

    <tp:flags name="Connection_Capability_Flags" type="u" value-prefix="Connection_Capability_Flag">
      <tp:flag suffix="Create" value="1">
        <tp:docstring>
          The given channel type and handle can be given to <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection">RequestChannel</tp:dbus-ref>
          to create a new channel of this type.
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="Invite" value="2">
        <tp:docstring>
          The given contact can be invited to an existing channel of this type.
        </tp:docstring>
      </tp:flag>
    </tp:flags>

    <tp:struct array-name="Capability_Pair_List" name="Capability_Pair">
      <tp:docstring>A pair (channel type, type-specific flags) as passed to
        <tp:member-ref>AdvertiseCapabilities</tp:member-ref> on the
        Capabilities interface.</tp:docstring>
      <tp:member name="Channel_Type" tp:type="DBus_Interface" type="s"/>
      <tp:member name="Type_Specific_Flags" type="u"/>
    </tp:struct>

    <tp:struct array-name="Contact_Capability_List" name="Contact_Capability">
      <tp:docstring>A struct (contact handle, channel type, generic flags,
        type-specific flags) representing a capability posessed by a contact,
        as returned by <tp:member-ref>GetCapabilities</tp:member-ref> on the
        Capabilities interface.</tp:docstring>
      <tp:member name="Handle" tp:type="Contact_Handle" type="u"/>
      <tp:member name="Channel_Type" tp:type="DBus_Interface" type="s"/>
      <tp:member name="Generic_Flags" tp:type="Connection_Capability_Flags" type="u"/>
      <tp:member name="Type_Specific_Flags" type="u"/>
    </tp:struct>

    <tp:struct array-name="Capability_Change_List" name="Capability_Change">
      <tp:docstring>A struct (contact handle, channel type, old generic flags,
        new generic flags, old type-specific flags, new type-specific flags)
        representing a change to one of a contact's capabilities, as seen in the
        <tp:member-ref>CapabilitiesChanged</tp:member-ref> signal on the
        Capabilities interface.</tp:docstring>
      <tp:member name="Handle" tp:type="Contact_Handle" type="u"/>
      <tp:member name="Channel_Type" tp:type="DBus_Interface" type="s"/>
      <tp:member name="Old_Generic_Flags" tp:type="Connection_Capability_Flags" type="u"/>
      <tp:member name="New_Generic_Flags" tp:type="Connection_Capability_Flags" type="u"/>
      <tp:member name="Old_Type_Specific_Flags" type="u"/>
      <tp:member name="New_Type_Specific_Flags" type="u"/>
    </tp:struct>

    <method name="AdvertiseCapabilities" tp:name-for-bindings="Advertise_Capabilities">
      <arg direction="in" name="Add" tp:type="Capability_Pair[]" type="a(su)">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          An array of structures containing:
          <ul>
            <li>a string channel type</li>
            <li>a bitwise OR of type specific capability flags</li>
          </ul>
        </tp:docstring>
      </arg>
      <arg direction="in" name="Remove" tp:type="DBus_Interface[]" type="as">
        <tp:docstring>
          An array of D-Bus interface names of channel types to remove
        </tp:docstring>
      </arg>
      <arg direction="out" name="Self_Capabilities" tp:type="Capability_Pair[]" type="a(su)">
        <tp:docstring>
          An array of structures describing the current capabilities containing:
          <ul>
            <li>a string channel type</li>
            <li>a bitwise OR of type specific capability flags</li>
          </ul>
        </tp:docstring>
      </arg>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Used by user interfaces to indicate which channel types they are able
        to handle on this connection. Because these may be provided by
        different client processes, this method accepts channel types to add
        and remove from the set already advertised on this connection. The type
        of advertised capabilities (create versus invite) is protocol-dependent
        and hence cannot be set by the this method. In the case of a client
        adding an already advertised channel type but with new channel type
        specific flags, the connection manager should simply add the new flags
        to the set of advertised capabilities.</p>

        <p>Upon a successful invocation of this method, the
        <tp:member-ref>CapabilitiesChanged</tp:member-ref>
        signal will be emitted for the user's own handle ( <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection.GetSelfHandle</tp:dbus-ref>)
        by the connection manager to indicate the changes
        that have been made.  This signal should also be monitored to ensure
        that the set is kept accurate - for example, a client may remove
        capabilities or type specific capability flags when it exits
        which are still provided by another client.</p>

        <p>On connections managed by the <tp:dbus-ref namespace="org.freedesktop.Telepathy">ChannelDispatcher</tp:dbus-ref>,
          this method SHOULD NOT be used by clients other than the
          ChannelDispatcher itself.</p>
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
      </tp:possible-errors>
    </method>

    <signal name="CapabilitiesChanged" tp:name-for-bindings="Capabilities_Changed">
      <arg name="Caps" tp:type="Capability_Change[]" type="a(usuuuu)">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          An array of structures containing:
          <ul>
            <li>an integer handle representing the contact</li>
            <li>a string channel type</li>
            <li>a bitwise OR of the contact's old generic capability flags</li>
            <li>a bitwise OR of the contact's new generic capability flags</li>
            <li>a bitwise OR of the contact's old type specific capability flags</li>
            <li>a bitwise OR of the contact's new type specific capability flags</li>
          </ul>
        </tp:docstring>
      </arg>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Announce that there has been a change of capabilities on the
          given handle.</p>

        <p>If the handle is zero, the capabilities refer to the connection
          itself, in some poorly defined way. This usage is deprecated and
          clients should ignore it.</p>
      </tp:docstring>
    </signal>

    <method name="GetCapabilities" tp:name-for-bindings="Get_Capabilities">
      <arg direction="in" name="Handles" tp:type="Contact_Handle[]" type="au">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>An array of contact handles for this connection.</p>

          <p>This may include zero, which originally meant a query for
            capabilities available on the connection itself. This usage
            is deprecated; clients SHOULD NOT do this, and connection managers
            SHOULD proceed as though zero had not been present in this
            list.</p>
        </tp:docstring>
      </arg>
      <arg direction="out" name="Contact_Capabilities" tp:type="Contact_Capability[]" type="a(usuu)">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          An array of structures containing:
          <ul>
            <li>an integer handle representing the contact</li>
            <li>a string channel type</li>
            <li>a bitwise OR of generic capability flags for the type</li>
            <li>a bitwise OR of type specific capability flags for the type</li>
          </ul>
        </tp:docstring>
      </arg>
      <tp:docstring>
        Returns an array of capabilities for the given contact handles.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle">
          <tp:docstring>
            The handle does not represent a contact and is not zero
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.PermissionDenied"/>
      </tp:possible-errors>
    </method>

    <tp:contact-attribute name="caps" tp:type="Contact_Capability" type="a(usuu)">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The same structs that would be returned by
          <tp:member-ref>GetCapabilities</tp:member-ref>
          (all of them will redundantly have the contact's handle as the
          first member). Omitted from the result if the contact's capabilities
          are not known; present in the result as an empty array if the
          contact is known to have no capabilities at all.</p>
      </tp:docstring>
    </tp:contact-attribute>

  </interface>
</node>
<node name="/Connection_Interface_Contact_Capabilities" xml:base="../spec/Connection_Interface_Contact_Capabilities.xml">
  <tp:copyright> Copyright (C) 2005, 2006, 2008 Collabora Limited </tp:copyright>
  <tp:copyright> Copyright (C) 2005, 2006, 2008 Nokia Corporation </tp:copyright>
  <tp:copyright> Copyright (C) 2006 INdT </tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Connection.Interface.ContactCapabilities">
    <tp:requires interface="org.freedesktop.Telepathy.Connection"/>
    <tp:added version="0.17.28">(as stable API)</tp:added>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>Contact capabilities describe the channel classes which may be
        created with a given contact in advance of attempting to create a
        channel. Each capability represents a commitment by the
        connection manager that it will ordinarily be able to create a channel
        with a contact when given a request with the properties defined by the
        channel class.</p>

      <p>Capabilities pertain to particular contact handles, and represent
        activities such as having a text chat, a voice call with the user or a
        stream tube of a defined type.</p>

      <p>This interface also enables user interfaces to notify the connection
        manager what capabilities to advertise for the user to other contacts.
        This is done by using the
        <tp:member-ref>UpdateCapabilities</tp:member-ref> method.</p>

      <tp:rationale>
        <p>XMPP is a major user of this interface: XMPP contacts will not,
          in general, be callable using VoIP unless they advertise suitable
          Jingle capabilities.</p>

        <p>Many other protocols also have some concept of capability flags,
          which this interface exposes in a protocol-independent way.</p>
      </tp:rationale>
    </tp:docstring>

    <tp:struct array-name="Handler_Capabilities_List" name="Handler_Capabilities">
      <tp:docstring>
        A structure representing the capabilities of a single client.
      </tp:docstring>

      <tp:member name="Well_Known_Name" tp:type="DBus_Well_Known_Name" type="s">
        <tp:docstring>
          For implementations of the <tp:dbus-ref namespace="org.freedesktop.Telepathy">Client</tp:dbus-ref>
          interface, the well-known bus name name of the client; for any other
          process, any other reversed domain name that uniquely identifies it.
        </tp:docstring>
      </tp:member>

      <tp:member name="Channel_Classes" tp:type="String_Variant_Map[]" type="aa{sv}">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          An array of channel classes that can be handled by this client.
          This will usually be a copy of the client's <tp:dbus-ref namespace="org.freedesktop.Telepathy.Client.Handler">HandlerChannelFilter</tp:dbus-ref>
          property.
        </tp:docstring>
      </tp:member>

      <tp:member name="Capabilities" tp:type="Handler_Capability_Token[]" type="as">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          An array of client capabilities supported by this client, to be
          used by the connection manager to determine what capabilities to
          advertise. This will usually be a copy of the client's <tp:dbus-ref namespace="org.freedesktop.Telepathy.Client.Handler">Capabilities</tp:dbus-ref>
          property.
        </tp:docstring>
      </tp:member>
    </tp:struct>

    <method name="UpdateCapabilities" tp:name-for-bindings="Update_Capabilities">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Alter the connection's advertised capabilities to include
          the intersection of the given clients' capabilities with what the
          connection manager is able to implement.</p>

        <p>On connections managed by the ChannelDispatcher, processes other
          than the ChannelDispatcher SHOULD NOT call this method, and the
          ChannelDispatcher SHOULD use this method to advertise the
          capabilities of all the registered <tp:dbus-ref namespace="org.freedesktop.Telepathy">Client.Handler</tp:dbus-ref>
          implementations.On connections not managed by the ChannelDispatcher,
          clients MAY use this method directly, to indicate the channels they
          will handle and the extra capabilities they have.</p>

        <p>Upon a successful invocation of this method, the connection manager
          will only emit the
          <tp:member-ref>ContactCapabilitiesChanged</tp:member-ref> signal
          for the user's <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection">SelfHandle</tp:dbus-ref>
          if, in the underlying protocol, the new capabilities are distinct
          from the previous state.</p>

        <tp:rationale>
          <p>The connection manager will essentially intersect the provided
            capabilities and the channel classes it implements. Therefore,
            certain properties which are never fixed for a channel class
            (such as the target handle, or the Parameters property of a tube
            channel) will almost certainly not be advertised.</p>
        </tp:rationale>

        <p>This method MAY be called on a newly-created connection while it
          is still in the DISCONNECTED state, to request that when the
          connection connects, it will do so with the appropriate
          capabilities. Doing so MUST NOT fail.</p>
      </tp:docstring>

      <arg direction="in" name="Handler_Capabilities" tp:type="Handler_Capabilities[]" type="a(saa{sv}as)">
        <tp:docstring>
          <p>The capabilities of one or more clients.</p>

          <p>For each client in the given list, any capabilities previously
            advertised for the same client name are discarded, then replaced by
            the capabilities indicated.</p>

          <p>As a result, if a client becomes unavailable, this method SHOULD
            be called with a <tp:type>Handler_Capabilities</tp:type> structure
            containing its name, an empty list of channel classes, and an
            empty list of capabilities. When this is done, the connection
            manager SHOULD free all memory associated with that client name.</p>

          <tp:rationale>
            <p>This method takes a list of clients so that
              when the channel dispatcher first calls it (with a list of all
              the Handlers that are initially available), the changes can be
              made atomically, with only one transmission of updated
              capabilities to the network. Afterwards, the channel dispatcher
              will call this method with a single-element list every time
              a Handler becomes available or unavailable.</p>
          </tp:rationale>

          <p>The connection manager MUST ignore any channel classes and client
            capabilities for which there is no representation in the protocol
            or no support in the connection manager.</p>
        </tp:docstring>
      </arg>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
      </tp:possible-errors>
    </method>

    <method name="GetContactCapabilities" tp:name-for-bindings="Get_Contact_Capabilities">
      <arg direction="in" name="handles" tp:type="Contact_Handle[]" type="au">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>An array of contact handles for this connection.</p>

          <p>The handle zero MUST NOT be included in the request.</p>
        </tp:docstring>
      </arg>
      <arg direction="out" name="Contact_Capabilities" tp:type="Contact_Capabilities_Map" type="a{ua(a{sv}as)}">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          An array of structures containing:
          <ul>
            <li>a dictionary mapping the channel properties to their values.</li>
            <li>an array of additional allowed properties</li>
          </ul>
        </tp:docstring>
      </arg>
      <tp:docstring>
        Returns an array of enhanced capabilities for the given contact handles.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle">
          <tp:docstring>
            The handle does not represent a contact. Zero is always invalid.
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <signal name="ContactCapabilitiesChanged" tp:name-for-bindings="Contact_Capabilities_Changed">
      <arg name="caps" tp:type="Contact_Capabilities_Map" type="a{ua(a{sv}as)}">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          All the capabilities of the contacts
        </tp:docstring>
      </arg>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Announce that there has been a change of capabilities on the
          given handles. A single signal can be emitted for several
        contacts.</p>

        <tp:rationale>
          <p>The underlying protocol can get several contacts' capabilities at
            the same time.</p>
        </tp:rationale>

      </tp:docstring>
    </signal>

  <tp:mapping array-name="Contact_Capabilities_Map_List" name="Contact_Capabilities_Map">
    <tp:docstring>A mapping from contact handle to their capabilities.
    </tp:docstring>
    <tp:member name="Key" tp:type="Contact_Handle" type="u">
      <tp:docstring>
        A contact handle.
      </tp:docstring>
    </tp:member>
    <tp:member name="Value" tp:type="Requestable_Channel_Class[]" type="a(a{sv}as)">
      <tp:docstring>
        The contact capabilities.
      </tp:docstring>
    </tp:member>
  </tp:mapping>

    <tp:contact-attribute name="capabilities" tp:type="Requestable_Channel_Class[]" type="a(a{sv}as)">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The same structs that would be returned by
          <tp:member-ref>GetContactCapabilities</tp:member-ref>.
          Omitted from the result if the contact's capabilities
          are not known; present in the result as an empty array if the
          contact is known to have no capabilities at all.</p>
      </tp:docstring>
    </tp:contact-attribute>

  </interface>
</node>
<node name="/Connection_Interface_Simple_Presence" xml:base="../spec/Connection_Interface_Simple_Presence.xml">
  <tp:copyright> Copyright (C) 2005-2008 Collabora Limited </tp:copyright>
  <tp:copyright> Copyright (C) 2005, 2006 Nokia Corporation </tp:copyright>
  <tp:copyright> Copyright (C) 2006 INdT </tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or modify it
      under the terms of the GNU Lesser General Public License as published by
      the Free Software Foundation; either version 2.1 of the License, or (at
      your option) any later version.</p>

    <p>This library is distributed in the hope that it will be useful, but
      WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser
      General Public License for more details.</p>

    <p>You should have received a copy of the GNU Lesser General Public License
      along with this library; if not, write to the Free Software Foundation,
      Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</p>
  </tp:license>

  <interface name="org.freedesktop.Telepathy.Connection.Interface.SimplePresence">
    <tp:requires interface="org.freedesktop.Telepathy.Connection"/>

    <tp:struct name="Simple_Presence">
      <tp:docstring>
        A struct representing the presence of a contact.
      </tp:docstring>
      <tp:member name="Type" tp:type="Connection_Presence_Type" type="u">
        <tp:docstring>
          The presence type, e.g. Connection_Presence_Type_Away.
        </tp:docstring>
      </tp:member>
      <tp:member name="Status" type="s">
        <tp:docstring>
          The string identifier of the status, e.g. &quot;brb&quot;, as defined in the
          <tp:member-ref>Statuses</tp:member-ref> property.
        </tp:docstring>
      </tp:member>
      <tp:member name="Status_Message" type="s">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The user-defined status message, e.g. &quot;Back soon!&quot;.</p>

          <p>Clients SHOULD set the status message for the local
            user to the empty string, unless the user has actually provided
            a specific message (i.e. one that conveys more information than the
            Status).</p>

          <p>User interfaces SHOULD regard an empty status message as unset,
            and MAY replace it with a localized string corresponding to the
            Status or Type.</p>

          <tp:rationale>
            Use case: Daf sets his status in Empathy by choosing the Welsh
            translation of &quot;Available&quot; from a menu.
            It is more informative for his English-speaking colleagues
            to see the English translation of &quot;Available&quot; (as localized
            by their own clients) than to see &quot;Ar Gael&quot; (which they don't
            understand anyway).
          </tp:rationale>
        </tp:docstring>
      </tp:member>
    </tp:struct>

    <tp:mapping name="Simple_Contact_Presences">
      <tp:docstring>
        Mapping returned by <tp:member-ref>GetPresences</tp:member-ref>
        and signalled by <tp:member-ref>PresencesChanged</tp:member-ref>,
        indicating the presence of a number of contacts.
      </tp:docstring>
      <tp:member name="Contact" tp:type="Contact_Handle" type="u">
        <tp:docstring>
          A contact
        </tp:docstring>
      </tp:member>
      <tp:member name="Presence" tp:type="Simple_Presence" type="(uss)">
        <tp:docstring>
          The contact's presence
        </tp:docstring>
      </tp:member>
    </tp:mapping>

    <tp:struct name="Simple_Status_Spec">
      <tp:docstring>
        A struct containing information about a status.
      </tp:docstring>
      <tp:member name="Type" tp:type="Connection_Presence_Type" type="u">
        <tp:docstring>
          The type of a presence. This SHOULD NOT be used as a way to set
          statuses that the client does not recognise (as explained in
          <tp:member-ref>SetPresence</tp:member-ref>), but MAY be used to check
          that the client's assumptions about a particular status name
          match the connection manager's.
        </tp:docstring>
      </tp:member>
      <tp:member name="May_Set_On_Self" type="b">
        <tp:docstring>
          If true, the user can set this status on themselves using
          <tp:member-ref>SetPresence</tp:member-ref>.
        </tp:docstring>
      </tp:member>
      <tp:member name="Can_Have_Message" type="b">
        <tp:docstring>
          If true, a non-empty message can be set for this status. Otherwise,
          the empty string is the only acceptable message.

          <tp:rationale>
            On IRC you can be Away with a status message, but if you are
            available you cannot set a status message.
          </tp:rationale>
        </tp:docstring>
      </tp:member>
    </tp:struct>

    <tp:mapping name="Simple_Status_Spec_Map">
      <tp:docstring>
        A mapping describing possible statuses.
      </tp:docstring>

      <tp:member name="Identifier" type="s">
        <tp:docstring>
          The string identifier of this status.
        </tp:docstring>
      </tp:member>
      <tp:member name="Spec" tp:type="Simple_Status_Spec" type="(ubb)">
        <tp:docstring>
          Details of this status.
        </tp:docstring>
      </tp:member>
    </tp:mapping>

    <method name="SetPresence" tp:name-for-bindings="Set_Presence">
      <arg direction="in" name="Status" type="s">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The string identifier of the desired status. Possible status
            identifiers are defined in the
            <tp:member-ref>Statuses</tp:member-ref> property.</p>

          <p>Clients MUST NOT set a status whose string value they do not
            recognise, even if its presence type in Statuses
            matches what the user requested.</p>

          <tp:rationale>
            <p>Suppose a protocol has statuses that include 'phone' (of type
              BUSY) and 'in-a-meeting' (of type BUSY), but there is no
              generic 'busy' status.</p>

            <p>If the user requests &quot;Busy&quot; status from a menu, a
              client author might be tempted to pick an arbitrary status
              that has type BUSY. However, on this protocol, neither of
              the choices would be appropriate, and incorrect information
              about the user would be conveyed.</p>
          </tp:rationale>

          <p>Statuses whose <tp:type>Connection_Presence_Type</tp:type>
            is Offline, Error or Unknown MUST NOT be passed to this
            function. Connection managers SHOULD reject these statuses.</p>

          <tp:rationale>
            <p>To go offline, call <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection">Disconnect</tp:dbus-ref>
            instead. The &quot;error&quot; and &quot;unknown&quot; statuses make no sense.</p>
          </tp:rationale>
        </tp:docstring>
      </arg>
      <arg direction="in" name="Status_Message" type="s">
        <tp:docstring>
          The status message associated with the current status.
        </tp:docstring>
      </arg>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Request that the presence status and status message are published for
          the connection.  Changes will be indicated by
          <tp:member-ref>PresencesChanged</tp:member-ref>
          signals being emitted.</p>

        <p>This method may be called on a newly-created connection while it
          is still in the DISCONNECTED state, to request that when the
          connection connects, it will do so with the selected status.</p>

        <p>In DISCONNECTED state the
          <tp:member-ref>Statuses</tp:member-ref>
          property will indicate which statuses are allowed to be set
          while DISCONNECTED (none, if the Connection Manager doesn't allow
          this). This value MUST NOT be cached, as the set of allowed
          presences might change upon connecting.</p>
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument">
          <tp:docstring>
            Either the specified status is not supported, the specified
            status cannot be set on the user themselves, or a non-empty
            message was supplied for a status that does not
            accept a message.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable"/>
      </tp:possible-errors>
    </method>

    <method name="GetPresences" tp:name-for-bindings="Get_Presences">
      <arg direction="in" name="Contacts" tp:type="Contact_Handle[]" type="au">
        <tp:docstring>
          An array of the contacts whose presence should be obtained.
        </tp:docstring>
      </arg>
      <arg direction="out" name="Presence" tp:type="Simple_Contact_Presences" type="a{u(uss)}">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>Presence information in the same format as for the
            <tp:member-ref>PresencesChanged</tp:member-ref> signal.
            The returned mapping MUST include an entry for each contact
            in the method's argument.</p>

          <p>The definition of the connection presence types Unknown
            and Offline means that if a connection manager will return
            Unknown for contacts not on the subscribe list, it MUST delay
            the reply to this method call until it has found out which
            contacts are, in fact, on the subscribe list.</p>
        </tp:docstring>
      </arg>
      <tp:docstring>
        Get presence previously emitted by
        <tp:member-ref>PresencesChanged</tp:member-ref> for the given
        contacts. Data is returned in the same structure as the
        PresencesChanged signal; no additional network requests are made.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError">
          <tp:docstring>
            While discovering the subscribe list in order to distinguish
            between Unknown and Offline statuses, a network error occurred.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable"/>
      </tp:possible-errors>
    </method>

    <property access="read" name="Statuses" tp:name-for-bindings="Statuses" tp:type="Simple_Status_Spec_Map" type="a{s(ubb)}">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>A dictionary where the keys are the presence statuses that are
          available on this connection, and the values are the corresponding
          presence types.</p>

        <p>While the connection is in the DISCONNECTED state, it contains
          the set of presence statuses allowed to be set before connecting.
          The connection manager will attempt to set the appropriate status
          when the connection becomes connected, but cannot necessarily
          guarantee it. The available statuses cannot change until the
          connection status changes, so there is no change notification.</p>

        <p>While the connection is in the CONNECTED state, this property
          contains the set of presence statuses which are actually available
          on this protocol. This set is constant for the remaining lifetime
          of the connection, so again, there is no change notification.</p>

        <p>While the connection is in the CONNECTING state, the value of
          this property is undefined and SHOULD NOT be used. It can change
          at any time without notification (in particular, any cached values
          from when the connection was in the DISCONNECTED or CONNECTING
          state MUST NOT be assumed to still be correct when the state has
          become CONNECTED).</p>

        <p>This property MUST include the special statuses &quot;unknown&quot; and
          &quot;error&quot; if and only if the connection manager can emit them
          as a contact's status.</p>

        <tp:rationale>
          For instance, connection managers for local-xmpp (XEP-0174) would
          omit &quot;unknown&quot; since there is no such concept.
        </tp:rationale>
      </tp:docstring>
    </property>

    <signal name="PresencesChanged" tp:name-for-bindings="Presences_Changed">
      <arg name="Presence" tp:type="Simple_Contact_Presences" type="a{u(uss)}">
        <tp:docstring>
          A dictionary of contact handles mapped to the status,
          presence type and status message.
        </tp:docstring>
      </arg>
      <tp:docstring>
        This signal should be emitted when your own presence has been changed,
        or the presence of the member of any of the connection's channels has
        been changed.
      </tp:docstring>
    </signal>

    <tp:enum name="Connection_Presence_Type" type="u">
      <tp:enumvalue suffix="Unset" value="0">
        <tp:docstring>
          An invalid presence type used as a null value. This value MUST NOT
          appear in the <tp:member-ref>Statuses</tp:member-ref> property,
          or in the result of <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection.Interface.Presence">GetStatuses</tp:dbus-ref>
          on the deprecated <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection.Interface">Presence</tp:dbus-ref>
          interface.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Offline" value="1">
        <tp:docstring>
          Offline
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Available" value="2">
        <tp:docstring>
          Available
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Away" value="3">
        <tp:docstring>
          Away
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Extended_Away" value="4">
        <tp:docstring>
          Away for an extended time
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Hidden" value="5">
        <tp:docstring>
          Hidden (invisible)
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Busy" value="6">
        <tp:added version="0.17.0"/>
        <tp:docstring>
          Busy, Do Not Disturb.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Unknown" value="7">
        <tp:added version="0.17.8"/>
        <tp:docstring>
          Unknown, unable to determine presence for this contact, for example
          if the protocol only allows presence of subscribed contacts.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Error" value="8">
        <tp:added version="0.17.8"/>
        <tp:docstring>
          Error, an error occurred while trying to determine presence.  The
          message, if set, is an error from the server.
        </tp:docstring>
      </tp:enumvalue>
    </tp:enum>

    <tp:enum array-name="Rich_Presence_Access_Control_Type_List" name="Rich_Presence_Access_Control_Type" type="u">
      <tp:docstring>
        A type of access control for Rich_Presence_Access_Control.
        For most types, the exact access control is given by an associated
        variant.

        <tp:rationale>
          These are the access control types from XMPP publish/subscribe
          (XEP-0060).
        </tp:rationale>
      </tp:docstring>

      <tp:enumvalue suffix="Whitelist" value="0">
        <tp:docstring>
          The associated variant is a list of contacts (signature 'au',
          Contact_Handle[]) who can see the extended presence information.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Publish_List" value="1">
        <tp:docstring>
          All contacts in the user's 'publish' contact list can see the
          extended presence information. The associated variant is ignored.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Group" value="2">
        <tp:docstring>
          The associated variant is a handle of type Group (signature 'u',
          Group_Handle) representing a group of contacts who can see the
          extended presence information.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Open" value="3">
        <tp:docstring>
          Anyone with access to the service can see the extended presence
          information.
        </tp:docstring>
      </tp:enumvalue>
    </tp:enum>

    <tp:struct name="Rich_Presence_Access_Control">
      <tp:docstring>
        An access control mode for extended presence items like geolocation.
        This type isn't actually used by the SimplePresence interface, but
        it's included here so it can be referenced by rich presence interfaces
        such as <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection.Interface">Location</tp:dbus-ref>.
      </tp:docstring>

      <tp:member name="Type" tp:type="Rich_Presence_Access_Control_Type" type="u">
        <tp:docstring>
          The type of access control to apply.
        </tp:docstring>
      </tp:member>
      <tp:member name="Detail" type="v">
        <tp:docstring>
          Any additional information required by the Type. The required
          type and semantics are defined for each
          <tp:type>Rich_Presence_Access_Control_Type</tp:type>.
        </tp:docstring>
      </tp:member>
    </tp:struct>

    <tp:contact-attribute name="presence" tp:type="Simple_Presence" type="(uss)">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The same struct that would be returned by
          <tp:member-ref>GetPresences</tp:member-ref>
          (always present with some value if information from the
          SimplePresence interface was requested)</p>
      </tp:docstring>
    </tp:contact-attribute>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>This interface is for services which have a concept of presence which
        can be published for yourself and monitored on your contacts.</p>

      <p>Presence on an individual (yourself or one of your contacts) is
        modelled as a status and a status message. Valid statuses are defined
        per connection, and a list of those that can be set on youself
        can be obtained from the
        <tp:member-ref>Statuses</tp:member-ref>
        property.</p>

      <p>Each status has an arbitrary string identifier which should have an
        agreed meaning between the connection manager and any client which is
        expected to make use of it. The following well-known values should be
        used where possible to allow clients to identify common choices:</p>

      <table>
        <tr>
          <th>status identifier</th>
          <th>Connection_Presence_Type</th>
          <th>comments</th>
        </tr>
        <tr>
          <td>available</td>
          <td>Connection_Presence_Type_Available</td>
          <td/>
        </tr>
        <tr>
          <td>away</td>
          <td>Connection_Presence_Type_Away</td>
          <td/>
        </tr>
        <tr>
          <td>brb</td>
          <td>Connection_Presence_Type_Away</td>
          <td>Be Right Back (a more specific form of Away)</td>
        </tr>
        <tr>
          <td>busy</td>
          <td>Connection_Presence_Type_Busy</td>
          <td/>
        </tr>
        <tr><td>dnd</td>
          <td>Connection_Presence_Type_Busy</td>
          <td>Do Not Disturb (a more specific form of Busy)</td>
        </tr>
        <tr>
          <td>xa</td>
          <td>Connection_Presence_Type_Extended_Away</td>
          <td>Extended Away</td>
        </tr>
        <tr>
          <td>hidden</td>
          <td>Connection_Presence_Type_Hidden</td>
          <td>Also known as &quot;Invisible&quot; or &quot;Appear Offline&quot;</td>
        </tr>
        <tr>
          <td>offline</td>
          <td>Connection_Presence_Type_Offline</td>
          <td/>
        </tr>
        <tr>
          <td>unknown</td>
          <td>Connection_Presence_Type_Unknown</td>
          <td>special, see below</td>
        </tr>
        <tr>
          <td>error</td>
          <td>Connection_Presence_Type_Error</td>
          <td>special, see below</td>
        </tr>
      </table>

      <p>As well as these well-known status identifiers, every status also has
        a numerical type value chosen from
        <tp:type>Connection_Presence_Type</tp:type> which can be
        used by the client to classify even unknown statuses into different
        fundamental types.</p>

      <p>These numerical types exist so that even if a client does not
        understand the string identifier being used, and hence cannot present
        the presence to the user to set on themselves, it may display an
        approximation of the presence if it is set on a contact.</p>

      <p>As well as the normal status identifiers, there are two special ones
        that may be present: 'unknown' with type Unknown and 'error' with type
        Error. 'unknown' indicates that it is impossible to determine the
        presence of a contact at this time, for example because it's not on the
        'subscribe' list and the protocol only allows one to determine the
        presence of contacts you're subscribed to. 'error' indicates that there
        was a failure in determining the status of a contact.</p>

      <p>If the connection has a 'subscribe' contact list,
        <tp:member-ref>PresencesChanged</tp:member-ref>
        signals should be emitted to indicate changes of contacts on this list,
        and should also be emitted for changes in your own presence. Depending
        on the protocol, the signal may also be emitted for others such as
        people with whom you are communicating, and any user interface should
        be updated accordingly.</p>
    </tp:docstring>
  </interface>
</node>
<node name="/Connection_Interface_Presence" xml:base="../spec/Connection_Interface_Presence.xml">
  <tp:copyright>
    Copyright (C) 2005, 2006 Collabora Limited
  </tp:copyright>
  <tp:copyright>
Copyright (C) 2005, 2006 Nokia Corporation
  </tp:copyright>
  <tp:copyright>
Copyright (C) 2006 INdT
  </tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Connection.Interface.Presence">
    <tp:requires interface="org.freedesktop.Telepathy.Connection"/>
    <tp:requires interface="org.freedesktop.Telepathy.Connection.Interface.SimplePresence"/>

    <tp:mapping name="Multiple_Status_Map">
      <tp:docstring>Mapping used in
        <tp:type>Last_Activity_And_Statuses</tp:type> and passed to
        <tp:member-ref>SetStatus</tp:member-ref>, representing a collection of
        statuses. Use of this mapping with more than one member is
        deprecated.</tp:docstring>
      <tp:member name="Status" type="s"/>
      <tp:member name="Parameters" tp:type="String_Variant_Map" type="a{sv}"/>
    </tp:mapping>
    <tp:struct array-name="" name="Last_Activity_And_Statuses">
      <tp:docstring>Structure representing a contact's presence, containing
        a last-activity time (deprecated) and a Multiple_Status_Map.
      </tp:docstring>
      <tp:member name="Last_Activity" tp:type="Unix_Timestamp" type="u"/>
      <tp:member name="Statuses" tp:type="Multiple_Status_Map" type="a{sa{sv}}"/>
    </tp:struct>
    <tp:mapping name="Contact_Presences">
      <tp:docstring>Mapping returned by
        <tp:member-ref>GetPresence</tp:member-ref> and signalled by
        <tp:member-ref>PresenceUpdate</tp:member-ref>, where the keys are
        contacts and the values represent their presences.</tp:docstring>
      <tp:member name="Contact" tp:type="Contact_Handle" type="u"/>
      <tp:member name="Presence" tp:type="Last_Activity_And_Statuses" type="(ua{sa{sv}})"/>
    </tp:mapping>
    <tp:struct array-name="" name="Status_Spec">
      <tp:member name="Type" tp:type="Connection_Presence_Type" type="u"/>
      <tp:member name="May_Set_On_Self" type="b"/>
      <tp:member name="Exclusive" type="b"/>
      <tp:member name="Parameter_Types" tp:type="String_String_Map" type="a{ss}"/>
    </tp:struct>
    <tp:mapping name="Status_Spec_Map">
      <tp:member name="Identifier" type="s"/>
      <tp:member name="Spec" tp:type="Status_Spec" type="(ubba{ss})"/>
    </tp:mapping>

    <method name="AddStatus" tp:name-for-bindings="Add_Status">
      <arg direction="in" name="Status" type="s">
        <tp:docstring>
          The string identifier of the desired status
        </tp:docstring>
      </arg>
      <arg direction="in" name="Parameters" tp:type="String_Variant_Map" type="a{sv}">
        <tp:docstring>
          A dictionary of optional parameter names mapped to their variant-boxed values
        </tp:docstring>
      </arg>
      <tp:docstring>
        Request that a single presence status is published for the user, along
        with any desired parameters. Changes will be indicated by
        <tp:member-ref>PresenceUpdate</tp:member-ref> signals being emitted.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable"/>
        <tp:error name="org.freedesktop.Telepathy.Error.PermissionDenied"/>
      </tp:possible-errors>
    </method>
    <method name="ClearStatus" tp:name-for-bindings="Clear_Status">
      <tp:docstring>
        Request that all of a user's presence statuses be removed. Be aware
        that this request may simply result in the statuses being replaced by a
        default available status. Changes will be indicated by
        <tp:member-ref>PresenceUpdate</tp:member-ref> signals being emitted.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.PermissionDenied"/>
      </tp:possible-errors>
    </method>
    <method name="GetPresence" tp:name-for-bindings="Get_Presence">
      <arg direction="in" name="Contacts" tp:type="Contact_Handle[]" type="au">
        <tp:docstring>
          An array of the contacts whose presence should be obtained
        </tp:docstring>
      </arg>
      <arg direction="out" name="Presence" tp:type="Contact_Presences" type="a{u(ua{sa{sv}})}">
        <tp:docstring>
          Presence information in the same format as for the
          <tp:member-ref>PresenceUpdate</tp:member-ref> signal
        </tp:docstring>
      </arg>
      <tp:docstring>
        Get presence previously emitted by
        <tp:member-ref>PresenceUpdate</tp:member-ref> for the given contacts.
        Data is returned in the same structure as the PresenceUpdate signal.
        Using this method in favour of
        <tp:member-ref>RequestPresence</tp:member-ref> has the advantage that
        it will not wake up each client connected to the PresenceUpdate signal.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable"/>
      </tp:possible-errors>
    </method>
    <method name="GetStatuses" tp:name-for-bindings="Get_Statuses">
      <arg direction="out" name="Available_Statuses" tp:type="Status_Spec_Map" type="a{s(ubba{ss})}">
        <tp:docstring>
        A dictionary of string identifiers mapped to a struct for each status, containing:
        <ul>
          <li>a type value from one of the values above</li>
          <li>a boolean to indicate if this status may be set on yourself</li>
          <li>a boolean to indicate if this is an exclusive status which you
            may not set alongside any other</li>
          <li>a dictionary of valid optional string argument names mapped to
            their types</li>
        </ul>
        </tp:docstring>
      </arg>
      <tp:docstring>
        Get a dictionary of the valid presence statuses for this connection.
        This is only available when online because only some statuses will
        be available on some servers.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
      </tp:possible-errors>
    </method>
    <signal name="PresenceUpdate" tp:name-for-bindings="Presence_Update">
      <arg name="Presence" tp:type="Contact_Presences" type="a{u(ua{sa{sv}})}">
        <tp:docstring>
        A dictionary of contact handles mapped to a struct containing
        a UNIX timestamp of the last activity time (in UTC), and
        a dictionary mapping the contact's current status identifiers to
          a dictionary of optional parameter names mapped to their
          variant-boxed values
        </tp:docstring>
      </arg>
      <tp:docstring>
        This signal should be emitted when your own presence has been changed,
        or the presence of the member of any of the connection's channels has
        been changed, or when the presence requested by
        <tp:member-ref>RequestPresence</tp:member-ref> is available.
      </tp:docstring>
    </signal>
    <method name="RemoveStatus" tp:name-for-bindings="Remove_Status">
      <arg direction="in" name="Status" type="s">
        <tp:docstring>
          The string identifier of the status not to publish anymore for the user
        </tp:docstring>
      </arg>
      <tp:docstring>
        Request that the given presence status is no longer published for the
        user. Changes will be indicated by
        <tp:member-ref>PresenceUpdate</tp:member-ref> signals being emitted. As
        with <tp:member-ref>ClearStatus</tp:member-ref>, removing a status may
        actually result in it being replaced by a default available status.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.PermissionDenied"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument">
          <tp:docstring>The status requested is not currently set</tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>
    <method name="RequestPresence" tp:name-for-bindings="Request_Presence">
      <arg direction="in" name="Contacts" tp:type="Contact_Handle[]" type="au">
        <tp:docstring>
          An array of the contacts whose presence should be obtained
        </tp:docstring>
      </arg>
      <tp:docstring>
        Request the presence for contacts on this connection. A <tp:member-ref>PresenceUpdate</tp:member-ref>
        signal will be emitted when they are received. This is not the same as
        subscribing to the presence of a contact, which must be done using the
        'subscription' <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type">ContactList</tp:dbus-ref>,
        and on some protocols presence information may not be available unless
        a subscription exists.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle"/>
        <tp:error name="org.freedesktop.Telepathy.Error.PermissionDenied"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable">
          <tp:docstring>
            The presence of the requested contacts is not reported to this connection
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>
    <method name="SetLastActivityTime" tp:name-for-bindings="Set_Last_Activity_Time">
      <arg direction="in" name="Time" tp:type="Unix_Timestamp" type="u">
        <tp:docstring>
          A UNIX timestamp of the user's last activity time (in UTC)
        </tp:docstring>
      </arg>
      <tp:docstring>
        Request that the recorded last activity time for the user be updated on
        the server.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotImplemented">
          <tp:docstring>
            This protocol has no concept of idle time
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>
    <method name="SetStatus" tp:name-for-bindings="Set_Status">
      <arg direction="in" name="Statuses" tp:type="Multiple_Status_Map" type="a{sa{sv}}">
        <tp:docstring>
          A dictionary mapping status identifiers to dictionaries, which
          map optional parameter names to their variant-boxed values
        </tp:docstring>
      </arg>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Request that the user's presence be changed to the given statuses
          and desired parameters. Changes will be reflected by
          <tp:member-ref>PresenceUpdate</tp:member-ref>
          signals being emitted.</p>

        <p>Statuses whose <tp:type>Connection_Presence_Type</tp:type>
          is Offline, Error or Unknown MUST NOT be passed to this
          function. Connection managers SHOULD reject these statuses.</p>

        <tp:rationale>
          <p>The same rationale as for <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection.Interface">SimplePresence.SetPresence</tp:dbus-ref>
            applies.</p>
        </tp:rationale>

        <p>On certain protocols, this method may be
          called on a newly-created connection which is still in the
          DISCONNECTED state, and will sign on with the requested status.
          If the requested status is not available after signing on,
          NotAvailable will be returned and the connection will remain
          offline, or if the protocol does not support signing on with
          a certain status, Disconnected will be returned.</p>
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument"/>
        <tp:error name="org.freedesktop.Telepathy.Error.PermissionDenied"/>
      </tp:possible-errors>
    </method>

    <tp:deprecated version="0.17.21">Client implementations
      SHOULD use <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection.Interface">SimplePresence</tp:dbus-ref>
      instead.</tp:deprecated>
    <tp:changed version="0.17.23">Connection managers implementing
      Presence MUST implement SimplePresence too.</tp:changed>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">

      <p>This interface is for services which have a concept of presence which
        can be published for yourself and monitored on your contacts.
        Telepathy's definition of presence is based on that used by
        <a href="http://www.galago-project.org/">the Galago project</a>.</p>

    <p>Presence on an individual (yourself or one of your contacts) is modelled as
    a last activity time along with a set of zero or more statuses, each of
    which may have arbitrary key/value parameters. Valid statuses are defined
    per connection, and a list of them can be obtained with the
    <tp:member-ref>GetStatuses</tp:member-ref> method.</p>

    <p>(The SimplePresence interface which replaces this one restricts
      presences to one status per contact, with an optional message, which is
      in practice all that was implemented on this interface.)</p>

    <p>Each status has an arbitrary string identifier which should have an agreed
    meaning between the connection manager and any client which is expected to
    make use of it. The well-known values defined by the <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection.Interface">SimplePresence</tp:dbus-ref>
      interface SHOULD be used where possible</p>

    <p>As well as these well-known status identifiers, every status also has a
    numerical type value chosen from
    <tp:type>Connection_Presence_Type</tp:type> which can be used by the client
    to classify even unknown statuses into different fundamental types.</p>

    <p>These numerical types exist so that even if a client does not understand
    the string identifier being used, and hence cannot present the presence to
    the user to set on themselves, it may display an approximation of the
    presence if it is set on a contact.</p>

    <p>The dictionary of variant types allows the connection manager to exchange
    further protocol-specific information with the client. It is recommended
    that the string (s) argument 'message' be interpreted as an optional
    message which can be associated with a presence status.</p>

    <p>If the connection has a 'subscribe' contact list,
    <tp:member-ref>PresenceUpdate</tp:member-ref> signals should be emitted to
    indicate changes of contacts on this list, and should also be emitted for
    changes in your own presence. Depending on the protocol, the signal may
    also be emitted for others such as people with whom you are communicating,
    and any user interface should be updated accordingly.</p>

    <p>On some protocols, <tp:member-ref>RequestPresence</tp:member-ref> may
    only succeed on contacts on your 'subscribe' list, and other contacts will
    cause a PermissionDenied error.  On protocols where there is no 'subscribe'
    list, and RequestPresence succeeds, a client may poll the server
    intermittently to update any display of presence information.</p>
    </tp:docstring>

  </interface>
</node>
<node name="/Connection_Interface_Contacts" xml:base="../spec/Connection_Interface_Contacts.xml">
  <tp:copyright> Copyright (C) 2005-2008 Collabora Limited </tp:copyright>
  <tp:copyright> Copyright (C) 2005, 2006 Nokia Corporation </tp:copyright>
  <tp:copyright> Copyright (C) 2006 INdT </tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or modify it
      under the terms of the GNU Lesser General Public License as published by
      the Free Software Foundation; either version 2.1 of the License, or (at
      your option) any later version.</p>

    <p>This library is distributed in the hope that it will be useful, but
      WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser
      General Public License for more details.</p>

    <p>You should have received a copy of the GNU Lesser General Public License
      along with this library; if not, write to the Free Software Foundation,
      Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Connection.Interface.Contacts">
    <tp:requires interface="org.freedesktop.Telepathy.Connection"/>
    <tp:added version="0.17.9"/>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>This interface allows many attributes of many contacts to be
        obtained in a single D-Bus round trip.</p>

      <p>Each contact attribute has an string identifier
        (<tp:type>Contact_Attribute</tp:type>), which is namespaced
        by the D-Bus interface which defines it.</p>
    </tp:docstring>

    <tp:simple-type name="Contact_Attribute" type="s">
      <tp:docstring>
        A <tp:type>DBus_Interface</tp:type>, followed by a slash '/' character
        and an identifier for an attribute defined by that interface. The
        attribute identifier SHOULD be in lower case.

        <tp:rationale>
          These aren't D-Bus core Properties, and we want them to look visibly
          different.
        </tp:rationale>
      </tp:docstring>
    </tp:simple-type>

    <tp:mapping name="Single_Contact_Attributes_Map">
      <tp:docstring>
        Some of the attributes of a single contact.
      </tp:docstring>

      <tp:member name="Attribute" tp:type="Contact_Attribute" type="s">
        <tp:docstring>
          The name of the attribute
        </tp:docstring>
      </tp:member>

      <tp:member name="Value" type="v">
        <tp:docstring>
          The value of the attribute
        </tp:docstring>
      </tp:member>
    </tp:mapping>

    <tp:mapping name="Contact_Attributes_Map">
      <tp:docstring>Mapping returned by
        <tp:member-ref>GetContactAttributes</tp:member-ref>, representing a
        collection of Contacts and their requested attributes.</tp:docstring>

      <tp:member name="Contact" tp:type="Contact_Handle" type="u">
        <tp:docstring>
          A contact
        </tp:docstring>
      </tp:member>

      <tp:member name="Attributes" tp:type="Single_Contact_Attributes_Map" type="a{sv}">
        <tp:docstring>
          Attributes of that contact
        </tp:docstring>
      </tp:member>
    </tp:mapping>

    <property access="read" name="ContactAttributeInterfaces" tp:name-for-bindings="Contact_Attribute_Interfaces" tp:type="DBus_Interface[]" type="as">
      <tp:docstring>
        A list of D-Bus interfaces for which
        <tp:member-ref>GetContactAttributes</tp:member-ref> is expected to work.
        This cannot change during the lifetime of the Connection.
      </tp:docstring>
    </property>

    <method name="GetContactAttributes" tp:name-for-bindings="Get_Contact_Attributes">
      <tp:docstring>
        Return any number of contact attributes for the given handles.
      </tp:docstring>

      <arg direction="in" name="Handles" tp:type="Contact_Handle[]" type="au">
        <tp:docstring>
          An array of handles representing contacts.
        </tp:docstring>
      </arg>

      <arg direction="in" name="Interfaces" tp:type="DBus_Interface[]" type="as">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>A list of strings indicating which D-Bus interfaces the calling
            process is interested in. All supported attributes from these
            interfaces, whose values can be obtained without additional network
            activity, will be in the reply.</p>

          <p>It is an error to request interfaces that are not supported by
            this Connection (i.e. mentioned in the
            <tp:member-ref>ContactAttributeInterfaces</tp:member-ref>
            property).</p>

          <tp:rationale>
            <p>This makes it possible to distinguish between interfaces for
              which the Connection has nothing to say (e.g. we don't know the
              avatar tokens of any of the contacts, so we omitted them all),
              and interfaces for which this API isn't supported.</p>
          </tp:rationale>

          <p>Attributes from the interface
            <tp:dbus-ref>org.freedesktop.Telepathy.Connection</tp:dbus-ref>
            are always returned, and need not be requested explicitly.</p>

          <p>As well as returning cached information immediately, the
            connection MAY start asynchronous requests to obtain better
            values for the contact attributes. If better values are later
            obtained by this process, they will be indicated with the usual
            signals (such as <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection.Interface.Aliasing">AliasesChanged</tp:dbus-ref>).</p>

          <tp:rationale>
            For instance, an XMPP connection manager could download vCards
            in response to a request for <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection.Interface">Aliasing</tp:dbus-ref>
            attributes.
          </tp:rationale>
        </tp:docstring>
      </arg>

      <arg direction="in" name="Hold" type="b">
        <tp:docstring>
          If true, all handles in the result have been held on behalf of the
          calling process, as if by a call to
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection.HoldHandles</tp:dbus-ref>.

          <tp:rationale>
            For further round-trip avoidance.
          </tp:rationale>
        </tp:docstring>
      </arg>

      <arg direction="out" name="Attributes" tp:type="Contact_Attributes_Map" type="a{ua{sv}}">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>A dictionary mapping the contact handles to contact attributes.
            If any of the requested handles are in fact invalid, they are
            simply omitted from this mapping. If contact attributes are not
            immediately known, the behaviour is defined by the interface;
            the attribute should either be omitted from the result or
            replaced with a default value.</p>

          <p>Each contact's attributes will always include at least the
            identifier that would be obtained by inspecting the handle
            (<code>org.freedesktop.Telepathy.Connection/contact-id</code>).</p>
        </tp:docstring>
      </arg>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument">
          <tp:docstring>
            One of the requested interfaces is not supported (mentioned in
            <tp:member-ref>ContactAttributeInterfaces</tp:member-ref>).
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>
  </interface>
</node>
<node name="/Connection_Interface_Requests" xml:base="../spec/Connection_Interface_Requests.xml">
  <tp:copyright>Copyright (C) 2008 Collabora Limited</tp:copyright>
  <tp:copyright>Copyright (C) 2008 Nokia Corporation</tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
      modify it under the terms of the GNU Lesser General Public
      License as published by the Free Software Foundation; either
      version 2.1 of the License, or (at your option) any later version.</p>

    <p>This library is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
      Lesser General Public License for more details.</p>

    <p>You should have received a copy of the GNU Lesser General Public
      License along with this library; if not, write to the Free Software
      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
      USA.</p>
  </tp:license>

  <interface name="org.freedesktop.Telepathy.Connection.Interface.Requests">
    <tp:requires interface="org.freedesktop.Telepathy.Connection"/>
    <tp:added version="0.17.11">(as stable API)</tp:added>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>An enhanced version of the Telepathy connection interface, which can
        represent bundles of channels that should be dispatched together, and
        does not assume any particular properties by which channels are
        uniquely identifiable.</p>

      <p>If this interface is implemented on a connection, then
        <tp:member-ref>NewChannels</tp:member-ref> MUST be emitted for
        all new channels, even those created with <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection">RequestChannel</tp:dbus-ref>.</p>
    </tp:docstring>

    <tp:struct array-name="Channel_Details_List" name="Channel_Details">
      <tp:added version="0.17.11">(as stable API)</tp:added>

      <tp:docstring>
        Enough details of a channel that clients can work out how to dispatch
        or handle it.
      </tp:docstring>

      <tp:member name="Channel" type="o">
        <tp:docstring>
          The object path of the channel.
        </tp:docstring>
      </tp:member>

      <tp:member name="Properties" tp:type="Qualified_Property_Value_Map" type="a{sv}">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>Properties of the channel.</p>

          <p>Connection managers MUST NOT include properties in this mapping
            if their values can change. Clients MUST ignore properties
            that appear in this mapping if their values can change.</p>

          <tp:rationale>
            <p>If properties that could change were included, the following
              race condition would be likely to exist in some cases:</p>

            <ul>
              <li>NewChannels or Get(&quot;Channels&quot;) includes a property P with
                value V1</li>
              <li>Client creates a proxy object for the channel</li>
              <li>The value of P changes to V2</li>
              <li>Client connects to PChanged signal</li>
              <li>Client should call Get(&quot;P&quot;) or GetAll here, to avoid the
                race, but client's author has forgotten to do so</li>
              <li>Proxy object thinks P == V1, but actually P == V2</li>
            </ul>

            <p>We've taken the opportunity to make the API encourage the
              client author to get it right. Where possible, we intend that
              properties whose value will be used in channel dispatching
              or other &quot;early&quot; processing will be defined so that they are
              immutable (can never change).</p>
          </tp:rationale>

          <p>Each dictionary MUST contain the keys
            <tp:dbus-ref>org.freedesktop.Telepathy.Channel.ChannelType</tp:dbus-ref>,
            <tp:dbus-ref>org.freedesktop.Telepathy.Channel.TargetHandleType</tp:dbus-ref>,
            <tp:dbus-ref>org.freedesktop.Telepathy.Channel.TargetHandle</tp:dbus-ref>,
            <tp:dbus-ref>org.freedesktop.Telepathy.Channel.TargetID</tp:dbus-ref>
            and
            <tp:dbus-ref>org.freedesktop.Telepathy.Channel.Requested</tp:dbus-ref>.
          </p>

          <tp:rationale>
            <p>We expect these to be crucial to the channel-dispatching
              process.</p>
          </tp:rationale>
        </tp:docstring>
      </tp:member>
    </tp:struct>

    <method name="CreateChannel" tp:name-for-bindings="Create_Channel">
      <tp:added version="0.17.11">(as stable API)</tp:added>
      <tp:changed version="0.17.14">It is now guaranteed that
        CreateChannel returns the channel before NewChannels announces it
        (the reverse was previously guaranteed).</tp:changed>

      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Request that an entirely new channel is created.</p>

        <tp:rationale>
          <p>There is deliberately no flag corresponding to the
            suppress_handler argument to
            <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection.RequestChannel</tp:dbus-ref>,
            because passing a FALSE value for that argument is deprecated.
            Requests made using this interface always behave as though
            suppress_handler was TRUE.</p>
        </tp:rationale>

      </tp:docstring>

      <arg direction="in" name="Request" tp:type="Qualified_Property_Value_Map" type="a{sv}">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>A dictionary containing desirable properties, which MUST include
            <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel">ChannelType</tp:dbus-ref>.
            Some properties
            are defined such that only an exact match makes sense, and
            connection managers MUST NOT satisfy a request with a channel
            where that property does not match; some properties are defined
            such that the connection manager MAY treat the request as merely
            a hint, and make a best-effort attempt to satisfy it. This is
            documented separately for each property.</p>

          <p>If this dictionary contains a property whose semantics
            are not known to the connection manager, this method MUST fail
            without side-effects (in particular it must not create a new
            channel).</p>

          <tp:rationale>
            <p>This is necessary if we want to be able to invent properties
              in future that, when used in a request, are hard requirements
              rather than just hints. A connection manager that did not know
              the semantics of those properties could incorrectly return a
              new channel that did not satisfy the requirements.</p>
          </tp:rationale>

          <p>The connection manager MUST NOT respond successfully,
            and SHOULD NOT create a new channel or cause any other
            side-effects, unless it can create a new channel that satisfies
            the client's requirements.</p>

          <p>Properties that will be set by this argument need not have write
            access after the channel has been created - indeed, it is
            expected that most will be read-only.</p>
        </tp:docstring>
      </arg>

      <arg direction="out" name="Channel" type="o">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The Channel object, which MUST NOT be signalled with
            <tp:member-ref>NewChannels</tp:member-ref> until after this method
            returns.</p>

          <tp:rationale>
            <p>This allows the requester to alter its handling of
              NewChannels by knowing whether one of the channels satisfied
              a request it made.</p>
          </tp:rationale>
        </tp:docstring>
      </arg>

      <arg direction="out" name="Properties" tp:type="Qualified_Property_Value_Map" type="a{sv}">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>Properties of the channel that was produced, equivalent to
            the properties in <tp:type>Channel_Details</tp:type>.
            Connection managers MUST NOT include properties here whose
            values can change, for the same reasons as in
            <tp:type>Channel_Details</tp:type>.</p>
        </tp:docstring>
      </arg>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotImplemented">
          <tp:docstring>
            The channel request was one that can never succeed,
            such as requesting an unsupported channel type, or requesting
            a channel type which this connection manager does not support with
            the given target handle type.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle">
          <tp:docstring>
            An invalid handle was requested as the value of a property whose
            value is a handle (like
            <tp:dbus-ref namespace="org.freedesktop.Telepathy">Channel.TargetHandle</tp:dbus-ref>),
            or a syntactically invalid identifier was requested as the value
            of a property whose value is the string corresponding to a handle
            (like <tp:dbus-ref namespace="org.freedesktop.Telepathy">Channel.TargetID</tp:dbus-ref>).
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument">
          <tp:docstring>
            The request matched the fixed properties of a
            <tp:type>Requestable_Channel_Class</tp:type> in
            <tp:member-ref>RequestableChannelClasses</tp:member-ref>, but the
            allowed arguments did not make sense; for example, a <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type">RoomList</tp:dbus-ref>
            was requested, but the <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type.RoomList">Server</tp:dbus-ref>
            property provided was not a valid DNS name.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotCapable">
          <tp:docstring>
            The requested channel cannot be created because the requested
            contact is using a client that lacks a particular feature.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.Offline">
          <tp:docstring>
            The requested channel cannot be created because the target is
            offline.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable">
          <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
            <p>The requested channel cannot be created, but in
              principle, a similar request might succeed in future.
              For instance, this might be because:</p>

            <ul>
              <li>a channel matching the request already exists and the
                protocol requires that only one such channel can exist at a
                time</li>
              <li>a channel matching the request has already been requested
                (by a previous call to CreateChannel,
                <tp:member-ref>EnsureChannel</tp:member-ref>,
                <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection.RequestChannel</tp:dbus-ref>
                or similar) and the protocol requires that only one such
                channel can exist at a time</li>
            </ul>
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.Channel.Banned"/>
        <tp:error name="org.freedesktop.Telepathy.Error.Channel.Full"/>
        <tp:error name="org.freedesktop.Telepathy.Error.Channel.InviteOnly"/>
        <tp:error name="org.freedesktop.Telepathy.Error.PermissionDenied"/>
      </tp:possible-errors>
    </method>

    <method name="EnsureChannel" tp:name-for-bindings="Ensure_Channel">
      <tp:added version="0.17.12"/>
      <tp:changed version="0.17.14">It is now guaranteed that if
        the channel was created by this call to EnsureChannel, it's returned
        before NewChannels announces it (the reverse was previously
        guaranteed).</tp:changed>

      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Request that channels are ensured to exist.</p>

        <tp:rationale>
          <p>The connection manager is in the best position to determine which
            existing channels could satisfy which requests.</p>
        </tp:rationale>

      </tp:docstring>

      <arg direction="in" name="Request" tp:type="Qualified_Property_Value_Map" type="a{sv}">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>A dictionary containing desirable properties, with the same
            semantics as the corresponding parameter to
            <tp:member-ref>CreateChannel</tp:member-ref>.</p>
        </tp:docstring>
      </arg>

      <arg direction="out" name="Yours" type="b">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>If false, the caller of EnsureChannel MUST assume that some
            other process is handling this channel; if true, the caller of
            EnsureChannel SHOULD handle it themselves or delegate it to another
            client.</p>

          <p>If the creation of a channel makes several calls to EnsureChannel
            (and no other requests) successful, exactly one of those calls MUST
            return a true value for this argument.</p>

          <p>If the creation of a channel makes other requests successful,
            the value returned for this argument MUST be such that exactly
            one of the clients making requests ends up responsible for the
            channel. In particular, if
            <tp:member-ref>CreateChannel</tp:member-ref> returns a channel
            <em>C</em>, any EnsureChannel calls that also return <em>C</em>
            MUST return a false value for this argument.</p>
        </tp:docstring>
      </arg>

      <arg direction="out" name="Channel" type="o">
        <tp:docstring>
          The Channel object. If it was created as a result of this method
          call, it MUST NOT be signalled by
          <tp:member-ref>NewChannels</tp:member-ref> until after this method
          returns.

          <tp:rationale>
            <p>This allows the requester to alter its handling of
              NewChannels by knowing whether one of the channels satisfied
              a request it made.</p>
          </tp:rationale>
        </tp:docstring>
      </arg>

      <arg direction="out" name="Properties" tp:type="Qualified_Property_Value_Map" type="a{sv}">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>Properties of the channel that was produced, equivalent to
            the properties in <tp:type>Channel_Details</tp:type>.
            Connection managers MUST NOT include properties here whose
            values can change, for the same reasons as in
            <tp:type>Channel_Details</tp:type>.</p>
        </tp:docstring>
      </arg>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotImplemented">
          <tp:docstring>
            The channel request was one that can never succeed,
            such as requesting an unsupported channel type, or requesting
            a channel type which this connection manager does not support with
            the given target handle type.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle">
          <tp:docstring>
            An invalid handle was requested as the value of a property whose
            value is a handle (like
            <tp:dbus-ref namespace="org.freedesktop.Telepathy">Channel.TargetHandle</tp:dbus-ref>),
            or a syntactically invalid identifier was requested as the value
            of a property whose value is the string corresponding to a handle
            (like <tp:dbus-ref namespace="org.freedesktop.Telepathy">Channel.TargetID</tp:dbus-ref>).
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument">
          <tp:docstring>
            The request matched the fixed properties of a
            <tp:type>Requestable_Channel_Class</tp:type> in
            <tp:member-ref>RequestableChannelClasses</tp:member-ref>, but the
            allowed arguments did not make sense; for example, a <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type">RoomList</tp:dbus-ref>
            was requested, but the <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type.RoomList">Server</tp:dbus-ref>
            property provided was not a valid DNS name.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotCapable">
          <tp:docstring>
            The requested channel cannot be created because the requested
            contact is using a client that lacks a particular feature.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.Offline">
          <tp:docstring>
            The requested channel cannot be created because the target is
            offline.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable">
          <tp:docstring>
            The requested channel cannot be created, but in
            principle, a similar request might succeed in future.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.Channel.Banned"/>
        <tp:error name="org.freedesktop.Telepathy.Error.Channel.Full"/>
        <tp:error name="org.freedesktop.Telepathy.Error.Channel.InviteOnly"/>
        <tp:error name="org.freedesktop.Telepathy.Error.PermissionDenied"/>
      </tp:possible-errors>
    </method>

    <signal name="NewChannels" tp:name-for-bindings="New_Channels">
      <tp:added version="0.17.11">(as stable API)</tp:added>
      <tp:changed version="0.17.14">Added a guarantee of ordering
        relative to NewChannel</tp:changed>

      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>New channels have been created. The connection manager SHOULD emit
          a single signal for any group of closely related channels that are
          created at the same time, so that the channel dispatcher can try to
          dispatch them to a handler as a unit.</p>

        <p>In particular, if additional channels are created as a side-effect
          of a call to <tp:member-ref>CreateChannel</tp:member-ref>,
          these channels SHOULD appear in the same NewChannels signal as
          the channel that satisfies the request.</p>

        <tp:rationale>
          <p>Joining a MUC Tube in XMPP requires joining the corresponding
            MUC (chatroom), so a <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type">Text</tp:dbus-ref>
            channel can be created as a side-effect.</p>
        </tp:rationale>

        <p>Every time NewChannels is emitted, it MUST be followed by
          a <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection.NewChannel</tp:dbus-ref>
          signal for each channel.</p>

        <tp:rationale>
          <p>The double signal emission is for the benefit of older Telepathy
            clients, which won't be listening for NewChannels.</p>

          <p>The more informative NewChannels signal comes first so that
            clients that did not examine the connection to find
            out whether Requests is supported will see the more informative
            signal for each channel first, and then ignore the less
            informative signal because it announces a new channel of which
            they are already aware.</p>
        </tp:rationale>
      </tp:docstring>

      <arg name="Channels" tp:type="Channel_Details[]" type="a(oa{sv})">
        <tp:docstring>
          The channels and their details. All channels that are signalled
          together like this MUST have the same
          <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.FUTURE">Bundle</tp:dbus-ref>
          property, which may
          either refer to an existing bundle, or establish a new bundle.
        </tp:docstring>
      </arg>
    </signal>

    <property access="read" name="Channels" tp:name-for-bindings="Channels" tp:type="Channel_Details[]" type="a(oa{sv})">
      <tp:added version="0.17.11">(as stable API)</tp:added>
      <tp:docstring>
        A list of all the channels which currently exist on this connection.
        Change notification is via the
        <tp:member-ref>NewChannels</tp:member-ref> and
        <tp:member-ref>ChannelClosed</tp:member-ref> signals.
      </tp:docstring>
    </property>

    <signal name="ChannelClosed" tp:name-for-bindings="Channel_Closed">
      <tp:added version="0.17.11">(as stable API)</tp:added>
      <tp:docstring>
        Emitted when a channel is closed and hence disappears from the
        <tp:member-ref>Channels</tp:member-ref> property.

        <tp:rationale>
          This is redundant with the <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel">Closed</tp:dbus-ref>
          signal on the channel itself, but it does provide full change
          notification for the Channels property.
        </tp:rationale>
      </tp:docstring>

      <arg name="Removed" type="o">
        <tp:docstring>
          The channel which has been removed from the Channels property
        </tp:docstring>
      </arg>
    </signal>

    <tp:mapping array-name="Channel_Class_List" name="Channel_Class">
      <tp:added version="0.17.11">(as stable API)</tp:added>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Mapping representing a class of channels that can be requested
          from a connection manager, can be handled by a user interface,
          are supported by a contact, etc.</p>

        <p>Classes of channel are identified by the fixed values of
          a subset of their properties.</p>

        <p>Channel classes SHOULD always include the keys
          <tp:dbus-ref>org.freedesktop.Telepathy.Channel.ChannelType</tp:dbus-ref>
          and
          <tp:dbus-ref>org.freedesktop.Telepathy.Channel.TargetHandleType</tp:dbus-ref>.
          </p>
      </tp:docstring>

      <tp:member name="Key" tp:type="DBus_Qualified_Member" type="s">
        <tp:docstring>
          A D-Bus interface name, followed by a dot and a D-Bus property name.
        </tp:docstring>
      </tp:member>

      <tp:member name="Value" type="v">
        <tp:docstring>
          The value of the property.
        </tp:docstring>
      </tp:member>
    </tp:mapping>

    <tp:struct array-name="Requestable_Channel_Class_List" name="Requestable_Channel_Class">
      <tp:added version="0.17.11">(as stable API)</tp:added>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Structure representing a class of channels that can be requested,
          identified by a set of properties that identify that class of
          channel.</p>

        <tp:rationale>
          <p>This will often just be the channel type and the handle type,
            but can include other properties of the channel - for instance,
            encrypted channels might require properties that
            unencrypted channels do not, like an encryption key.</p>
        </tp:rationale>

        <p>In some cases, these classes of channel may overlap, in the sense
          that one class fixes all the properties that another class does,
          plus some more properties.</p>

        <tp:rationale>
          <p>For older clients to still be able to understand how to request
            channels in the presence of a hypothetical &quot;encryption&quot; interface,
            we'd need to represent it like this:</p>

          <ul>
            <li>class 1: ChannelType = Text, TargetHandleType = CONTACT</li>
            <li>class 2: Channel.ChannelType = Text,
              Channel.TargetHandleType = CONTACT,
              Encryption.Encrypted = TRUE</li>
          </ul>
        </tp:rationale>
      </tp:docstring>

      <tp:member name="Fixed_Properties" tp:type="Channel_Class" type="a{sv}">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The property values that identify this requestable channel class.
            These properties MUST be included in requests for a channel of this
            class, and MUST take these values.</p>

          <p>Clients that do not understand the semantics of all the
            Fixed_Properties MUST NOT request channels of this class, since
            they would be unable to avoid making an incorrect request.</p>

          <p>This implies that connection managers wishing to make channels
            available to old or minimal clients SHOULD have a channel class
            with the minimum number of Fixed_Properties, and MAY additionally
            have channel classes with extra Fixed_Properties.</p>
        </tp:docstring>
      </tp:member>

      <tp:member name="Allowed_Properties" tp:type="DBus_Qualified_Member[]" type="as">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>Properties that MAY be set when requesting a channel of this
            channel type and handle type.</p>

          <p>This array MUST NOT include properties that are in the
            Fixed_Properties mapping.</p>

          <p>Properties in this array may either be required or optional,
            according to their documented semantics.</p>

          <tp:rationale>
            <p>For instance, if
              TargetHandleType takes a value that is not Handle_Type_None,
              one or the other of TargetHandle and TargetID is required.
              Clients are expected to understand the documented relationship
              between the properties, so we do not have separate arrays
              of required and optional properties.</p>
          </tp:rationale>

          <p>If this array contains the
            <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.FUTURE">Bundle</tp:dbus-ref>
            property, then this class of channel can be combined with other
            channels with that property in a request, or added to an existing
            bundle. If not, this signifies that the connection manager is
            unable to mark channels of this class as part of a bundle - this
            means that to the remote contact they are likely to be
            indistinguishable from channels requested separately.</p>
        </tp:docstring>
      </tp:member>
    </tp:struct>

    <property access="read" name="RequestableChannelClasses" tp:name-for-bindings="Requestable_Channel_Classes" tp:type="Requestable_Channel_Class[]" type="a(a{sv}as)">
      <tp:added version="0.17.11">(as stable API)</tp:added>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The classes of channel that are expected to be available on this
          connection, i.e. those for which
          <tp:member-ref>CreateChannel</tp:member-ref> can reasonably
          be expected to succeed. User interfaces can use this information
          to show or hide UI components.</p>

        <p>This property cannot change after the connection has gone to
          state Connection_Status_Connected, so there is no change
          notification (if the connection has context-dependent capabilities,
          it SHOULD advertise support for all classes of channel that it might
          support during its lifetime). Before this state has been reached,
          the value of this property is undefined.</p>

        <tp:rationale>
          <p>This is not on an optional interface, because connection
            managers can always offer some sort of clue about the channel
            classes they expect to support (at worst, they can announce
            support for everything for which they have code).</p>
        </tp:rationale>
      </tp:docstring>
    </property>

  </interface>
</node>
<node name="/Connection_Interface_Location" xml:base="../spec/Connection_Interface_Location.xml">
  <tp:copyright>Copyright (C) 2008 Collabora Ltd.</tp:copyright>
  <tp:copyright>Copyright (C) 2008 Nokia Corporation</tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Connection.Interface.Location">
    <tp:added version="0.17.27">(as stable API)</tp:added>
    <tp:requires interface="org.freedesktop.Telepathy.Connection"/>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>An interface on connections to support protocols which allow users to
        publish their current geographical location, and subscribe to the
        current location of their contacts.</p>

      <p>This interface is geared strongly towards automatic propagation and
        use of this information, so focuses on latitude, longitude and
        altitude which can be determined by GPS, although provision is also
        included for an optional human-readable description of locations. All
        co-ordinate information is required to be relative to the WGS84
        datum.</p>

      <p>The information published through this interface is intended to have
        the same scope as presence information, so will normally be made
        available to those individuals on the user's &quot;publish&quot; contact list.
        Even so, user interfaces should not automatically publish location
        information without the consent of the user, and it is recommended
        that an option is made available to reduce the accuracy of the
        reported information to allow the user to maintain their privacy.</p>

      <p>Location information is represented using the terminology of XMPP's
        <a href="http://www.xmpp.org/extensions/xep-0080.html">XEP-0080</a>
        or the XEP-0080-derived
        <a href="http://geoclue.freedesktop.org/">Geoclue</a> API where
        possible.</p>
    </tp:docstring>

    <!-- Potentially to be reinstated later:
         http://bugs.freedesktop.org/show_bug.cgi?id=19585
    <tp:enum name="Location_Accuracy_Level" type="i">
      <tp:docstring>
        A location accuracy level. This should be kept in sync with
        GeoclueAccuracyLevel in the Geoclue project.
      </tp:docstring>

      <tp:enumvalue suffix="None" value="0">
        <tp:docstring>
          The accuracy is unspecified.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Country" value="1">
        <tp:docstring>
          The location indicates the contact's country.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Region" value="2">
        <tp:docstring>
          The location indicates the contact's region within a country.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Locality" value="3">
        <tp:docstring>
          The location indicates the contact's locality within a region
          (e.g. the correct city).
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Postal_Code" value="4">
        <tp:docstring>
          The location indicates the correct postal code.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Street" value="5">
        <tp:docstring>
          The location indicates the correct street.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Detailed" value="6">
        <tp:docstring>
          The location's accuracy is given by the accuracy key.
        </tp:docstring>
      </tp:enumvalue>
    </tp:enum>
    -->

    <tp:mapping name="Location">
      <tp:docstring>
        A user's location, represented as an extensible mapping.
      </tp:docstring>

      <tp:member name="Key" type="s">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">

          <p>Civic addresses are represented by the following well-known
            keys (all of which have string values), which should be kept in
            sync with those used in XEP-0080 and in the Geoclue project:</p>

          <ul>
            <li>countrycode - s: an ISO-3166-1 alpha-2 (two-letter) country
              code, e.g. &quot;us&quot;, &quot;gb&quot;, &quot;fr&quot;</li>
            <li>country - s: a country name in unspecified locale, e.g.
              &quot;USA&quot;</li>
            <li>region - s: an administrative region of the nation, such as a
              state or province</li>
            <li>locality - s: a locality within the administrative region, such
              as a town or city</li>
            <li>area - s: a named area such as a campus or neighborhood</li>
            <li>postalcode - s: a code used for postal delivery</li>
            <li>street - s: a thoroughfare within the locality, or a crossing of
              two thoroughfares</li>
          </ul>

          <p>The following address keys are defined in XEP-0080 but not by
            Geoclue, and are also allowed:</p>

          <ul>
            <li>building - s: a specific building on a street or in an area</li>
            <li>floor - s: a particular floor in a building</li>
            <li>room - s: a particular room in a building</li>
            <li>text - s: any more specific information, e.g.
              &quot;Northwest corner of the lobby&quot;</li>
            <li>description - s: A natural-language name for or description of
              the location, e.g. &quot;Bill's house&quot;</li>
            <li>uri - s: a URI representing the location or pointing to more
              information about it</li>
          </ul>

          <p>Since the previous strings have data intended to be read by users,
            the language used should be stated using:</p>

          <ul>
            <li>language - s: a specific language or locale of location
              information in a format compatible to RFC 4646. Note that UTF-8
              is the only allowed encoding, e.g. &quot;en&quot; or &quot;fr-CA&quot;.</li>
          </ul>

          <p>Positions are represented by the following well-known keys:</p>

          <ul>
            <li>lat - d: latitude in decimal degrees north, -90 to +90,
              relative to the WGS-84 datum
              <tp:rationale>
                This is from XEP-0080; the XEP allows use of a different
                datum, but recommends this one. We enforce sanity by requiring
                a consistent datum: a minimal compliant implementation of this
                specification in terms of XEP-0080 would simply ignore the
                &lt;lat&gt; and &lt;lon&gt; elements if &lt;datum&gt; exists
                and has a value other than WGS-84, while an advanced
                implementation might correct for the different datum.
              </tp:rationale>
            </li>
            <li>lon - d: Longitude in decimal degrees east, -180 to +180,
              relative to the WGS-84 datum
              <tp:rationale>
                Same rationale as 'lat'
              </tp:rationale>
            </li>
            <li>alt - d: altitude in metres above sea level (negative
              if below sea level)
              <tp:rationale>
                This is from XEP-0080
              </tp:rationale>
            </li>

            <!-- Potentially to be reinstated later:
                 http://bugs.freedesktop.org/show_bug.cgi?id=19585
            <li>accuracy-level - i (<tp:type>Location_Accuracy_Level</tp:type>):
              an indication of accuracy, which SHOULD be omitted if it would be
              Location_Accuracy_Level_None or
              Location_Accuracy_Level_Detailed
              <tp:rationale>
                This is a struct field in GeoClue; the name is new in this
                specification, and was chosen in an attempt to avoid clashing
                with any future XEP-0080 terminology.
              </tp:rationale>
            </li>
            -->

            <li>accuracy - d: horizontal position error in metres if
              known
              <tp:rationale>
                This is from XEP-0080
              </tp:rationale>
            </li>
          </ul>

          <p>Velocities are represented by the following well-known keys:</p>

          <ul>
            <li>speed - d: speed in metres per second
              <tp:rationale>
                This is from XEP-0080
              </tp:rationale>
            </li>
            <li>bearing - d: direction of movement in decimal degrees,
              where North is 0 and East is 90
              <tp:rationale>
                This is from XEP-0080, and is equivalent to the struct field
                called &quot;direction&quot; in GeoClue
              </tp:rationale>
            </li>
          </ul>

          <p>Other well-known keys:</p>

          <ul>
            <li>timestamp - x (<tp:type>Unix_Timestamp64</tp:type>): the time
              that the contact was at this location, in seconds since
              1970-01-01T00:00:00Z (i.e. the beginning of 1970 in UTC)
              <tp:rationale>
                XEP-0080 uses an ISO 8601 string for this, but a number of
                seconds since the epoch is probably easier to work with.
              </tp:rationale>
            </li>
          </ul>
        </tp:docstring>
      </tp:member>

      <tp:member name="Value" type="v">
        <tp:docstring>
          The value corresponding to the well-known key.
        </tp:docstring>
      </tp:member>
    </tp:mapping>

    <tp:mapping name="Contact_Locations" type="a{ua{sv}}">
      <tp:docstring>
        A map from contacts to their locations.
      </tp:docstring>
      <tp:member name="Contact" tp:type="Contact_Handle" type="u">
        <tp:docstring>A contact</tp:docstring>
      </tp:member>
      <tp:member name="Location" tp:type="Location" type="a{sv}">
        <tp:docstring>The contact's location, which MAY be empty to indicate
          that the contact's location is unknown</tp:docstring>
      </tp:member>
    </tp:mapping>

    <method name="GetLocations" tp:name-for-bindings="Get_Locations">
      <tp:docstring>
        Return the current locations of the given contacts, if they are
        already known. If any of the given contacts' locations are not known,
        request their current locations, but return immediately without waiting
        for a reply; if a reply with a non-empty location is later received
        for those contacts, the <tp:member-ref>LocationUpdated</tp:member-ref>
        signal will be emitted for them.

        <tp:rationale>
          This method is appropriate for &quot;lazy&quot; location finding, for instance
          displaying the location (if available) of everyone in your contact
          list.
        </tp:rationale>
      </tp:docstring>

      <arg direction="in" name="Contacts" tp:type="Contact_Handle[]" type="au">
        <tp:docstring>
          The contacts whose locations should be returned or signalled.
        </tp:docstring>
      </arg>

      <arg direction="out" name="Locations" tp:type="Contact_Locations" type="a{ua{sv}}">
        <tp:docstring>
          The contacts' locations, if already known. Contacts whose locations
          are not already known are omitted from the mapping; contacts known
          to have no location information appear in the mapping with an empty
          Location dictionary.
        </tp:docstring>
      </arg>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle"/>
      </tp:possible-errors>
    </method>

    <method name="RequestLocation" tp:name-for-bindings="Request_Location">
      <tp:docstring>
        Return the current location of the given contact. If necessary, make
        a request to the server for up-to-date information, and wait for a
        reply.

        <tp:rationale>
          This method is appropriate for use in a &quot;Contact Information...&quot;
          dialog; it can be used to show progress information (while waiting
          for the method to return), and can distinguish between various error
          conditions.
        </tp:rationale>
      </tp:docstring>

      <arg direction="in" name="Contact" tp:type="Contact_Handle" type="u">
        <tp:docstring>
          The contact whose location should be returned.
        </tp:docstring>
      </arg>

      <arg direction="out" name="Location" tp:type="Location" type="a{sv}">
        <tp:docstring>
          The contact's location. It MAY be empty, indicating that no location
          information was found.
        </tp:docstring>
      </arg>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle"/>
        <tp:error name="org.freedesktop.Telepathy.Error.PermissionDenied">
          <tp:docstring>
            The requested contact does not allow the local user to see their
            location information.
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <signal name="LocationUpdated" tp:name-for-bindings="Location_Updated">
      <tp:docstring>
        Emitted when a contact's location changes or becomes known.
      </tp:docstring>

      <arg name="Contact" tp:type="Contact_Handle" type="u">
        <tp:docstring>
          The contact
        </tp:docstring>
      </arg>
      <arg name="Location" tp:type="Location" type="a{sv}">
        <tp:docstring>
          The contact's location, or empty to indicate that nothing is known
          about the contact's location.
        </tp:docstring>
      </arg>
    </signal>

    <method name="SetLocation" tp:name-for-bindings="Set_Location">
      <tp:docstring>
        Set the local user's own location.
      </tp:docstring>

      <arg direction="in" name="Location" type="a{sv}">
        <tp:docstring>
          The location to advertise. If the user wants to obscure their
          exact location by reducing the precision or accuracy, clients
          MUST do this themselves, rather than relying on the connection
          manager to do so. Clients that interact with more than one
          connection SHOULD advertise the same reduced-accuracy location
          to all of them, so that contacts cannot obtain an undesirably
          accurate location by assuming that random errors have been added
          and averaging the locations advertised on multiple connections.
        </tp:docstring>
      </arg>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotImplemented"/>
        <tp:error name="org.freedesktop.Telepathy.Error.PermissionDenied"/>
      </tp:possible-errors>
    </method>

    <property access="read" name="LocationAccessControlTypes" tp:name-for-bindings="Location_Access_Control_Types" tp:type="Rich_Presence_Access_Control_Type[]" type="au">
      <tp:docstring>The types of access control that are supported by this
        connection.</tp:docstring>
    </property>

    <property access="readwrite" name="LocationAccessControl" tp:name-for-bindings="Location_Access_Control" tp:type="Rich_Presence_Access_Control" type="(uv)">
      <tp:docstring>The current access control mechanism and settings
        for this connection. Before publishing location for the first time,
        if this has not been set by a client, implementations SHOULD
        set it to be as restrictive as possible (an empty whitelist, if
        supported).</tp:docstring>
    </property>

    <tp:contact-attribute name="location" tp:type="Location" type="a{sv}">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The same mapping that would be returned by
          <tp:member-ref>GetLocations</tp:member-ref> for this contact.
          Omitted from the result if the contact's location
          is not known.</p>
      </tp:docstring>
    </tp:contact-attribute>

  </interface>
</node>

</tp:spec>
<tp:spec>

<tp:title>Channel interfaces</tp:title>

<node name="/Channel" xml:base="../spec/Channel.xml">
  <tp:copyright>Copyright © 2005-2009 Collabora Limited</tp:copyright>
  <tp:copyright>Copyright © 2005-2009 Nokia Corporation</tp:copyright>
  <tp:copyright>Copyright © 2006 INdT</tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Channel">

    <property access="read" name="ChannelType" tp:name-for-bindings="Channel_Type" tp:type="DBus_Interface" type="s">
      <tp:added version="0.17.7"/>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The channel's type. This cannot change once the channel has
          been created.</p>

        <p>For compatibility between older connection managers and newer
          clients, if this is unavailable or is an empty string,
          clients MUST use the result of calling
          <tp:member-ref>GetChannelType</tp:member-ref>.</p>

        <tp:rationale>
          The GetAll method lets clients retrieve all properties in one
          round-trip, which is desirable.
        </tp:rationale>

        <p>When requesting a channel, the request MUST specify a channel
          type, and the request MUST fail if the specified channel type
          cannot be supplied.</p>

        <tp:rationale>
          Common sense.
        </tp:rationale>
      </tp:docstring>
    </property>

    <property access="read" name="Interfaces" tp:name-for-bindings="Interfaces" tp:type="DBus_Interface[]" type="as">
      <tp:added version="0.17.7"/>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Extra interfaces provided by this channel. This SHOULD NOT include
          the channel type and the Channel interface itself, and cannot
          change once the channel has been created.</p>

        <p>For compatibility between older connection managers and newer
          clients, if this is unavailable, or if this is an empty list and
          <tp:member-ref>ChannelType</tp:member-ref> is an empty string,
          clients MUST use the result of calling
          <tp:member-ref>GetInterfaces</tp:member-ref> instead. If this is an
          empty list but ChannelType is non-empty, clients SHOULD NOT call
          GetInterfaces; this implies that connection managers that implement
          the ChannelType property MUST also implement the Interfaces property
          correctly.</p>

        <tp:rationale>
          The GetAll method lets clients retrieve all properties in one
          round-trip, which is desirable.
        </tp:rationale>

        <p>When requesting a channel with a particular value for this
          property, the request must fail without side-effects unless the
          connection manager expects to be able to provide a channel whose
          interfaces include at least the interfaces requested.</p>
      </tp:docstring>
    </property>

    <property access="read" name="TargetHandle" tp:name-for-bindings="Target_Handle" tp:type="Handle" type="u">
      <tp:added version="0.17.7"/>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The handle (a representation for the identifier) of the contact,
          chatroom, etc. with which this handle communicates. Its type
          is given by the <tp:member-ref>TargetHandleType</tp:member-ref>
          property.</p>

        <p>This is fixed for the lifetime of the channel, so channels which
          could potentially be used to communicate with multiple contacts
          (such as streamed media calls defined by their members, or ad-hoc
          chatrooms like MSN switchboards) must have TargetHandleType set
          to Handle_Type_None and TargetHandle set to 0.</p>

        <p>Unlike in the telepathy-spec 0.16 API, there is no particular
          uniqueness guarantee - there can be many channels with the same
          (channel type, handle type, handle) tuple. This is necessary
          to support conversation threads in XMPP and SIP, for example.</p>

        <p>If this is present in a channel request, it must be nonzero,
          <tp:member-ref>TargetHandleType</tp:member-ref>
          MUST be present and not Handle_Type_None, and
          <tp:member-ref>TargetID</tp:member-ref> MUST NOT be
          present.</p>

        <p>The channel that satisfies the request MUST either:</p>

        <ul>
          <li>have the specified TargetHandle property; or</li>
          <li>have <tp:member-ref>TargetHandleType</tp:member-ref> =
            Handle_Type_None, TargetHandle = 0, and be configured such that
            it could communicate with the specified handle in some other way
            (e.g. have the requested contact handle in its Group
            interface)</li>
        </ul>
      </tp:docstring>
    </property>

    <property access="read" name="TargetID" tp:name-for-bindings="Target_ID" type="s">
      <tp:added version="0.17.9"/>

      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The string that would result from inspecting the
          <tp:member-ref>TargetHandle</tp:member-ref>
          property (i.e. the identifier in the IM protocol of the contact,
          room, etc. with which this channel communicates), or the empty
          string if the TargetHandle is 0.</p>

        <tp:rationale>
          <p>The presence of this property avoids the following race
            condition:</p>

          <ul>
            <li>New channel C is signalled with target handle T</li>
            <li>Client calls <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection">InspectHandles</tp:dbus-ref>(CONTACT,
              [T])</li>
            <li>Channel C closes, removing the last reference to handle T</li>
            <li><tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection">InspectHandles</tp:dbus-ref>(CONTACT,
              [T]) returns an error</li>
          </ul>
        </tp:rationale>

        <p>If this is present in a channel request,
          <tp:member-ref>TargetHandleType</tp:member-ref>
          MUST be present and not Handle_Type_None, and
          <tp:member-ref>TargetHandle</tp:member-ref> MUST NOT be
          present. The request MUST fail with error InvalidHandle, without
          side-effects, if the requested TargetID would not be accepted by
          <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection">RequestHandles</tp:dbus-ref>.</p>

        <p>The returned channel must be related to the handle corresponding
          to the given identifier, in the same way as if TargetHandle
          had been part of the request instead.</p>

        <tp:rationale>
          <p>Requesting channels with a string identifier saves a round-trip
            (the call to RequestHandles). It also allows the channel
            dispatcher to accept a channel request for an account that is not
            yet connected (and thus has no valid handles), bring the account
            online, and pass on the same parameters to the new connection's
            CreateChannel method.</p>
        </tp:rationale>
      </tp:docstring>
    </property>

    <property access="read" name="TargetHandleType" tp:name-for-bindings="Target_Handle_Type" tp:type="Handle_Type" type="u">
      <tp:added version="0.17.7"/>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The type of <tp:member-ref>TargetHandle</tp:member-ref>.</p>

        <p>If this is omitted from a channel request, connection managers
          SHOULD treat this as equivalent to Handle_Type_None.</p>

        <p>If this is omitted or is Handle_Type_None,
          <tp:member-ref>TargetHandle</tp:member-ref> and
          <tp:member-ref>TargetID</tp:member-ref> MUST be omitted from the
          request.</p>
      </tp:docstring>
    </property>

    <method name="Close" tp:name-for-bindings="Close">
      <tp:docstring>
        Request that the channel be closed. This is not the case until
        the <tp:member-ref>Closed</tp:member-ref> signal has been emitted, and
        depending on the connection
        manager this may simply remove you from the channel on the server,
        rather than causing it to stop existing entirely. Some channels
        such as contact list channels may not be closed.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotImplemented">
          <tp:docstring>
            This channel may never be closed, e.g. a contact list
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable">
          <tp:docstring>
            This channel is not currently in a state where it can be closed,
            e.g. a non-empty user-defined contact group
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <signal name="Closed" tp:name-for-bindings="Closed">
      <tp:docstring>
        Emitted when the channel has been closed. Method calls on the
        channel are no longer valid after this signal has been emitted,
        and the connection manager may then remove the object from the bus
        at any point.
      </tp:docstring>
    </signal>

    <method name="GetChannelType" tp:name-for-bindings="Get_Channel_Type">
      <tp:deprecated version="0.17.7">Use the ChannelType
        property if possible.</tp:deprecated>
      <arg direction="out" name="Channel_Type" tp:type="DBus_Interface" type="s">
        <tp:docstring>The interface name</tp:docstring>
      </arg>
      <tp:docstring>
        Returns the interface name for the type of this channel.  Clients
        SHOULD use the <tp:member-ref>ChannelType</tp:member-ref> property
        instead, falling back to this method only if necessary.

        <tp:rationale>
          The GetAll method lets clients retrieve all properties in one
          round-trip.
        </tp:rationale>
      </tp:docstring>
    </method>

    <method name="GetHandle" tp:name-for-bindings="Get_Handle">
      <tp:deprecated version="0.17.7">Use the TargetHandleType
        and TargetHandle properties if possible.</tp:deprecated>
      <arg direction="out" name="Target_Handle_Type" tp:type="Handle_Type" type="u">
        <tp:docstring>
          The same as TargetHandleType.
        </tp:docstring>
      </arg>
      <arg direction="out" name="Target_Handle" tp:type="Handle" type="u">
        <tp:docstring>
          The same as TargetHandle.
        </tp:docstring>
      </arg>
      <tp:docstring>
        Returns the handle type and number if this channel represents a
        communication with a particular contact, room or server-stored list, or
        zero if it is transient and defined only by its contents. Clients
        SHOULD use the <tp:member-ref>TargetHandle</tp:member-ref> and
        <tp:member-ref>TargetHandleType</tp:member-ref> properties instead,
        falling back to this method only if necessary.

        <tp:rationale>
          The GetAll method lets clients retrieve all properties in one
          round-trip.
        </tp:rationale>
      </tp:docstring>
    </method>

    <method name="GetInterfaces" tp:name-for-bindings="Get_Interfaces">
      <tp:deprecated version="0.17.7">Use the Interfaces
        property if possible.</tp:deprecated>
      <arg direction="out" name="Interfaces" tp:type="DBus_Interface[]" type="as">
        <tp:docstring>
          An array of the D-Bus interface names
        </tp:docstring>
      </arg>
      <tp:docstring>
        Get the optional interfaces implemented by the channel.
        Clients SHOULD use the <tp:member-ref>Interfaces</tp:member-ref>
        property instead, falling back to this method only if necessary.

        <tp:rationale>
          The GetAll method lets clients retrieve all properties in one
          round-trip.
        </tp:rationale>
      </tp:docstring>
    </method>

    <property access="read" name="Requested" tp:name-for-bindings="Requested" type="b">
      <tp:added version="0.17.13">(as stable API)</tp:added>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>True if this channel was created in response to a local request,
          such as a call to
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection.RequestChannel</tp:dbus-ref>
          or
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection.Interface.Requests.CreateChannel</tp:dbus-ref>.</p>

        <tp:rationale>
          <p>The idea of this property is to distinguish between &quot;incoming&quot;
            and &quot;outgoing&quot; channels, in a way that doesn't break down when
            considering special cases like contact lists that are automatically
            created on connection to the server, or chatrooms that an
            IRC proxy/bouncer like irssi-proxy or bip was already in.</p>

          <p>The reason we want to make that distinction is that UIs for
            things that the user explicitly requested should start up
            automatically, whereas for incoming messages and VoIP calls we
            should first ask the user whether they want to open the messaging
            UI or accept the call.</p>
        </tp:rationale>

        <p>If the channel was not explicitly requested (even if it was
          created as a side-effect of a call to one of those functions,
          e.g. because joining a Tube in a MUC context on XMPP implies
          joining that MUC), then this property is false.</p>

        <p>For compatibility with older connection managers, clients SHOULD
          assume that this property is true if they see a channel announced
          by the
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection.NewChannel</tp:dbus-ref>
          signal with the suppress_handler parameter set to true.</p>

        <tp:rationale>
          <p>In a correct connection manager, the only way to get such a
            channel is to request it.</p>
        </tp:rationale>

        <p>Clients MAY additionally assume that this property is false
          if they see a channel announced by the NewChannel signal with the
          suppress_handler parameter set to false.</p>

        <tp:rationale>
          <p>This is more controversial, since it's possible to get that
            parameter set to false by requesting a channel. However, there's
            no good reason to do so, and we've deprecated this practice.</p>

          <p>In the particular case of the channel dispatcher, the only
            side-effect of wrongly thinking a channel is unrequested
            is likely to be that the user has to confirm that they want to
            use it, so it seems fairly harmless to assume in the channel
            dispatcher that channels with suppress_handler false are
            indeed unrequested.</p>
        </tp:rationale>

        <p>It does not make sense for this property to be in channel
          requests—it will always be true for channels returned by
          CreateChannel, and callers of EnsureChannel cannot control whether an
          existing channel was originally requested locally—so it MUST NOT
          be accepted.</p>
      </tp:docstring>
    </property>

    <property access="read" name="InitiatorHandle" tp:name-for-bindings="Initiator_Handle" tp:type="Contact_Handle" type="u">
      <tp:added version="0.17.13">(as stable API)</tp:added>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The contact who initiated the channel. For channels requested by the
          local user, this MUST be the value of
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection.SelfHandle</tp:dbus-ref>
          at the time the channel was created (i.e. not a channel-specific
          handle).</p>

        <tp:rationale>
          <p>On some protocols, the SelfHandle may change (as signalled by
            <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection.SelfHandleChanged</tp:dbus-ref>),
            but this property is immutable. Hence, locally-requested channels'
            InitiatorHandle and InitiatorID may not match the current
            SelfHandle; <tp:member-ref>Requested</tp:member-ref> can be used to
            determine whether the channel was created locally.</p>
        </tp:rationale>

        <p>For channels requested by a remote user, this MUST be their handle.
          If unavailable or not applicable, this MUST be 0 (for instance,
          contact lists are not really initiated by anyone in particular, and
          it's easy to imagine a protocol where chatroom invitations can be
          anonymous).</p>

        <p>For channels with the <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Interface">Group</tp:dbus-ref>
          interface, this SHOULD be the same
          contact who is signalled as the &quot;Actor&quot; causing the self-handle
          to be placed in the local-pending set.</p>

        <p>This SHOULD NOT be a channel-specific handle, if possible.</p>

        <p>It does not make sense for this property to be in channel
          requests - the initiator will always be the local user - so it
          MUST NOT be accepted.</p>
      </tp:docstring>
    </property>

    <property access="read" name="InitiatorID" tp:name-for-bindings="Initiator_ID" type="s">
      <tp:added version="0.17.13">(as stable API)</tp:added>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The string that would result from inspecting the
          <tp:member-ref>InitiatorHandle</tp:member-ref>
          property (i.e. the initiator's identifier in the IM protocol).</p>

        <tp:rationale>
          <p>The presence of this property avoids the following race
            condition:</p>

          <ul>
            <li>New StreamedMedia channel C is signalled with initiator
              handle I</li>
            <li>Client calls <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection">InspectHandles</tp:dbus-ref>(CONTACT,
              [I])</li>
            <li>Channel C closes, removing the last reference to handle I</li>
            <li><tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection">InspectHandles</tp:dbus-ref>(CONTACT,
              [I]) returns an error</li>
            <li>Client can indicate that a call was missed, but not who
              called!</li>
          </ul>
        </tp:rationale>

        <p>It does not make sense for this property to be in channel
          requests - the initiator will always be the local user - so it
          MUST NOT be accepted.</p>
      </tp:docstring>
    </property>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>All communication in the Telepathy framework is carried out via channel
    objects which are created and managed by connections. This interface must
    be implemented by all channel objects, along with one single channel type,
    such as <tp:dbus-ref namespace="org.freedesktop.Telepathy">Channel.Type.ContactList</tp:dbus-ref>
    which represents a list of people (such as a buddy list) or a <tp:dbus-ref namespace="org.freedesktop.Telepathy">Channel.Type.Text</tp:dbus-ref> which
    represents a channel over which textual messages are sent and received.</p>

    <p>Each Channel's object path MUST start with the object path of
      its associated <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection</tp:dbus-ref>, followed
      by '/'. There MAY be any number of additional object-path components,
      which clients MUST NOT attempt to parse.</p>

    <tp:rationale>
      <p>This ensures that Channel object paths are unique, even between
        Connections and CMs, because Connection object paths are
        guaranteed-unique via their link to the well-known bus name.</p>

      <p>If all connection managers in use are known to comply with at least
        spec version 0.17.10, then the Connection's object path can
        even be determined from the Channel's without any additional
        information, by taking the first 7 components.</p>
    </tp:rationale>

    <p>Each channel may have an immutable handle associated with it, which
      may be any handle type, such as a contact, room or list handle,
      indicating that the channel is for communicating with that handle.</p>

    <p>If a channel does not have a handle (an &quot;anonymous channel&quot; with
      Target_Handle = 0 and Target_Handle_Type = Handle_Type_None), it
      means that the channel is defined by some other terms, such as it
      may be a transient group defined only by its members as visible
      through the <tp:dbus-ref namespace="org.freedesktop.Telepathy">Channel.Interface.Group</tp:dbus-ref>
      interface.</p>

    <p>Other optional interfaces can be implemented to indicate other available
      functionality, such as <tp:dbus-ref namespace="org.freedesktop.Telepathy">Channel.Interface.Group</tp:dbus-ref>
      if the channel contains a number of contacts, <tp:dbus-ref namespace="org.freedesktop.Telepathy">Channel.Interface.Password</tp:dbus-ref>
      to indicate that a channel may have a password set to require entry, and
      <tp:dbus-ref namespace="org.freedesktop.Telepathy">Properties</tp:dbus-ref> for
      extra data about channels which represent chat rooms or voice calls. The
      interfaces implemented may not vary after the channel's creation has been
      signalled to the bus (with the connection's <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection">NewChannel</tp:dbus-ref>
      signal).</p>

    <p>Specific connection manager implementations may implement channel types and
    interfaces which are not contained within this specification in order to
    support further functionality. To aid interoperability between client and
    connection manager implementations, the interfaces specified here should be
    used wherever applicable, and new interfaces made protocol-independent
    wherever possible. Because of the potential for 3rd party interfaces adding
    methods or signals with conflicting names, the D-Bus interface names should
    always be used to invoke methods and bind signals.</p>
    </tp:docstring>

    <tp:changed version="0.17.7">Previously we guaranteed that, for
      any handle type other than Handle_Type_None, and for any channel type
      and any handle, there would be no more than one channel with that
      combination of channel type, handle type and handle. This guarantee
      has now been removed in order to accommodate features like message
      threads.
    </tp:changed>

    <tp:changed version="0.17.10">Previously we did not explicitly
      guarantee that Channels' object paths had the Connection's object path
      as a prefix.
    </tp:changed>
  </interface>
</node>

<node name="/Channel_Type_Contact_List" xml:base="../spec/Channel_Type_Contact_List.xml">
  <tp:copyright> Copyright (C) 2005, 2006 Collabora Limited </tp:copyright>
  <tp:copyright> Copyright (C) 2005, 2006 Nokia Corporation </tp:copyright>
  <tp:copyright> Copyright (C) 2006 INdT </tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Channel.Type.ContactList">
    <tp:requires interface="org.freedesktop.Telepathy.Channel"/>
    <tp:requires interface="org.freedesktop.Telepathy.Channel.Interface.Group"/>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>A channel type for representing a list of people on the server which is
    not used for communication. This is intended for use with the interface
    <tp:dbus-ref namespace="org.freedesktop.Telepathy">Channel.Interface.Group</tp:dbus-ref>
    for managing buddy lists and privacy lists
    on the server. This channel type has no methods because all of the
    functionality it represents is available via the group interface.</p>

    <p>There are currently two types of contact list:
    HANDLE_TYPE_LIST is a &quot;magic&quot; server-defined list, and
    HANDLE_TYPE_GROUP is a user-defined contact group.</p>

    <p>For server-defined lists like the subscribe list, singleton instances
    of this channel type should be created by the connection manager at
    connection time if the list exists on the server, or may be requested
    by using the appropriate handle.  These handles can be obtained using
    <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection">RequestHandles</tp:dbus-ref>
    with a <tp:type>Handle_Type</tp:type> of HANDLE_TYPE_LIST and one of the
    following identifiers:</p>

    <ul>
      <li>subscribe - the group of contacts for whom you receive presence</li>
      <li>publish - the group of contacts who may receive your presence</li>
      <li>hide - a group of contacts who are on the publish list but are temporarily disallowed from receiving your presence</li>
      <li>allow - a group of contacts who may send you messages</li>
      <li>deny - a group of contacts who may not send you messages</li>
      <li>stored - on protocols where the user's contacts are stored, this
      contact list contains all stored contacts regardless of subscription
      status.</li>
    </ul>

    <p>A contact can be in several server-defined lists. All lists are optional
    to implement. If <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection">RequestHandles</tp:dbus-ref>
    or <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection">RequestChannel</tp:dbus-ref>
    for a particular contact list raises an error, this indicates that the
    connection manager makes no particular statement about the list's contents;
    clients MUST NOT consider this to be fatal.</p>

    <p>If a client wants to list all of a user's contacts, it is appropriate to
    use the union of the subscribe, publish and stored lists, including the
    local and remote pending members.</p>

    <p>For example in XMPP, contacts who have the subscription type &quot;none&quot;,
    &quot;from&quot;, &quot;to&quot; and &quot;both&quot; can be respectively in the lists:</p>

    <ul>
      <li>&quot;none&quot;: stored</li>
      <li>&quot;from&quot;: stored and publish</li>
      <li>&quot;to&quot;: stored and subscribe</li>
      <li>&quot;both&quot;: stored, publish and subscribe</li>
    </ul>

    <p>These contact list channels may not be closed.</p>

    <p>For user-defined contact groups, instances of this channel type should
    be created by the connection manager at connection time for each group
    that exists on the server. New, empty groups can be created by calling
    <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection">RequestHandles</tp:dbus-ref>
    with a <tp:type>Handle_Type</tp:type> of HANDLE_TYPE_GROUP and with the
    name set to the human-readable UTF-8 name of the group.</p>

    <p>User-defined groups may be deleted by calling <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel">Close</tp:dbus-ref> on the
    channel, but only if
    the group is already empty. Closing a channel to a non-empty group is
    not allowed; its members must be set to the empty set first.</p>

    <p>On some protocols (e.g. XMPP) empty groups are not represented on the
    server, so disconnecting from the server and reconnecting might cause
    empty groups to vanish.</p>
    </tp:docstring>

  </interface>
</node>
<node name="/Channel_Type_File_Transfer" xml:base="../spec/Channel_Type_File_Transfer.xml">
  <tp:copyright>
    Copyright © 2008-2009 Collabora Limited
  </tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Library General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Channel.Type.FileTransfer">
    <tp:requires interface="org.freedesktop.Telepathy.Channel"/>
    <tp:added version="0.17.18">(as stable API)</tp:added>
    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>A channel type for transferring files. The
      transmission of data between contacts is achieved by reading from
      or writing to a socket. The type of the socket (local Unix, IPv4,
      etc.) is decided on when the file transfer is offered or accepted.</p>

      <p>A socket approach is used to make the transfer less dependent on both
      client and connection manager knowing the same protocols. As an example,
      when browsing an SMB share in a file manager, one selects &quot;Send file&quot;
      and chooses a contact. Instead of passing a URL which would then require
      the connection manager to connect to the SMB share itself, the client
      passes a stream from which the connection manager reads, requiring no
      further connection to the share. It also allows connection managers to
      be more restricted in their access to the system, allowing tighter
      security policies with eg SELinux, or more flexible deployments which
      cross user or system boundaries.</p>

      <p>The Telepathy client should connect to the socket or address that
      the connection manager has set up and provided back to the clients
      through the two methods.</p>

      <ul><li>In order to send a file, one should request a FileTransfer
      channel for a contact, including at least the mandatory properties
      (<tp:member-ref>Filename</tp:member-ref>,
      <tp:member-ref>Size</tp:member-ref> and <tp:member-ref>ContentType</tp:member-ref>).
      Then, one should
      call <tp:member-ref>ProvideFile</tp:member-ref> to configure the socket that
      will be used to transfer the file.</li>

      <li>In order to receive an incoming file transfer, one should call
      <tp:member-ref>AcceptFile</tp:member-ref> and then wait until the state
      changes to Open. When the receiver wants to resume a transfer, the Offset
      argument should be should be set to a non-zero value when calling
      <tp:member-ref>AcceptFile</tp:member-ref>.</li>

    <li>Once the offset has been negotiated, the
      <tp:member-ref>InitialOffsetDefined</tp:member-ref> signal
      is emitted and the <tp:member-ref>InitialOffset</tp:member-ref> property
      is defined. The <tp:member-ref>InitialOffsetDefined</tp:member-ref>
      signal is emitted before channel becomes Open.
      The receiver MUST check the value of
      <tp:member-ref>InitialOffset</tp:member-ref> for a difference in offset
      from the requested value in AcceptFile.</li>

      <li>When the state changes to Open, Clients can start the transfer of the
      file using the offset previously announced.
      </li></ul>

      <p>If something goes wrong with the transfer,
      <tp:dbus-ref namespace="org.freedesktop.Telepathy">Channel.Close</tp:dbus-ref>
      should be called on the channel.</p>

      <p>The File channel type may be requested for handles of type
      HANDLE_TYPE_CONTACT. If the channel is requested for any other
      handle type then the behaviour is undefined.</p>

      <p>Connection managers SHOULD NOT advertise support for file transfer to
        other contacts unless it has been indicated by a call to
        <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection.Interface.ContactCapabilities">UpdateCapabilities</tp:dbus-ref>.
      </p>
      <tp:rationale>
        <p>People would send us files, and it would always fail. That would be silly.</p>
      </tp:rationale>
    </tp:docstring>

    <property access="read" name="State" tp:name-for-bindings="State" tp:type="File_Transfer_State" type="u">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The state of the file transfer as described by the
        File_Transfer_State enum.</p>
      </tp:docstring>
    </property>

    <property access="read" name="ContentType" tp:name-for-bindings="Content_Type" type="s">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The file's MIME type. This cannot change once the channel has
        been created.</p>

        <p>This property is mandatory when requesting the channel with the
        <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection.Interface.Requests.CreateChannel</tp:dbus-ref>
        method. Protocols which do not have a content-type property with file
        transfers should set this value to application/octet-stream.</p>
      </tp:docstring>
    </property>

    <property access="read" name="Filename" tp:name-for-bindings="Filename" type="s">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The name of the file on the sender's side. This is therefore given
        as a suggested filename for the receiver. This cannot change
        once the channel has been created.</p>

        <p>This property should be the basename of the file being sent. For example,
        if the sender sends the file /home/user/monkey.pdf then this property should
        be set to monkey.pdf.</p>

        <p>This property is mandatory when requesting the channel with the
        <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection.Interface.Requests.CreateChannel</tp:dbus-ref>
        method. This property cannot be empty and MUST be set to a sensible value.</p>
      </tp:docstring>
    </property>

    <property access="read" name="Size" tp:name-for-bindings="Size" type="t">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The size of the file. If this property is set, then the file
        transfer is guaranteed to be this size. This cannot change once
        the channel has been created.</p>

        <p>When you are creating a channel with this property, its value
        MUST be accurate and in bytes. However, when receiving a file, this
        property still MUST be in bytes but might not be entirely accurate
        to the byte.</p>

        <p>This property is mandatory when requesting the channel with the
        <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection.Interface.Requests.CreateChannel</tp:dbus-ref>
        method. If this information isn't provided in the protocol, connection managers MUST set it
        to UINT64_MAX.</p>
      </tp:docstring>
    </property>

    <property access="read" name="ContentHashType" tp:name-for-bindings="Content_Hash_Type" tp:type="File_Hash_Type" type="u">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The type of the <tp:member-ref>ContentHash</tp:member-ref> property.</p>

        <p>This property is optional when requesting the channel with the
        <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection.Interface.Requests.CreateChannel</tp:dbus-ref>
        method. However, if you wish to include the <tp:member-ref>ContentHash</tp:member-ref>
        property you MUST also include this property. If you omit this property from a
        <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection.Interface.Requests.CreateChannel</tp:dbus-ref>
        method call then its value will be assumed to be File_Hash_Type_None.</p>

        <p>For each supported hash type, implementations SHOULD include an entry
          in <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection.Interface.Requests">RequestableChannelClasses</tp:dbus-ref>
          with this property fixed to that hash type. If the protocol supports
          offering a file without a content hash, implementations SHOULD list
          this property in Allowed in a requestable channel class, mapping hash
          types they don't understand to None.
        </p>
      </tp:docstring>
    </property>

    <property access="read" name="ContentHash" tp:name-for-bindings="Content_Hash" type="s">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Hash of the contents of the file transfer, of type described
        in the value of the <tp:member-ref>ContentHashType</tp:member-ref>
        property.</p>

        <p>This property is optional when requesting the channel with the
        <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection.Interface.Requests.CreateChannel</tp:dbus-ref>
        method. Its value MUST correspond to the appropriate type of the
        <tp:member-ref>ContentHashType</tp:member-ref> property. If the
        ContentHashType property is not set, or set to File_Hash_Type_None,
        then this property will not even be looked at.</p>
      </tp:docstring>
    </property>

    <property access="read" name="Description" tp:name-for-bindings="Description" type="s">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Description of the file transfer. This cannot change once the
        channel has been created.</p>

        <p>This property is optional when requesting the channel with the
        <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection.Interface.Requests.CreateChannel</tp:dbus-ref>
        method. If this property was not provided by the remote party, connection managers MUST set it to
        the empty string.</p>
      </tp:docstring>
    </property>

    <property access="read" name="Date" tp:name-for-bindings="Date" tp:type="Unix_Timestamp64" type="x">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The last modification time of the file being transferred. This
        cannot change once the channel has been created</p>

        <p>This property is optional when requesting the channel with the
        <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection.Interface.Requests.CreateChannel</tp:dbus-ref>
        method.</p>
      </tp:docstring>
    </property>

    <property access="read" name="AvailableSocketTypes" tp:name-for-bindings="Available_Socket_Types" tp:type="Supported_Socket_Map" type="a{uau}">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>A mapping from address types (members of Socket_Address_Type) to
        arrays of access-control type (members of Socket_Access_Control)
        that the connection manager supports for sockets with that
        address type. For simplicity, if a CM supports offering a
        particular type of file transfer, it is assumed to support accepting
        it. Connection Managers MUST support at least Socket_Address_Type_IPv4.</p>

        <p>A typical value for a host without IPv6 support:</p>

        <pre>
          {
            Socket_Address_Type_IPv4:
              [Socket_Access_Control_Localhost, Socket_Access_Control_Port,
               Socket_Access_Control_Netmask],
            Socket_Address_Type_Unix:
              [Socket_Access_Control_Localhost, Socket_Access_Control_Credentials]
          }
        </pre>
      </tp:docstring>
    </property>

    <property access="read" name="TransferredBytes" tp:name-for-bindings="Transferred_Bytes" type="t">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The number of bytes that have been transferred at the time of
        requesting the property. This will be updated as the file transfer
        continues.</p>
      </tp:docstring>
    </property>

    <property access="read" name="InitialOffset" tp:name-for-bindings="Initial_Offset" type="t">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The offset in bytes from where the file should be sent. This MUST
        be respected by both the receiver and the sender after the state
        becomes Open, but before any data is sent or received. Until the
        <tp:member-ref>InitialOffsetDefined</tp:member-ref> signal
        is emitted, this property is undefined.</p>

        <p>Before setting the <tp:member-ref>State</tp:member-ref> property to
        Open, the connection manager MUST set the InitialOffset property,
        possibly to 0.</p>

        <p>This property MUST NOT change after the state of the transfer has
        changed to Open.</p>
      </tp:docstring>
    </property>

    <tp:enum name="File_Transfer_State" type="u">
      <tp:enumvalue suffix="None" value="0">
        <tp:docstring>
          An invalid state type used as a null value. This value MUST NOT
          appear in the State property.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Pending" value="1">
        <tp:docstring>
          The file transfer is waiting to be accepted/closed by the receiver.
          The receiver has to call <tp:member-ref>AcceptFile</tp:member-ref>,
          then wait for the state to change to Open and check the offset value.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Accepted" value="2">
        <tp:docstring>
          The receiver has accepted the transfer. The sender now has to
          call <tp:member-ref>ProvideFile</tp:member-ref> to actually start the transfer.
          The receiver should now wait for the state to change to Open
          and check the offset value.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Open" value="3">
        <tp:docstring>
          The file transfer is open for traffic.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Completed" value="4">
        <tp:docstring>
          The file transfer has been completed successfully.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Cancelled" value="5">
        <tp:docstring>
          The file transfer has been cancelled.
        </tp:docstring>
      </tp:enumvalue>
    </tp:enum>

    <tp:enum name="File_Transfer_State_Change_Reason" type="u">
      <tp:enumvalue suffix="None" value="0">
        <tp:docstring>
          No reason was specified.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Requested" value="1">
        <tp:docstring>
          The change in state was requested.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Local_Stopped" value="2">
        <tp:docstring>
          The file transfer was cancelled by the local user.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Remote_Stopped" value="3">
        <tp:docstring>
          The file transfer was cancelled by the remote user.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Local_Error" value="4">
        <tp:docstring>
          The file transfer was cancelled because of a local error.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Remote_Error" value="5">
        <tp:docstring>
          The file transfer was cancelled because of a remote error.
        </tp:docstring>
      </tp:enumvalue>
    </tp:enum>

    <tp:enum name="File_Hash_Type" type="u">
      <tp:enumvalue suffix="None" value="0">
        <tp:docstring>
          No hash.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="MD5" value="1">
        <tp:docstring>
          MD5 digest as a string of 32 ASCII hex digits.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="SHA1" value="2">
        <tp:docstring>
          SHA1 digest as a string of ASCII hex digits.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="SHA256" value="3">
        <tp:docstring>
          SHA256 digest as a string of ASCII hex digits.
        </tp:docstring>
      </tp:enumvalue>
    </tp:enum>

    <method name="AcceptFile" tp:name-for-bindings="Accept_File">
      <tp:docstring>
        Accept a file transfer that's in the Pending state. The file
        transfer's state becomes Accepted after this method is called.
        At this point the client can connect to the socket. CM MUST emit
        <tp:member-ref>InitialOffsetDefined</tp:member-ref> and change
        the state to Open before writing to the socket.
        Then <tp:member-ref>InitialOffset</tp:member-ref> should be respected in case
        its value differs from the offset that was specified as an argument
        to AcceptFile.
      </tp:docstring>
      <arg direction="in" name="Address_Type" tp:type="Socket_Address_Type" type="u">
        <tp:docstring>
          The type of address the connection manager should listen on.
        </tp:docstring>
      </arg>
      <arg direction="in" name="Access_Control" tp:type="Socket_Access_Control" type="u">
        <tp:docstring>
          The type of access control the connection manager should apply to
          the socket.
        </tp:docstring>
      </arg>
      <arg direction="in" name="Access_Control_Param" type="v">
        <tp:docstring>
          A parameter for the access control type, to be interpreted as
          specified in the documentation for the Socket_Access_Control enum.
        </tp:docstring>
      </arg>
      <arg direction="in" name="Offset" type="t">
        <tp:docstring>
          The desired offset in bytes where the file transfer should start.
          The offset is taken from the beginning of the file. Specifying an
          offset of zero will start the transfer from the beginning of the
          file. The offset that is actually given in the
          <tp:member-ref>InitialOffset</tp:member-ref> property can differ
          from this argument where the requested offset is not supported.
          (For example, some protocols do not support offsets at all so
          the InitialOffset property will always be 0.)
        </tp:docstring>
      </arg>
      <arg direction="out" name="Address" type="v">
        <tp:docstring>
          The address on which the connection manager will listen for
          connections for this file transfer.
        </tp:docstring>
      </arg>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.NotImplemented">
          <tp:docstring>
            The given address type or access-control mechanism is not supported.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument"/>
          <tp:docstring>
            Your address type, access control, access control parameter,
            offset, or a combination of all four is invalid.
          </tp:docstring>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable">
          <tp:docstring>
            The file transfer is not in the Pending state, there isn't
            or there is a local error with acquiring a socket.
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <method name="ProvideFile" tp:name-for-bindings="Provide_File">
      <tp:docstring>
        Provide the file for an outgoing file transfer which has been offered.
        Opens a socket that the client can use to provide a file to the connection manager.
        The channel MUST have been requested, and will change state
        to Open when this method is called if its state was Accepted.
      </tp:docstring>
      <arg direction="in" name="Address_Type" tp:type="Socket_Address_Type" type="u">
        <tp:docstring>
          The type of address the connection manager should listen on.
        </tp:docstring>
      </arg>
      <arg direction="in" name="Access_Control" tp:type="Socket_Access_Control" type="u">
        <tp:docstring>
          The type of access control the connection manager should apply to
          the socket.
        </tp:docstring>
      </arg>
      <arg direction="in" name="Access_Control_Param" type="v">
        <tp:docstring>
          A parameter for the access control type, to be interpreted as
          specified in the documentation for the Socket_Access_Control enum.
        </tp:docstring>
      </arg>
      <arg direction="out" name="Address" type="v">
        <tp:docstring>
          The address on which the connection manager will listen for
          connections for this file transfer.
        </tp:docstring>
      </arg>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.NotImplemented">
          <tp:docstring>
            The given address type or access-control mechanism is not supported.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument"/>
          <tp:docstring>
            Your address type, access control, access control parameter, or
            a combination of all three is invalid.
          </tp:docstring>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable">
          <tp:docstring>
            Channel is not an outgoing transfer, ProvideFile has already been called,
            or there was a local error acquiring the socket.
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <signal name="FileTransferStateChanged" tp:name-for-bindings="File_Transfer_State_Changed">
      <tp:docstring>
        Emitted when the state of a file transfer changes.
      </tp:docstring>
      <arg name="State" tp:type="File_Transfer_State" type="u">
        <tp:docstring>
          The new state of the file transfer; see the File_Transfer_State enumeration.
        </tp:docstring>
      </arg>
      <arg name="Reason" tp:type="File_Transfer_State_Change_Reason" type="u">
        <tp:docstring>
          The reason for the state change; see the File_Transfer_State_Change_Reason
          enumeration.
          The value will always be File_Transfer_State_Change_Reason_None, except
          when changing state to cancelled.
        </tp:docstring>
      </arg>
    </signal>

    <signal name="TransferredBytesChanged" tp:name-for-bindings="Transferred_Bytes_Changed">
      <tp:docstring>
        Emitted when the number of transferred bytes changes. This will not be
        signalled with every single byte change. Instead, the most frequent
        this signal will be emitted is once a second. This should be
        sufficient, and the <tp:member-ref>TransferredBytes</tp:member-ref>
        property SHOULD NOT be polled.
      </tp:docstring>
      <arg name="Count" type="t">
        <tp:docstring>
          The number of already transferred bytes.
        </tp:docstring>
      </arg>
    </signal>

    <signal name="InitialOffsetDefined" tp:name-for-bindings="Initial_Offset_Defined">
      <tp:docstring>
        Emitted when the value of the <tp:member-ref>InitialOffset</tp:member-ref>
        property has been negotiated. This signal MUST be emitted before the channel
        becomes Open and clients have to use this offset when transferring the
        file.
      </tp:docstring>
      <arg name="InitialOffset" type="t">
        <tp:docstring>
          The value of the <tp:member-ref>InitialOffset</tp:member-ref> property.
        </tp:docstring>
      </arg>
    </signal>

  </interface>

</node>
<node name="/Channel_Type_Streamed_Media" xml:base="../spec/Channel_Type_Streamed_Media.xml">
  <tp:copyright> Copyright © 2005-2009 Collabora Limited </tp:copyright>
  <tp:copyright> Copyright © 2005-2009 Nokia Corporation </tp:copyright>
  <tp:copyright> Copyright © 2006 INdT </tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Channel.Type.StreamedMedia">
    <tp:requires interface="org.freedesktop.Telepathy.Channel"/>
    <tp:requires interface="org.freedesktop.Telepathy.Channel.Interface.Group"/>

    <tp:enum array-name="Media_Stream_Type_List" name="Media_Stream_Type" type="u">
      <tp:enumvalue suffix="Audio" value="0">
        <tp:docstring>An audio stream</tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Video" value="1">
        <tp:docstring>A video stream</tp:docstring>
      </tp:enumvalue>
    </tp:enum>

    <tp:enum name="Media_Stream_State" type="u">
      <tp:enumvalue suffix="Disconnected" value="0">
        <tp:docstring>The stream is disconnected.</tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Connecting" value="1">
        <tp:docstring>The stream is trying to connect.</tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Connected" value="2">
        <tp:docstring>The stream is connected.</tp:docstring>
      </tp:enumvalue>
    </tp:enum>

    <tp:enum name="Media_Stream_Direction" type="u">
      <tp:enumvalue suffix="None" value="0">
        <tp:docstring>Media are not being sent or received</tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Send" value="1">
        <tp:docstring>Media are being sent, but not received</tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Receive" value="2">
        <tp:docstring>Media are being received, but not sent</tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Bidirectional" value="3">
        <tp:docstring>Media are being sent and received</tp:docstring>
      </tp:enumvalue>
    </tp:enum>

    <tp:flags name="Media_Stream_Pending_Send" type="u" value-prefix="Media_Stream_Pending">
      <tp:flag suffix="Local_Send" value="1">
        <tp:docstring>
            The local user has been asked to send media by the remote user.
            Call <tp:member-ref>RequestStreamDirection</tp:member-ref> to
            indicate whether or not this is acceptable.
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="Remote_Send" value="2">
        <tp:docstring>
            The remote user has been asked to send media by the local user.
            The <tp:member-ref>StreamDirectionChanged</tp:member-ref> signal
            will be emitted when the remote user accepts or rejects this
            change.
        </tp:docstring>
      </tp:flag>
    </tp:flags>

    <tp:struct array-name="Media_Stream_Info_List" name="Media_Stream_Info">
      <tp:member name="Identifier" tp:type="Stream_ID" type="u"/>
      <tp:member name="Contact" tp:type="Contact_Handle" type="u"/>
      <tp:member name="Type" tp:type="Media_Stream_Type" type="u"/>
      <tp:member name="State" tp:type="Media_Stream_State" type="u"/>
      <tp:member name="Direction" tp:type="Media_Stream_Direction" type="u"/>
      <tp:member name="Pending_Send_Flags" tp:type="Media_Stream_Pending_Send" type="u"/>
    </tp:struct>

    <tp:simple-type array-name="Stream_ID_List" name="Stream_ID" type="u">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>An unsigned integer identifying a stream within a channel.</p>
      </tp:docstring>
    </tp:simple-type>

    <method name="ListStreams" tp:name-for-bindings="List_Streams">
      <arg direction="out" name="Streams" tp:type="Media_Stream_Info[]" type="a(uuuuuu)">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          An array of structs containing:
          <ul>
          <li>the stream identifier</li>
          <li>the contact handle who the stream is with (or 0 if the stream
            represents more than a single member)</li>
          <li>the type of the stream</li>
          <li>the current stream state</li>
          <li>the current direction of the stream</li>
          <li>the current pending send flags</li>
          </ul>
        </tp:docstring>
      </arg>
      <tp:docstring>
        Returns an array of structs representing the streams currently active
        within this channel. Each stream is identified by an unsigned integer
        which is unique for each stream within the channel.
      </tp:docstring>
    </method>

    <method name="RemoveStreams" tp:name-for-bindings="Remove_Streams">
      <arg direction="in" name="Streams" tp:type="Stream_ID[]" type="au">
        <tp:docstring>
          An array of stream identifiers (as defined in
          <tp:member-ref>ListStreams</tp:member-ref>)
        </tp:docstring>
      </arg>

      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Request that the given streams are removed. If all streams are
          removed, the channel MAY close.</p>

        <p>Clients SHOULD NOT attempt to terminate calls by removing all the
          streams; instead, clients SHOULD terminate calls by removing the
          <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Interface">Group.SelfHandle</tp:dbus-ref>
          from the channel, using either
          <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Interface.Group">RemoveMembers</tp:dbus-ref>
          or
          <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Interface.Group">RemoveMembersWithReason</tp:dbus-ref>.
          </p>
      </tp:docstring>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument">
          A stream identifier is unknown
        </tp:error>
      </tp:possible-errors>
    </method>

    <method name="RequestStreamDirection" tp:name-for-bindings="Request_Stream_Direction">
      <arg direction="in" name="Stream_ID" type="u">
        <tp:docstring>
          The stream identifier (as defined in
          <tp:member-ref>ListStreams</tp:member-ref>)
        </tp:docstring>
      </arg>
      <arg direction="in" name="Stream_Direction" tp:type="Media_Stream_Direction" type="u">
        <tp:docstring>
          The desired stream direction (a value of MediaStreamDirection)
        </tp:docstring>
      </arg>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Request a change in the direction of an existing stream. In particular,
        this might be useful to stop sending media of a particular type,
        or inform the peer that you are no longer using media that is being
        sent to you.</p>

        <p>Depending on the protocol, streams which are no longer sending in
        either direction should be removed and a
        <tp:member-ref>StreamRemoved</tp:member-ref> signal emitted.
        Some direction changes can be enforced locally (for example,
        BIDIRECTIONAL -&gt; RECEIVE can be achieved by merely stopping sending),
        others may not be possible on some protocols, and some need agreement
        from the remote end. In this case, the MEDIA_STREAM_PENDING_REMOTE_SEND
        flag will be set in the
        <tp:member-ref>StreamDirectionChanged</tp:member-ref> signal, and the
        signal
        emitted again without the flag to indicate the resulting direction when
        the remote end has accepted or rejected the change.</p>
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument">
          A stream identifier is unknown
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable">
          The requested direction is not available on this stream
        </tp:error>
      </tp:possible-errors>
    </method>

    <method name="RequestStreams" tp:name-for-bindings="Request_Streams">
      <arg direction="in" name="Contact_Handle" tp:type="Contact_Handle" type="u">
        <tp:docstring>
          A contact handle with whom to establish the streams
        </tp:docstring>
      </arg>
      <arg direction="in" name="Types" tp:type="Media_Stream_Type[]" type="au">
        <tp:docstring>
          An array of stream types (values of MediaStreamType)
        </tp:docstring>
      </arg>
      <arg direction="out" name="Streams" tp:type="Media_Stream_Info[]" type="a(uuuuuu)">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          An array of structs (in the same order as the given stream types)
          containing:
          <ul>
            <li>the stream identifier</li>
            <li>the contact handle who the stream is with (or 0 if the stream
              represents more than a single member)</li>
            <li>the type of the stream</li>
            <li>the current stream state</li>
            <li>the current direction of the stream</li>
            <li>the current pending send flags</li>
          </ul>
        </tp:docstring>
      </arg>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Request that streams be established to exchange the given types of
        media with the given member. In general this will try and establish a
        bidirectional stream, but on some protocols it may not be possible to
        indicate to the peer that you would like to receive media, so a
        send-only stream will be created initially. In the cases where the
        stream requires remote agreement (eg you wish to receive media from
        them), the <tp:member-ref>StreamDirectionChanged</tp:member-ref> signal
        will be emitted with the
        MEDIA_STREAM_PENDING_REMOTE_SEND flag set, and the signal emitted again
        with the flag cleared when the remote end has replied.</p>

        <p>If streams of the requested types already exist, calling this
          method results in the creation of additional streams. Accordingly,
          clients wishing to have exactly one audio stream or exactly one
          video stream SHOULD check for the current streams using
          <tp:member-ref>ListStreams</tp:member-ref> before calling this
          method.</p>
      </tp:docstring>
      <tp:changed version="0.17.2">
        <p>It is valid to use a handle which is neither
          a current nor pending member in this channel's <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Interface">Group</tp:dbus-ref>
          interface. If
          so, that handle will be added to the remote-pending set only when
          an attempt has actually been made to contact them. For further
          call-state notification, use the <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Interface">CallState</tp:dbus-ref>
          interface, if
          supported. This usage was not allowed in spec versions below
          0.17.2.</p>
      </tp:changed>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument">
          <tp:docstring>
            A stream type given is invalid.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotImplemented">
          <tp:docstring>
            A stream type given is not implemented by the connection manager.
            Since 0.17.23, connection managers SHOULD raise this error
            in preference to InvalidArgument.
            <tp:rationale>
              Connection managers can't know whether an unknown number
              is a valid stream type that was introduced in a later spec
              version.
            </tp:rationale>
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable">
          <tp:docstring>
            That contact's client does not implement one of the given stream
            types. For this method, clients SHOULD consider this error and
            NotCapable to be equivalent.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotCapable">
          <tp:docstring>
            That contact's client does not implement one of the given stream
            types. Since 0.17.23, connection managers SHOULD raise
            this in preference to NotAvailable.
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <signal name="StreamAdded" tp:name-for-bindings="Stream_Added">
      <arg name="Stream_ID" type="u">
        <tp:docstring>
          The stream identifier (as defined in
          <tp:member-ref>ListStreams</tp:member-ref>)
        </tp:docstring>
      </arg>
      <arg name="Contact_Handle" tp:type="Contact_Handle" type="u">
        <tp:docstring>
          The contact handle who the stream is with (or 0 if it
          represents more than a single member)
        </tp:docstring>
      </arg>
      <arg name="Stream_Type" tp:type="Media_Stream_Type" type="u">
        <tp:docstring>
          The stream type (a value from MediaStreamType)
        </tp:docstring>
      </arg>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Emitted when a new stream has been added to this channel.
          Clients SHOULD assume that the stream's
          <tp:type>Media_Stream_State</tp:type> is initially Disconnected.</p>

        <p>If a connection manager needs to represent the addition of a stream
          whose state is already Connecting or Connected, it MUST do this
          by emitting StreamAdded, closely followed by
          <tp:member-ref>StreamStateChanged</tp:member-ref> indicating a
          change to the appropriate state.</p>

        <tp:rationale>
          <p>Historically, it was not clear from the StreamAdded signal what
            the state of the stream was. telepathy-spec 0.17.22
            clarified this.</p>
        </tp:rationale>

        <p>Similarly, clients SHOULD assume that the initial
          <tp:type>Media_Stream_Direction</tp:type> of a newly added stream
          is Receive, and that the initial
          <tp:type>Media_Stream_Pending_Send</tp:type> is
          Pending_Local_Send.</p>

        <p>If a connection manager needs to represent the addition of a stream
          whose direction or pending-send differs from those initial values,
          it MUST do so by emitting StreamAdded, closely followed by
          <tp:member-ref>StreamDirectionChanged</tp:member-ref> indicating a
          change to the appropriate direction and pending-send state.</p>

        <tp:rationale>
          <p>StreamAdded doesn't itself indicate the stream's direction; this
            is unfortunate, but is preserved for compatibility.</p>

          <p>This is the appropriate direction for streams added by a remote
            contact on existing connection managers, and does not violate
            user privacy by automatically sending audio or video (audio streams
            start off muted, video streams start off not sending). For
            streams added by the local user using the client receiving the
            signal, the true direction can also be determined from the return
            value of the <tp:member-ref>RequestStreams</tp:member-ref>
            method.</p>

          <p>Existing clients typically operate by maintaining a separate
            idea of the directions that they would like the streams to have,
            and enforcing these intended directions by calling
            <tp:member-ref>RequestStreamDirection</tp:member-ref> whenever
            needed.</p>
        </tp:rationale>
      </tp:docstring>
    </signal>

    <signal name="StreamDirectionChanged" tp:name-for-bindings="Stream_Direction_Changed">
      <arg name="Stream_ID" type="u">
        <tp:docstring>
        The stream identifier (as defined in <tp:member-ref>ListStreams</tp:member-ref>)
        </tp:docstring>
      </arg>
      <arg name="Stream_Direction" tp:type="Media_Stream_Direction" type="u">
        <tp:docstring>
        The new stream direction (as defined in ListStreams)
        </tp:docstring>
      </arg>
      <arg name="Pending_Flags" tp:type="Media_Stream_Pending_Send" type="u">
        <tp:docstring>
        The new pending send flags (as defined in ListStreams)
        </tp:docstring>
      </arg>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Emitted when the direction or pending flags of a stream are
          changed.</p>

        <p>If the MEDIA_STREAM_PENDING_LOCAL_SEND flag is set, the remote user
          has requested that we begin sending on this stream.
          <tp:member-ref>RequestStreamDirection</tp:member-ref>
          should be called to indicate whether or not this change is
          acceptable.</p>

        <tp:rationale>
          <p>This allows for a MSN-style user interface, &quot;Fred has asked you
            to enable your webcam. (Accept | Reject)&quot;, if desired.</p>
        </tp:rationale>
      </tp:docstring>
    </signal>

    <signal name="StreamError" tp:name-for-bindings="Stream_Error">
      <arg name="Stream_ID" type="u">
        <tp:docstring>
        The stream identifier (as defined in
        <tp:member-ref>ListStreams</tp:member-ref>)
        </tp:docstring>
      </arg>
      <arg name="Error_Code" tp:type="Media_Stream_Error" type="u">
        <tp:docstring>
          A stream error number, one of the values of MediaStreamError
        </tp:docstring>
      </arg>
      <arg name="Message" type="s">
        <tp:docstring>
          A string describing the error (for debugging purposes only)
        </tp:docstring>
      </arg>
      <tp:docstring>
        Emitted when a stream encounters an error.
      </tp:docstring>
    </signal>

    <signal name="StreamRemoved" tp:name-for-bindings="Stream_Removed">
      <arg name="Stream_ID" type="u">
        <tp:docstring>
        stream_id - the stream identifier (as defined in
        <tp:member-ref>ListStreams</tp:member-ref>)
        </tp:docstring>
      </arg>
      <tp:docstring>
        Emitted when a stream has been removed from this channel.
      </tp:docstring>
    </signal>

    <signal name="StreamStateChanged" tp:name-for-bindings="Stream_State_Changed">
      <arg name="Stream_ID" type="u">
        <tp:docstring>
          The stream identifier (as defined in
          <tp:member-ref>ListStreams</tp:member-ref>)
        </tp:docstring>
      </arg>
      <arg name="Stream_State" tp:type="Media_Stream_State" type="u">
        <tp:docstring>
          The new stream state (as defined in ListStreams)
        </tp:docstring>
      </arg>
      <tp:docstring>
        Emitted when a member's stream's state changes.
      </tp:docstring>
    </signal>

    <property access="read" name="InitialAudio" tp:name-for-bindings="Initial_Audio" type="b">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>If set to true in a channel request that will create a new channel,
          the connection manager should immediately attempt to establish an
          audio stream to the remote contact, making it unnecessary for the
          client to call <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type.StreamedMedia">RequestStreams</tp:dbus-ref>.</p>

        <p>If this property, or InitialVideo, is passed to EnsureChannel
          (as opposed to CreateChannel), the connection manager SHOULD ignore
          these properties when checking whether it can return an existing
          channel as suitable; these properties only become significant when
          the connection manager has decided to create a new channel.</p>

        <p>If true on a requested channel, this indicates that the audio
          stream has already been requested and the client does not need to
          call RequestStreams, although it MAY still do so.</p>

        <p>If true on an unrequested (incoming) channel, this indicates that
          the remote contact initially requested an audio stream; this does
          not imply that that audio stream is still active (as indicated by
          <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type.StreamedMedia">ListStreams</tp:dbus-ref>).</p>

        <p>This property is immutable (cannot change), and therefore SHOULD
          appear wherever immutable properties are reported, e.g. <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection.Interface.Requests">NewChannels</tp:dbus-ref>
          signals.</p>

        <tp:rationale><p>This reduces D-Bus round trips.</p></tp:rationale>

        <p>Connection managers capable of signalling audio calls to contacts
          SHOULD include a channel class in <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection.Interface.Requests">RequestableChannelClasses</tp:dbus-ref>
          with <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel">ChannelType</tp:dbus-ref>
          = <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type">StreamedMedia</tp:dbus-ref>
          and <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel">TargetHandleType</tp:dbus-ref>
          = Contact in the fixed properties dictionary, and InitialAudio
          (and also InitialVideo, if applicable) in the allowed properties
          list. Clients wishing to discover whether a connection manager
          can signal audio and/or video calls SHOULD use this information.</p>

        <tp:rationale>
          <p>Not all protocols support signalling video calls, and it would be
            possible (although unlikely) to have a protocol where only video,
            and not audio, could be signalled.</p>
        </tp:rationale>

        <p>Connection managers that support the <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection.Interface">ContactCapabilities</tp:dbus-ref>
          interface SHOULD represent the capabilities of receiving audio
          and/or video calls by including a channel class in
          a contact's capabilities with ChannelType = StreamedMedia
          in the fixed properties dictionary, and InitialAudio and/or
          InitialVideo in the allowed properties list. Clients wishing to
          discover whether a particular contact is likely to be able to
          receive audio and/or video calls SHOULD use this information.</p>

        <tp:rationale>
          <p>Not all clients support video calls, and it would also be
            possible (although unlikely) to have a client which could only
            stream video, not audio.</p>
        </tp:rationale>

        <p>Clients that are willing to receive audio and/or video calls
          SHOULD include the following among their channel classes if
          calling <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection.Interface.ContactCapabilities">UpdateCapabilities</tp:dbus-ref>
          (clients of a <tp:dbus-ref namespace="org.freedesktop.Telepathy">ChannelDispatcher</tp:dbus-ref>
          SHOULD instead arrange for the ChannelDispatcher to do this,
          by including the filters in their <tp:dbus-ref namespace="org.freedesktop.Telepathy.Client.Handler">HandlerChannelFilter</tp:dbus-ref>
          properties):</p>

        <ul>
          <li>{ ChannelType = StreamedMedia }</li>
          <li>{ ChannelType = StreamedMedia, InitialAudio = true }
            if receiving calls with audio is supported</li>
          <li>{ ChannelType = StreamedMedia, InitialVideo = true }
            if receiving calls with video is supported</li>
        </ul>

        <tp:rationale>
          <p>Connection managers for protocols with capability discovery,
            like XMPP, need this information to advertise the appropriate
            capabilities for their protocol.</p>
        </tp:rationale>
      </tp:docstring>
    </property>

    <property access="read" name="InitialVideo" tp:name-for-bindings="Initial_Video" type="b">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The same as <tp:member-ref>InitialAudio</tp:member-ref>, but for
          a video stream. This property is immutable (cannot change).</p>

        <p>In particular, note that if this property is false, this does not
          imply that an active video stream has not been added, only that no
          video stream was active at the time the channel appeared.</p>

        <p>This property is the correct way to discover whether connection
          managers, contacts etc. support video calls; it appears in
          capabilities structures in the same way as InitialAudio.</p>
      </tp:docstring>
    </property>

    <property access="read" name="ImmutableStreams" tp:name-for-bindings="Immutable_Streams" type="b">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>If <tt>True</tt>, once streams have been requested for this channel
          (either by setting <tp:member-ref>InitialAudio</tp:member-ref> or
          <tp:member-ref>InitialVideo</tp:member-ref> when the channel is
          requested, or by calling
          <tp:member-ref>RequestStreams</tp:member-ref> on a channel with no
          streams), a stream of a different content type cannot be added;
          subsequent calls to <tp:member-ref>RequestStreams</tp:member-ref>
          that attempt to do so will fail.</p>

        <p>If this property is missing, clients SHOULD assume that it is false,
          and thus that the channel's streams can be changed once the call has
          started.</p>

        <p>If this property is present in the &quot;allowed&quot; set in all of the
          StreamedMedia entries in a contact's capabilities, then user
          interfaces MAY choose to show a separate &quot;call&quot; option for each
          class of call.</p>

          <tp:rationale>
            <p>For example, once an audio-only Google Talk call has started,
              it is not possible to add a video stream; both audio and video
              must be requested at the start of the call if video is desired.
              User interfaces may use this pseudo-capability as a hint to
              display separate &quot;Audio call&quot; and &quot;Video call&quot; buttons, rather
              than a single &quot;Call&quot; button with the option to add and remove
              video once the call has started for contacts without this flag.
            </p>
          </tp:rationale>

        <p>This property is immutable, and therefore SHOULD be announced
          in <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection.Interface.Requests">NewChannels</tp:dbus-ref>,
          etc.</p>
      </tp:docstring>
    </property>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>A channel that can send and receive streamed media such as audio or video.
    Provides a number of methods for listing and requesting new streams, and
    signals to indicate when streams have been added, removed and changed
    status.</p>

      <p>To make a media call to a contact, clients should call <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection.Interface.Requests">CreateChannel</tp:dbus-ref>
        with <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel">ChannelType</tp:dbus-ref>
        = <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type">StreamedMedia</tp:dbus-ref>,
        <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel">TargetHandleType</tp:dbus-ref>
        = Contact, and one of <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel">TargetHandle</tp:dbus-ref>
        or <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel">TargetID</tp:dbus-ref>
        (which should yield a channel with the local user in <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Interface.Group">Members</tp:dbus-ref>,
        and the remote contact as <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel">TargetHandle</tp:dbus-ref>
        but not in any group members list), then call
        <tp:member-ref>RequestStreams</tp:member-ref> to initiate the call (at
        which point the contact should appear in the channel's <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Interface.Group">RemotePendingMembers</tp:dbus-ref>).</p>

      <p>In the past, several other patterns have been used to place outgoing
        calls; see
        <a href="http://telepathy.freedesktop.org/wiki/Requesting%20StreamedMedia%20channels">'Requesting StreamedMedia Channels' on the Telepathy wiki</a>
        for the details.</p>

      <p>Incoming calls should be signalled as <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel">TargetHandleType</tp:dbus-ref>
        = Contact, <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel">TargetHandle</tp:dbus-ref>
        set to the remote contact, with the local user in <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Interface.Group">LocalPendingMembers</tp:dbus-ref>;
        to accept the call, <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Interface.Group">AddMembers</tp:dbus-ref>
        can be used to move the local user to the group's members.</p>

      <p>When the local user accepts an incoming call, the connection manager
        SHOULD change the direction of any streams with pending local send
        to be sending, without altering whether those streams are
        receiving.</p>

      <tp:rationale>
        <p>This matches existing practice, and means that a client
          can answer incoming calls and get an unmuted microphone/activated
          webcam without having to take additional action to accept the
          stream directions.</p>

        <p>It does, however, introduce a race condition: a client believing
          that it is accepting an audio-only call by calling AddMembers
          can inadvertantly accept an audio + video call (and hence activate
          sending from a webcam without the user's permission) if a video
          stream is added just before AddMembers is processed. This race
          should be removed when this specification is revised.</p>
      </tp:rationale>

    <p>In general this should be used in conjunction with the <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Interface">MediaSignalling</tp:dbus-ref>
    interface to exchange connection candidates and codec choices with
    whichever component is responsible for the streams. However, in certain
    applications where no candidate exchange is necessary (eg the streams are
    handled by specialised hardware which is controlled directly by the
    connection manager), the signalling interface can be omitted and this
    channel type used simply to control the streams.</p>
    </tp:docstring>

    <tp:flags name="Channel_Media_Capabilities" type="u" value-prefix="Channel_Media_Capability">
      <tp:docstring>
        The channel-type-specific capability flags used for
        Channel.Type.StreamedMedia in the <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection.Interface.Capabilities</tp:dbus-ref>
        interface. See the <tp:member-ref>InitialAudio</tp:member-ref>
        property for details of the mechanisms that will replace this.
      </tp:docstring>
      <tp:flag suffix="Audio" value="1">
        <tp:docstring>
          The handle is capable of using audio streams within a media channel.
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="Video" value="2">
        <tp:docstring>
          The handle is capable of using video streams within a media channel.
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="NAT_Traversal_STUN" value="4">
        <tp:docstring>
          The handle is capable of performing STUN to traverse NATs.
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="NAT_Traversal_GTalk_P2P" value="8">
        <tp:docstring>
          The handle is capable of establishing Google Talk peer-to-peer
          connections (as implemented in libjingle 0.3) to traverse NATs.
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="NAT_Traversal_ICE_UDP" value="16">
        <tp:docstring>
          The handle is capable of establishing ICE UDP peer-to-peer
          connections (as defined by the IETF MMUSIC working group) to traverse
          NATs.
        </tp:docstring>
      </tp:flag>

      <tp:flag suffix="Immutable_Streams" value="32">
        <tp:docstring>
          Channels whose target handle is this contact will have
          <tp:member-ref>ImmutableStreams</tp:member-ref> = <tt>True</tt>.
        </tp:docstring>
      </tp:flag>

    </tp:flags>

  </interface>
</node>
<node name="/Channel_Type_Room_List" xml:base="../spec/Channel_Type_Room_List.xml">
  <tp:copyright> Copyright © 2005-2009 Collabora Limited </tp:copyright>
  <tp:copyright> Copyright © 2005-2009 Nokia Corporation </tp:copyright>
  <tp:copyright> Copyright © 2006 INdT </tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Channel.Type.RoomList">
    <tp:requires interface="org.freedesktop.Telepathy.Channel"/>

    <tp:struct array-name="Room_Info_List" name="Room_Info">
      <tp:member name="Handle" tp:type="Room_Handle" type="u"/>
      <tp:member name="Channel_Type" tp:type="DBus_Interface" type="s"/>
      <tp:member name="Info" tp:type="String_Variant_Map" type="a{sv}"/>
    </tp:struct>

    <property access="read" name="Server" tp:name-for-bindings="Server" type="s">
      <tp:docstring>
        <p>For protocols with a concept of chatrooms on multiple servers
          with different DNS names (like XMPP), the DNS name of the server
          whose rooms are listed by this channel, e.g. &quot;conference.jabber.org&quot;.
          Otherwise, the empty string.</p>

        <p>This property cannot change during the lifetime of the channel.</p>
      </tp:docstring>
    </property>

    <method name="GetListingRooms" tp:name-for-bindings="Get_Listing_Rooms">
      <arg direction="out" name="In_Progress" type="b">
        <tp:docstring>
          A boolean indicating if room listing is in progress
        </tp:docstring>
      </arg>
      <tp:docstring>
        Check to see if there is already a room list request in progress
        on this channel.
      </tp:docstring>
    </method>

    <signal name="GotRooms" tp:name-for-bindings="Got_Rooms">
      <arg name="Rooms" tp:type="Room_Info[]" type="a(usa{sv})">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          An array of structs containing:
          <ul>
            <li>an integer room handle</li>
            <li>a string representing the D-Bus interface name of the channel type</li>
            <li>a dictionary mapping string keys to variant boxed information</li>
          </ul>
        </tp:docstring>
      </arg>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Emitted when information about rooms on the server becomes available.
        The array contains the room handle (as can be passed to the
        <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection">RequestChannel</tp:dbus-ref>
        method with HANDLE_TYPE_ROOM), the channel
        type, and a dictionary containing further information about the
        room as available. The following well-known keys and types are
        recommended for use where appropriate:</p>

        <dl>
          <dt>handle-name (s)</dt>
          <dd>The identifier of the room (as would be returned by
            <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection">InspectHandles</tp:dbus-ref>)</dd>

          <dt>name (s)</dt>
          <dd>The human-readable name of the room if different from the handle</dd>

          <dt>description (s)</dt>
          <dd>A description of the room's overall purpose</dd>

          <dt>subject (s)</dt>
          <dd>The current subject of conversation in the room</dd>

          <dt>members (u)</dt>
          <dd>The number of members in the room</dd>

          <dt>password (b)</dt>
          <dd>True if the room requires a password to enter</dd>

          <dt>invite-only (b)</dt>
          <dd>True if you cannot join the room, but must be invited</dd>
        </dl>
      </tp:docstring>
    </signal>
    <method name="ListRooms" tp:name-for-bindings="List_Rooms">
      <tp:docstring>
        Request the list of rooms from the server. The
        <tp:member-ref>ListingRooms</tp:member-ref> (True) signal should be
        emitted when this request is being processed,
        <tp:member-ref>GotRooms</tp:member-ref> when any room information is
        received, and <tp:member-ref>ListingRooms</tp:member-ref> (False) when
        the request is complete.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable"/>
        <tp:error name="org.freedesktop.Telepathy.Error.PermissionDenied"/>
      </tp:possible-errors>
    </method>
    <method name="StopListing" tp:name-for-bindings="Stop_Listing">
      <tp:docstring>
        Stop the room listing if it's in progress, but don't close the channel.
        The <tp:member-ref>ListingRooms</tp:member-ref> (False) signal should
        be emitted when the listing stops.
      </tp:docstring>
    </method>
    <signal name="ListingRooms" tp:name-for-bindings="Listing_Rooms">
      <arg name="Listing" type="b">
        <tp:docstring>A boolean indicating if room listing is in progress</tp:docstring>
      </arg>
      <tp:docstring>
        Emitted to indicate whether or not room listing request is currently
        in progress.
      </tp:docstring>
    </signal>
    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>A channel type for listing named channels available on the server. Once the
    <tp:member-ref>ListRooms</tp:member-ref> method is called, it emits signals for rooms present on the
    server, until you <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel">Close</tp:dbus-ref> this
    channel. In some cases, it may not be possible
    to stop the deluge of information from the server. This channel should be
    closed when the room information is no longer being displayed, so that the
    room handles can be freed.</p>

    <p>This channel type may be implemented as a singleton on some protocols, so
    clients should be prepared for the eventuality that they are given a
    channel that is already in the middle of listing channels. The
    <tp:member-ref>ListingRooms</tp:member-ref> signal, or
    <tp:member-ref>GetListingRooms</tp:member-ref> method, can be used to check
    this.</p>
    </tp:docstring>
  </interface>
</node>
<node name="/Channel_Type_Text" xml:base="../spec/Channel_Type_Text.xml">
  <tp:copyright> Copyright © 2005-2009 Collabora Limited </tp:copyright>
  <tp:copyright> Copyright © 2005-2009 Nokia Corporation </tp:copyright>
  <tp:copyright> Copyright © 2006 INdT </tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Channel.Type.Text">
    <tp:requires interface="org.freedesktop.Telepathy.Channel"/>

    <tp:simple-type array-name="Message_ID_List" name="Message_ID" type="u">
      <tp:docstring>
        A unique-per-channel identifier for an incoming message. These
        SHOULD be allocated in a way that minimizes collisions (in particular,
        message IDs SHOULD NOT be re-used until all of the 32-bit integer
        space has already been used).
      </tp:docstring>
    </tp:simple-type>

    <tp:struct array-name="Pending_Text_Message_List" name="Pending_Text_Message">
      <tp:docstring>A struct (message ID, timestamp in seconds since
        1970-01-01 00:00 UTC, sender's handle, message type, flags, text)
        representing a pending text message, as returned by
        <tp:member-ref>ListPendingMessages</tp:member-ref>.  The arguments of
        the <tp:member-ref>Received</tp:member-ref> signal also match this
        struct's signature.</tp:docstring>
      <tp:member name="Identifier" tp:type="Message_ID" type="u"/>
      <tp:member name="Unix_Timestamp" tp:type="Unix_Timestamp" type="u"/>
      <tp:member name="Sender" tp:type="Contact_Handle" type="u"/>
      <tp:member name="Message_Type" tp:type="Channel_Text_Message_Type" type="u"/>
      <tp:member name="Flags" tp:type="Channel_Text_Message_Flags" type="u"/>
      <tp:member name="Text" type="s"/>
    </tp:struct>

    <method name="AcknowledgePendingMessages" tp:name-for-bindings="Acknowledge_Pending_Messages">
      <arg direction="in" name="IDs" tp:type="Message_ID[]" type="au">
        <tp:docstring>
          The IDs of the messages to acknowledge
        </tp:docstring>
      </arg>
      <tp:docstring>
        Inform the channel that you have handled messages by displaying them to
        the user (or equivalent), so they can be removed from the pending queue.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument">
          <tp:docstring>
            A given message ID was not found, so no action was taken
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <method name="GetMessageTypes" tp:name-for-bindings="Get_Message_Types">
      <arg direction="out" name="Available_Types" tp:type="Channel_Text_Message_Type[]" type="au">
        <tp:docstring>
          An array of integer message types (ChannelTextMessageType)
        </tp:docstring>
      </arg>
      <tp:docstring>
        Return an array indicating which types of message may be sent on this
        channel.
      </tp:docstring>
    </method>

    <method name="ListPendingMessages" tp:name-for-bindings="List_Pending_Messages">
      <arg direction="in" name="Clear" type="b">
        <tp:docstring>
          If true, behave as if
          <tp:member-ref>AcknowledgePendingMessages</tp:member-ref> had also
          been called.
        </tp:docstring>
        <tp:deprecated version="0.17.3">
          Setting this to true is NOT RECOMMENDED for clients that
          have some sort of persistent message storage - clients SHOULD only
          acknowledge messages after they have actually stored them, which is
          impossible if this flag is true.</tp:deprecated>
      </arg>
      <arg direction="out" name="Pending_Messages" tp:type="Pending_Text_Message[]" type="a(uuuuus)">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          An array of structs representing the pending queue. Each contains:
          <ul>
            <li>a numeric identifier</li>
            <li>a Unix timestamp indicating when the message was received</li>
            <li>the contact handle for the contact who sent the message</li>
            <li>the message type, taken from ChannelTextMessageType</li>
            <li>the bitwise-OR of the message flags from ChannelTextMessageFlags</li>
            <li>the text of the message</li>
          </ul>
        </tp:docstring>
      </arg>
      <tp:docstring>
        List the messages currently in the pending queue, and optionally
        remove then all.
      </tp:docstring>
    </method>

    <signal name="LostMessage" tp:name-for-bindings="Lost_Message">
      <tp:docstring>
        This signal is emitted to indicate that an incoming message was
        not able to be stored and forwarded by the connection manager
        due to lack of memory.
      </tp:docstring>
    </signal>

    <signal name="Received" tp:name-for-bindings="Received">
      <arg name="ID" type="u">
        <tp:docstring>
          A numeric identifier for acknowledging the message
        </tp:docstring>
      </arg>
      <arg name="Timestamp" tp:type="Unix_Timestamp" type="u">
        <tp:docstring>
          A Unix timestamp indicating when the message was received
        </tp:docstring>
      </arg>
      <arg name="Sender" tp:type="Contact_Handle" type="u">
        <tp:docstring>
          The handle of the contact who sent the message
        </tp:docstring>
      </arg>
      <arg name="Type" tp:type="Channel_Text_Message_Type" type="u">
        <tp:docstring>
          The type of the message (normal, action, notice, etc.)
        </tp:docstring>
      </arg>
      <arg name="Flags" tp:type="Channel_Text_Message_Flags" type="u">
        <tp:docstring>
          A bitwise OR of the message flags
        </tp:docstring>
      </arg>
      <arg name="Text" type="s">
        <tp:docstring>
          The text of the message
        </tp:docstring>
      </arg>
      <tp:docstring>
        Signals that a message with the given id, timestamp, sender, type
        and text has been received on this channel. Applications that catch
        this signal and reliably inform the user of the message should
        acknowledge that they have dealt with the message with the
        <tp:member-ref>AcknowledgePendingMessages</tp:member-ref> method.
      </tp:docstring>
    </signal>

    <method name="Send" tp:name-for-bindings="Send">
      <arg direction="in" name="Type" tp:type="Channel_Text_Message_Type" type="u">
        <tp:docstring>
          An integer indicating the type of the message
        </tp:docstring>
      </arg>
      <arg direction="in" name="Text" type="s">
        <tp:docstring>
          The message to send
        </tp:docstring>
      </arg>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Request that a message be sent on this channel. When the message has
          been submitted for delivery, this method will return and the
          <tp:member-ref>Sent</tp:member-ref> signal will be emitted. If the
          message cannot be submitted for delivery, the method returns an error
          and no signal is emitted.</p>

        <p>This method SHOULD return before the Sent signal is
          emitted.</p>

        <tp:rationale>
          <p>When a Text channel implements the <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Interface">Messages</tp:dbus-ref>
            interface, that &quot;SHOULD&quot; becomes a &quot;MUST&quot;.</p>
        </tp:rationale>
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument"/>
        <tp:error name="org.freedesktop.Telepathy.Error.PermissionDenied"/>
      </tp:possible-errors>
    </method>

    <tp:enum name="Channel_Text_Send_Error" type="u">
      <tp:enumvalue suffix="Unknown" value="0">
        <tp:docstring>
        An unknown error occurred
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Offline" value="1">
        <tp:docstring>
        The requested contact was offline
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Invalid_Contact" value="2">
        <tp:docstring>
        The requested contact is not valid
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Permission_Denied" value="3">
        <tp:docstring>
        The user does not have permission to speak on this channel
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Too_Long" value="4">
        <tp:docstring>
        The outgoing message was too long and was rejected by the server
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Not_Implemented" value="5">
        <tp:docstring>
        The channel doesn't support sending text messages to the requested
        contact
        </tp:docstring>
      </tp:enumvalue>
    </tp:enum>

    <signal name="SendError" tp:name-for-bindings="Send_Error">
      <arg name="Error" tp:type="Channel_Text_Send_Error" type="u">
        <tp:docstring>
          The error that occurred
        </tp:docstring>
      </arg>
      <arg name="Timestamp" tp:type="Unix_Timestamp" type="u">
        <tp:docstring>
          The Unix timestamp indicating when the message was sent
        </tp:docstring>
      </arg>
      <arg name="Type" tp:type="Channel_Text_Message_Type" type="u">
        <tp:docstring>
          The message type
        </tp:docstring>
      </arg>
      <arg name="Text" type="s">
        <tp:docstring>
          The text of the message
        </tp:docstring>
      </arg>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Signals that an outgoing message has failed to send. The error
          will be one of the values from ChannelTextSendError.</p>

        <p>This signal should only be emitted for messages for which
          <tp:member-ref>Sent</tp:member-ref> has already been emitted and
          <tp:member-ref>Send</tp:member-ref> has already returned success.</p>
      </tp:docstring>
      <tp:changed version="0.17.3">older spec versions claimed that SendError
        was emitted <em>instead of</em> Sent, rather than <em>in addition
        to</em> Sent. However, the 0.17.3+ semantics were what we'd always
        actually implemented.</tp:changed>
    </signal>

    <signal name="Sent" tp:name-for-bindings="Sent">
      <arg name="Timestamp" tp:type="Unix_Timestamp" type="u">
        <tp:docstring>
          Unix timestamp indicating when the message was sent
        </tp:docstring>
      </arg>
      <arg name="Type" tp:type="Channel_Text_Message_Type" type="u">
        <tp:docstring>
          The message type (normal, action, notice, etc) from
          ChannelTextMessageType
        </tp:docstring>
      </arg>
      <arg name="Text" type="s">
        <tp:docstring>
          The text of the message. If the message was, or will be, altered
          during transmission, this argument SHOULD reflect what other
          contacts will receive rather than being a copy of the argument
          to <tp:member-ref>Send</tp:member-ref>.
        </tp:docstring>
      </arg>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Signals that a message has been submitted for sending.</p>
      </tp:docstring>
    </signal>

    <tp:enum array-name="Channel_Text_Message_Type_List" name="Channel_Text_Message_Type" type="u">
      <tp:docstring>
        The type of message.
      </tp:docstring>

      <tp:enumvalue suffix="Normal" value="0">
        <tp:docstring>
        An ordinary chat message. Unknown types SHOULD be treated like this.
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Action" value="1">
        <tp:docstring>
        An action which might be presented to the user as
        &quot;* &lt;sender&gt; &lt;action&gt;&quot;, such as an IRC CTCP
        ACTION (typically selected by the &quot;/me&quot; command). For example, the
        text of the message might be &quot;drinks more coffee&quot;.
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Notice" value="2">
        <tp:docstring>
        A one-off or automated message not necessarily expecting a reply
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Auto_Reply" value="3">
        <tp:docstring>
        An automatically-generated reply message.
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Delivery_Report" value="4">
        <tp:docstring>
          This message type MUST NOT appear unless the channel supports the
          DeliveryReporting interface. The message MUST be as defined by
          the DeliveryReporting interface.
        </tp:docstring>
      </tp:enumvalue>
    </tp:enum>

    <tp:flags name="Channel_Text_Message_Flags" type="u" value-prefix="Channel_Text_Message_Flag">
      <tp:flag suffix="Truncated" value="1">
        <tp:docstring>
        The incoming message was truncated to a shorter length by the
        server or the connection manager.
        </tp:docstring>
      </tp:flag>

      <tp:flag suffix="Non_Text_Content" value="2">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The incoming message contained non-text content which cannot be
            represented by this interface, but has been signalled
            in the <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Interface">Messages</tp:dbus-ref>
            interface.</p>

          <p>Connection managers SHOULD only set this flag if the non-text
            content appears to be relatively significant (exactly how
            significant is up to the implementor). The intention is that
            if this flag is set, clients using this interface SHOULD inform
            the user that part of the message was not understood.</p>
        </tp:docstring>
      </tp:flag>

      <tp:flag suffix="Scrollback" value="4">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The incoming message was part of a replay of message history.</p>

          <tp:rationale>
            <p>In XMPP multi-user chat, a few past messages are replayed
              when you join a chatroom. A sufficiently capable IRC connection
              manager could also set this flag on historical messages when
              connected to a proxy like bip or irssi-proxy. The existence
              of this flag allows loggers and UIs to use better heuristics
              when eliminating duplicates (a simple implementation made
              possible by this flag would be to avoid logging scrollback
              at all).</p>
          </tp:rationale>
        </tp:docstring>
      </tp:flag>

      <tp:flag suffix="Rescued" value="8">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The incoming message has been seen in a previous channel during
            the lifetime of the <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection</tp:dbus-ref>, but
            had not been acknowledged
            when that channel closed, causing an identical channel (the
            channel in which the message now appears) to open.</p>

          <tp:rationale>
            <p>This means that a logger (which should already have seen the
              message in the previous channel) is able to recognise and ignore
              these replayed messages.</p>
          </tp:rationale>
        </tp:docstring>
      </tp:flag>
    </tp:flags>

    <tp:property name="anonymous" type="b">
      <tp:docstring>
      True if people may join the channel without other members being made
      aware of their identity.
      </tp:docstring>
    </tp:property>
    <tp:property name="invite-only" type="b">
      <tp:docstring>
      True if people may not join the channel until they have been invited.
      </tp:docstring>
    </tp:property>
    <tp:property name="limit" type="u">
      <tp:docstring>
      The limit to the number of members, if limited is true.
      </tp:docstring>
    </tp:property>
    <tp:property name="limited" type="b">
      <tp:docstring>
      True if there is a limit to the number of channel members.
      </tp:docstring>
    </tp:property>
    <tp:property name="moderated" type="b">
      <tp:docstring>
      True if channel membership is not sufficient to allow participation.
      </tp:docstring>
    </tp:property>
    <tp:property name="name" type="s">
      <tp:docstring>
      A human-visible name for the channel, if it differs from the channel's
      <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel">TargetID</tp:dbus-ref>.
      </tp:docstring>
    </tp:property>
    <tp:property name="description" type="s">
      <tp:docstring>
      A human-readable description of the channel's overall purpose.
      </tp:docstring>
    </tp:property>
    <tp:property name="password" type="s">
      <tp:docstring>
      The password required to enter the channel if password-required is true.
      </tp:docstring>
    </tp:property>
    <tp:property name="password-required" type="b">
      <tp:docstring>
      True if a password must be provided to enter the channel.
      </tp:docstring>
    </tp:property>
    <tp:property name="persistent" type="b">
      <tp:docstring>
      True if the channel will remain in existence on the server after all
      members have left it.
      </tp:docstring>
    </tp:property>
    <tp:property name="private" type="b">
      <tp:docstring>
      True if the channel is not visible to non-members.
      </tp:docstring>
    </tp:property>
    <tp:property name="subject" type="s">
      <tp:docstring>
      A human-readable description of the current subject of conversation in
      the channel, similar to /topic in IRC.
      </tp:docstring>
    </tp:property>
    <tp:property name="subject-contact" tp:type="Contact_Handle" type="u">
      <tp:docstring>
      A contact handle representing who last modified the subject, or 0
      if it isn't known.
      </tp:docstring>
    </tp:property>
    <tp:property name="subject-timestamp" tp:type="Unix_Timestamp" type="u">
      <tp:docstring>
      A unix timestamp indicating when the subject was last modified.
      </tp:docstring>
    </tp:property>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>A channel type for sending and receiving messages in plain text,
        with no formatting. In future specifications, channels for sending
        and receiving messages that can be reduced to plain text (i.e.
        formatted text) should also have this type.</p>

      <p>When a message is received, an identifier is assigned and a
        <tp:member-ref>Received</tp:member-ref> signal emitted, and the message
        placed in a pending queue which can be inspected with
        <tp:member-ref>ListPendingMessages</tp:member-ref>. A client which has
        handled the message by showing it to the user (or equivalent) should
        acknowledge the receipt using the
        <tp:member-ref>AcknowledgePendingMessages</tp:member-ref> method,
        and the message will then be removed from the pending queue. Numeric
        identifiers for received messages may be reused over the lifetime of
        the channel.</p>

      <p>Each message has an associated 'type' value, which should be one
        of the values allowed by
        <tp:type>Channel_Text_Message_Type</tp:type>.</p>

      <p>Each message also has a flags value, which is a bitwise OR of the
        flags given in <tp:type>Channel_Text_Message_Flags</tp:type>.</p>

      <p>Sending messages can be requested using the
        <tp:member-ref>Send</tp:member-ref> method, which will return
        successfully and emit the <tp:member-ref>Sent</tp:member-ref> signal
        when the message has been delivered to the server, or return an error
        with no signal emission if there is a failure. If a message is sent but
        delivery of the message later fails, this is indicated with the
        <tp:member-ref>SendError</tp:member-ref> signal.</p>

      <p>On protocols where additional contacts cannot be invited into
        a one-to-one chat, or where a one-to-one chat is just a series of
        individual personal messages rather than being represented by some
        object on the server (i.e. most protocols), one-to-one chats should be
        represented by a Text channel with <tp:type>Handle_Type</tp:type>
        CONTACT.</p>

      <p>Named chat rooms whose identity can be saved and used again later
        (IRC channels, Jabber MUCs) are expected to be represented by Text
        channels with <tp:type>Handle_Type</tp:type> ROOM and the <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Interface">Group</tp:dbus-ref>
        interface; they should usually also have the Properties interface.</p>

      <p>Unnamed, transient chat rooms defined only by their members (e.g. on
        MSN) are expected to be represented by Text channels with handle type
        0, handle 0, the <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Interface">Group</tp:dbus-ref>
        interface, and optionally the Properties interface.</p>

      <p>On protocols where a conversation with a user is actually just
        a nameless chat room starting with exactly two members, to which
        more members can be invited, calling
        <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection">RequestChannel</tp:dbus-ref>
        with type Text
        and handle type CONTACT should continue to succeed, but may return
        a channel with handle type 0, handle 0, the group interface,
        and the local and remote contacts in its members.</p>

      <p>If a channel of type Text is closed while it has pending messages,
        the connection manager MUST allow this, but SHOULD open a new,
        identical channel to deliver those messages, signalling it as a new
        channel with the
        <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection">NewChannel</tp:dbus-ref>
        signal (with the suppress_handler parameter set to FALSE).</p>

      <p>If messages were sent on the old channel but the
        <tp:member-ref>Sent</tp:member-ref>signal has not yet been emitted
        for those messages, the new channel SHOULD emit Sent for those
        messages when appropriate - it behaves like a continuation of the
        old channel.</p>

      <tp:rationale>
        <p>In effect, this turns this situation, in which a client
          is likely to lose messages:</p>

        <ul>
          <li>UI window is closed</li>
          <li>message arrives</li>
          <li>text channel emits Received</li>
          <li>UI calls Close on text channel before it has seen the
            Received signal</li>
          <li>text channel emits Closed and closes</li>
        </ul>

        <p>into something nearly equivalent to this situation, which is
          fine:</p>

        <ul>
          <li>UI window is closed</li>
          <li>UI calls Close on text channel</li>
          <li>text channel emits Closed and closes</li>
          <li>message arrives</li>
          <li>new text channel is created, connection emits NewChannel</li>
          <li>(the same or a different) UI handles it</li>
        </ul>

        <p>suppress_handler must be set to FALSE so the replacement channel
          will be handled by something.</p>
      </tp:rationale>

      <p>As a result, Text channels SHOULD implement <tp:dbus-ref namespace="org.freedesktop.Telepathy">Channel.Interface.Destroyable</tp:dbus-ref>.</p>

      <tp:rationale>
        <p>This &quot;respawning&quot; behaviour becomes problematic if there is no
          suitable handler for Text channels, or if a particular message
          repeatedly crashes the Text channel handler; a channel dispatcher
          can't just Close() the channel in these situations, because
          it will come back.</p>

        <p>In these situations, the channel dispatcher needs a last-resort
          way to destroy the channel and stop it respawning. It could either
          acknowledge the messages itself, or use the Destroyable interface;
          the Destroyable interface has the advantage that it's not
          channel-type-dependent, so the channel dispatcher only has to
          understand one extra interface, however many channel types
          eventually need a distinction between Close and Destroy.</p>
      </tp:rationale>

    </tp:docstring>
  </interface>
</node>
<node name="/Channel_Type_Tubes" xml:base="../spec/Channel_Type_Tubes.xml">
  <tp:copyright>
    Copyright © 2007-2009 Collabora Limited
  </tp:copyright>
  <tp:license>
    This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Channel.Type.Tubes">

    <tp:deprecated version="0.17.25">Client implementations
      SHOULD use <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type">StreamTube</tp:dbus-ref> and
        <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type">DBusTube</tp:dbus-ref>
      instead.</tp:deprecated>

    <tp:requires interface="org.freedesktop.Telepathy.Channel"/>
    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>A &quot;tube&quot; is a mechanism for arbitrary data transfer. Two types of
        data transfer are currently specified: D-Bus messages, and streams of
        bytes. Each tube has a service name, which is a string specifying the
        kind of communication that takes place over it, and a dictionary of
        arbitrary parameters. Tube parameters are commonly used for bootstrap
        information such as usernames and passwords. Each tube is identified
        by a locally unique identifier.</p>

       <p>The Tubes channel type may be requested for handles of type
         HANDLE_TYPE_CONTACT and HANDLE_TYPE_ROOM.</p>

       <p>Stream tubes specify listening addresses using pairs of parameters
         with signature 'u', 'v', where the integer 'u' is a member of
         Socket_Address_Type and the v is dependent on the type of address.</p>
    </tp:docstring>

    <tp:simple-type name="Tube_ID" type="u">
      <tp:docstring>An identifier for a tube. These are local to a Tubes
        channel, and may not be assumed to be the same as the other
        participants' idea of the tube identifier.</tp:docstring>
    </tp:simple-type>

    <tp:struct array-name="Tube_Info_List" name="Tube_Info">
      <tp:docstring>A struct (tube ID, initiator handle, tube type,
        service name, parameters, state) representing a tube, as returned
        by ListTubes on the Tubes channel type.</tp:docstring>
      <tp:member name="Identifier" tp:type="Tube_ID" type="u"/>
      <tp:member name="Initiator" tp:type="Contact_Handle" type="u"/>
      <tp:member name="Type" tp:type="Tube_Type" type="u"/>
      <tp:member name="Service" type="s"/>
      <tp:member name="Parameters" tp:type="String_Variant_Map" type="a{sv}"/>
      <tp:member name="State" tp:type="Tube_State" type="u"/>
    </tp:struct>

    <tp:struct array-name="DBus_Tube_Member_List" name="DBus_Tube_Member">
      <tp:docstring>Represents a participant in a multi-user D-Bus tube, as
        returned by <tp:member-ref>GetDBusNames</tp:member-ref> and seen in the
        <tp:member-ref>DBusNamesChanged</tp:member-ref> signal.</tp:docstring>
      <tp:member name="Handle" tp:type="Contact_Handle" type="u">
        <tp:docstring>
          The handle of a participant in this D-Bus tube.
        </tp:docstring>
      </tp:member>
      <tp:member name="Unique_Name" tp:type="DBus_Unique_Name" type="s">
        <tp:docstring>
          That participant's unique name.
        </tp:docstring>
      </tp:member>
    </tp:struct>

    <tp:enum array-name="Tube_Type_List" name="Tube_Type" type="u">
      <tp:enumvalue suffix="DBus" value="0">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The tube is D-Bus tube as described by the
            org.freedesktop.Telepathy.Channel.Type.DBusTube interface.</p>
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Stream" value="1">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The tube is stream tube as described by the
            org.freedesktop.Telepathy.Channel.Type.StreamTube interface.</p>
        </tp:docstring>
      </tp:enumvalue>
    </tp:enum>

    <tp:enum name="Tube_State" type="u">
      <tp:enumvalue suffix="Local_Pending" value="0">
        <tp:docstring>
          The tube is waiting to be accepted/closed locally.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Remote_Pending" value="1">
        <tp:docstring>
          The tube is waiting to be accepted/closed remotely.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Open" value="2">
        <tp:docstring>
          The tube is open for traffic.
        </tp:docstring>
      </tp:enumvalue>
    </tp:enum>

    <tp:mapping name="Supported_Socket_Map">
      <tp:docstring>The supported socket address and access-control types
        for tubes. See GetAvailableStreamTubeTypes.</tp:docstring>
      <tp:member name="Address_Type" tp:type="Socket_Address_Type" type="u"/>
      <tp:member name="Access_Control" tp:type="Socket_Access_Control[]" type="au"/>
    </tp:mapping>

    <method name="GetAvailableStreamTubeTypes" tp:name-for-bindings="Get_Available_Stream_Tube_Types">
      <tp:docstring>List the available address types and access-control types
        for stream tubes.</tp:docstring>
      <arg direction="out" name="Available_Stream_Tube_Types" tp:type="Supported_Socket_Map" type="a{uau}">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>A mapping from address types (members of Socket_Address_Type) to
          arrays of access-control type (members of Socket_Access_Control)
          that the connection manager supports for stream tubes with that
          address type. For simplicity, if a CM supports offering a
          particular type of tube, it is assumed to support accepting it.</p>

          <p>A typical value for a host without IPv6 support:</p>

          <pre>
            {
              Socket_Address_Type_IPv4:
                [Socket_Access_Control_Localhost, Socket_Access_Control_Port,
                 Socket_Access_Control_Netmask],
              Socket_Address_Type_Unix:
                [Socket_Access_Control_Localhost, Socket_Access_Control_Credentials]
            }
          </pre>

          <p>If stream tubes are not supported, this will be an empty
            dictionary.</p>
        </tp:docstring>
      </arg>
    </method>

    <method name="GetAvailableTubeTypes" tp:name-for-bindings="Get_Available_Tube_Types">
      <arg direction="out" name="Available_Tube_Types" tp:type="Tube_Type[]" type="au">
        <tp:docstring>
          An array of the available tube types, as defined by the Tube_Type
          enum.
        </tp:docstring>
      </arg>
    </method>

    <method name="ListTubes" tp:name-for-bindings="List_Tubes">
      <arg direction="out" name="Tubes" tp:type="Tube_Info[]" type="a(uuusa{sv}u)">
        <tp:docstring>
         Return an array of tuples, each representing a tube, with the
         following members:

         <ul>
           <li>the tube's ID</li>
           <li>the tube's initiator</li>
           <li>the tube's type</li>
           <li>the tube's service</li>
           <li>the tube's parameters</li>
           <li>the tube's state</li>
         </ul>
        </tp:docstring>
      </arg>
    </method>

    <!-- this tp:name-for-bindings is ugly, but compatible with
    the code generation in telepathy-glib versions that did not use
    tp:name-for-bindings -->
    <method name="OfferDBusTube" tp:name-for-bindings="Offer_D_Bus_Tube">
      <tp:docstring>
        Offers a D-Bus tube providing the service specified.
      </tp:docstring>
      <arg direction="in" name="Service" type="s">
        <tp:docstring>
          A string representing the service name that will be used over the
          tube.
          It should be a well-known D-Bus service name, of the form
          com.example.ServiceName.
        </tp:docstring>
      </arg>
      <arg direction="in" name="Parameters" tp:type="String_Variant_Map" type="a{sv}">
        <tp:docstring>
          A dictionary of properties for the new tube; the allowable keys,
          types and values are defined by the service. Connection managers
          must support the value being any primitive (non-container)
          D-Bus type, or a byte array 'ay'.
        </tp:docstring>
      </arg>
      <arg direction="out" name="Tube_ID" tp:type="Tube_ID" type="u">
        <tp:docstring>
          The ID of the new tube.
        </tp:docstring>
      </arg>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable">
          <tp:docstring>
            The contact associated with this channel doesn't have tubes
            capabilities.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotImplemented">
          <tp:docstring>
            The connection manager doesn't support D-Bus tubes.
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <method name="OfferStreamTube" tp:name-for-bindings="Offer_Stream_Tube">
      <tp:docstring>
        Offer a stream tube exporting the local socket specified.
      </tp:docstring>
      <arg direction="in" name="Service" type="s">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          A string representing the service name that will be used over the
          tube.
          It should be a well-known TCP service name as defined by
          <a href="http://www.iana.org/assignments/port-numbers">
            http://www.iana.org/assignments/port-numbers</a> or
          <a href="http://www.dns-sd.org/ServiceTypes.html">
            http://www.dns-sd.org/ServiceTypes.html</a>, for instance
          &quot;rsync&quot; or &quot;daap&quot;.
        </tp:docstring>
      </arg>
      <arg direction="in" name="Parameters" tp:type="String_Variant_Map" type="a{sv}">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>A dictionary of properties for the new tube; the allowable keys,
          types and values are defined by the service. Connection managers
          must support the value being any primitive (non-container)
          D-Bus type, or a byte array 'ay'.</p>
          <p>These should usually be the same key-value pairs specified for
          use in the DNS-SD TXT record for that service.</p>
        </tp:docstring>
      </arg>
      <arg direction="in" name="Address_Type" tp:type="Socket_Address_Type" type="u">
        <tp:docstring>
          The type of the listening address of the local service, as a member of
          Socket_Address_Type.
        </tp:docstring>
      </arg>
      <arg direction="in" name="Address" type="v">
        <tp:docstring>
          The listening address of the local service, as indicated by the
          address_type.
        </tp:docstring>
      </arg>
      <arg direction="in" name="Access_Control" tp:type="Socket_Access_Control" type="u">
        <tp:docstring>
          The access control the local service applies to the local socket,
          specified so the connection manager can behave appropriately
          when it connects.
        </tp:docstring>
      </arg>
      <arg direction="in" name="Access_Control_Param" type="v">
        <tp:docstring>
          A parameter for the access control type, to be interpreted as
          specified in the documentation for the Socket_Access_Control enum.
        </tp:docstring>
      </arg>
      <arg direction="out" name="Tube_ID" tp:type="Tube_ID" type="u">
        <tp:docstring>
          The ID of the new tube.
        </tp:docstring>
      </arg>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable">
          <tp:docstring>
            The contact associated with this channel doesn't have tube
            capabilities.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotImplemented">
          <tp:docstring>
            The connection manager doesn't support stream tubes, or
            does not support the given address type or access-control type.
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <signal name="NewTube" tp:name-for-bindings="New_Tube">
      <tp:docstring>
        Emitted when a tube is created.
      </tp:docstring>
      <arg name="ID" tp:type="Tube_ID" type="u">
        <tp:docstring>
          The ID of the new tube.
        </tp:docstring>
      </arg>
      <arg name="Initiator" tp:type="Contact_Handle" type="u">
        <tp:docstring>
          The handle of the contact who initiated the tube.
        </tp:docstring>
      </arg>
      <arg name="Type" tp:type="Tube_Type" type="u">
        <tp:docstring>
          The tube type, as defined by the Tube_Type enum.
        </tp:docstring>
      </arg>
      <arg name="Service" type="s">
        <tp:docstring>
          A string representing the service that will be used over the tube.
        </tp:docstring>
      </arg>
      <arg name="Parameters" tp:type="String_Variant_Map" type="a{sv}">
        <tp:docstring>
          The new tube's properties.
        </tp:docstring>
      </arg>
      <arg name="State" tp:type="Tube_State" type="u">
        <tp:docstring>
          The new tube's state.
        </tp:docstring>
      </arg>
    </signal>

    <!-- this tp:name-for-bindings is ugly, but compatible with
    the code generation in telepathy-glib versions that did not use
    tp:name-for-bindings -->
    <method name="AcceptDBusTube" tp:name-for-bindings="Accept_D_Bus_Tube">
      <tp:docstring>
        Accept a D-Bus tube that's in the &quot;local pending&quot; state. The
        connection manager will attempt to open the tube. The tube remains in
        the &quot;local pending&quot; state until the TubeStateChanged signal is
        emitted.
      </tp:docstring>
      <arg direction="in" name="ID" tp:type="Tube_ID" type="u">
        <tp:docstring>
          The ID of the tube to accept.
        </tp:docstring>
      </arg>
      <arg direction="out" name="Address" type="s">
        <tp:docstring>
          The string describing the address of the private bus. The client
          should not attempt to connect to the address until the tube is open.
        </tp:docstring>
      </arg>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument">
          <tp:docstring>
            The given tube ID is invalid or does not refer to a D-Bus
            tube.
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <method name="AcceptStreamTube" tp:name-for-bindings="Accept_Stream_Tube">
      <tp:docstring>
        Accept a stream tube that's in the &quot;local pending&quot; state. The
        connection manager will attempt to open the tube. The tube remains in
        the &quot;local pending&quot; state until the TubeStateChanged signal is
        emitted.
      </tp:docstring>
      <arg direction="in" name="ID" tp:type="Tube_ID" type="u">
        <tp:docstring>
          The ID of the tube to accept.
        </tp:docstring>
      </arg>
      <arg direction="in" name="Address_Type" tp:type="Socket_Address_Type" type="u">
        <tp:docstring>
          The type of address the connection manager should listen on.
        </tp:docstring>
      </arg>
      <arg direction="in" name="Access_Control" tp:type="Socket_Access_Control" type="u">
        <tp:docstring>
          The type of access control the connection manager should apply to
          the socket.
        </tp:docstring>
      </arg>
      <arg direction="in" name="Access_Control_Param" type="v">
        <tp:docstring>
          A parameter for the access control type, to be interpreted as
          specified in the documentation for the Socket_Access_Control enum.
        </tp:docstring>
      </arg>
      <arg direction="out" name="Address" type="v">
        <tp:docstring>
          The address on which the connection manager will listen for
          connections to this tube. The client should not attempt to connect
          to the address until the tube is open.
        </tp:docstring>
      </arg>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument">
          <tp:docstring>
            The given tube ID is invalid or does not refer to a stream
            tube.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotImplemented">
          <tp:docstring>
            The given address type or access-control mechanism is not supported.
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <signal name="TubeStateChanged" tp:name-for-bindings="Tube_State_Changed">
      <tp:docstring>
        Emitted when the state of a tube changes.
      </tp:docstring>
      <arg name="ID" tp:type="Tube_ID" type="u">
        <tp:docstring>
          The ID of the tube that changed state.
        </tp:docstring>
      </arg>
      <arg name="State" tp:type="Tube_State" type="u">
        <tp:docstring>
          The new state of the tube; see the Tube_State enumeration.
        </tp:docstring>
      </arg>
    </signal>

    <method name="CloseTube" tp:name-for-bindings="Close_Tube">
      <tp:docstring>
        Close a tube.
      </tp:docstring>
      <arg direction="in" name="ID" tp:type="Tube_ID" type="u">
        <tp:docstring>
          The ID of the tube to close.
        </tp:docstring>
      </arg>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument"/>
      </tp:possible-errors>
    </method>

    <signal name="TubeClosed" tp:name-for-bindings="Tube_Closed">
      <tp:docstring>
       Emitted when a tube has been closed. The ID of a closed tube is no
       longer valid. The ID may later be reused for a new tube.
      </tp:docstring>
      <arg name="ID" tp:type="Tube_ID" type="u">
        <tp:docstring>
          The ID of the tube that was closed.
        </tp:docstring>
      </arg>
    </signal>

    <!-- this tp:name-for-bindings is ugly, but compatible with
    the code generation in telepathy-glib versions that did not use
    tp:name-for-bindings -->
    <method name="GetDBusTubeAddress" tp:name-for-bindings="Get_D_Bus_Tube_Address">
      <tp:docstring>
        For a D-Bus tube, return a string describing the address of the
        private bus.
      </tp:docstring>
      <arg direction="in" name="ID" tp:type="Tube_ID" type="u">
        <tp:docstring>
          The ID of the tube to get an address for.
        </tp:docstring>
      </arg>
      <arg direction="out" name="Address" type="s">
        <tp:docstring>
          The bus address.
        </tp:docstring>
      </arg>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument">
          <tp:docstring>
            The tube is not a D-Bus tube.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable">
          <tp:docstring>
            This tube is not in the &quot;open&quot; state.
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <!-- this tp:name-for-bindings is ugly, but compatible with
    the code generation in telepathy-glib versions that did not use
    tp:name-for-bindings -->
    <method name="GetDBusNames" tp:name-for-bindings="Get_D_Bus_Names">
      <tp:docstring>
        For a multi-user (i.e. Handle_Type_Room) D-Bus tube, obtain a mapping
        between contact handles and their unique bus names on this tube.
      </tp:docstring>
      <arg direction="in" name="ID" tp:type="Tube_ID" type="u">
        <tp:docstring>
          The ID of the tube to get names for.
        </tp:docstring>
      </arg>
      <arg direction="out" name="DBus_Names" tp:type="DBus_Tube_Member[]" type="a(us)">
        <tp:docstring>
          An array of structures, each containing a contact handle and a D-Bus
          bus name.
        </tp:docstring>
      </arg>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument">
          <tp:docstring>
            The tube is not a multi-user D-Bus tube.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable">
          <tp:docstring>
            This tube is not in the &quot;open&quot; state.
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <!-- this tp:name-for-bindings is ugly, but compatible with
    the code generation in telepathy-glib versions that did not use
    tp:name-for-bindings -->
    <signal name="DBusNamesChanged" tp:name-for-bindings="D_Bus_Names_Changed">
      <tp:docstring>
        Emitted on a multi-user (i.e. Handle_Type_Room) D-Bus tube when a
        participant opens or closes the tube.
      </tp:docstring>
      <arg name="ID" tp:type="Tube_ID" type="u">
        <tp:docstring>
          The ID of the tube whose names have changed.
        </tp:docstring>
      </arg>
      <arg name="Added" tp:type="DBus_Tube_Member[]" type="a(us)">
        <tp:docstring>
          Array of handles and D-Bus names of new participants.
        </tp:docstring>
      </arg>
      <arg name="Removed" tp:type="Contact_Handle[]" type="au">
        <tp:docstring>
          Array of handles of former participants.
        </tp:docstring>
      </arg>
    </signal>

    <method name="GetStreamTubeSocketAddress" tp:name-for-bindings="Get_Stream_Tube_Socket_Address">
      <tp:docstring>
        For a stream tube, obtain the address of the socket used to
        communicate over this tube.
      </tp:docstring>
      <arg direction="in" name="ID" tp:type="Tube_ID" type="u">
        <tp:docstring>
          The ID of the stream tube to get the socket for.
        </tp:docstring>
      </arg>
      <arg direction="out" name="Address_Type" tp:type="Socket_Address_Type" type="u">
        <tp:docstring>
          The type of the listening address of the socket, as a member of
          Socket_Address_Type.
        </tp:docstring>
      </arg>
      <arg direction="out" name="Address" type="v">
        <tp:docstring>
          The listening address of the socket, as indicated by the
          address_type.
        </tp:docstring>
      </arg>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument">
          <tp:docstring>
            The tube is not a stream tube.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable">
          <tp:docstring>
            This tube is not in the &quot;open&quot; state.
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <signal name="StreamTubeNewConnection" tp:name-for-bindings="Stream_Tube_New_Connection">
      <tp:docstring>
        Emitted on a stream tube when a participant opens a new connection
        to its socket.
      </tp:docstring>
      <arg name="ID" tp:type="Tube_ID" type="u">
        <tp:docstring>
          The ID of the tube
        </tp:docstring>
      </arg>
      <arg name="Handle" tp:type="Contact_Handle" type="u">
        <tp:docstring>
          The handle of the participant who opened the new connection
        </tp:docstring>
      </arg>
    </signal>

  </interface>

</node>
<node name="/Channel_Type_Stream_Tube" xml:base="../spec/Channel_Type_Stream_Tube.xml">
  <tp:copyright>Copyright © 2008-2009 Collabora Limited</tp:copyright>
  <tp:copyright>Copyright © 2008-2009 Nokia Corporation</tp:copyright>
  <tp:license>
    This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Channel.Type.StreamTube">
    <tp:requires interface="org.freedesktop.Telepathy.Channel"/>
    <tp:requires interface="org.freedesktop.Telepathy.Channel.Interface.Tube"/>
    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>A stream tube is a transport for ordered, reliable data transfer,
        similar to SOCK_STREAM sockets.</p>

      <p>When offering a stream tube, the initiating client creates a local
        listening socket and offers it to the recipient client using the
        <tp:member-ref>Offer</tp:member-ref> method.  When a
        recipient accepts a stream tube using the
        <tp:member-ref>Accept</tp:member-ref> method, the
        recipient's connection manager creates a new local listening socket.
        Each time the recipient's client connects to this socket, the
        initiator's connection manager proxies this connection to the
        originally offered socket.</p>

    </tp:docstring>

    <method name="Offer" tp:name-for-bindings="Offer">
      <tp:docstring>
        Offer a stream tube exporting the local socket specified.
      </tp:docstring>
      <arg direction="in" name="address_type" tp:type="Socket_Address_Type" type="u">
        <tp:docstring>
          The type of the listening address of the local service, as a member of
          Socket_Address_Type.
        </tp:docstring>
      </arg>
      <arg direction="in" name="address" type="v">
        <tp:docstring>
          The listening address of the local service, as indicated by the
          address_type.
        </tp:docstring>
      </arg>
      <arg direction="in" name="access_control" tp:type="Socket_Access_Control" type="u">
        <tp:docstring>
          The access control the local service applies to the local socket,
          specified so the connection manager can behave appropriately
          when it connects.
        </tp:docstring>
      </arg>
      <arg direction="in" name="parameters" tp:type="String_Variant_Map" type="a{sv}">
        <tp:docstring>
          The dictionary of arbitrary
          <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Interface.Tube">Parameters</tp:dbus-ref>
          to send with the tube offer.
        </tp:docstring>
      </arg>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable">
          <tp:docstring>
            The contact associated with this channel doesn't have tube
            capabilities.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotImplemented">
          <tp:docstring>
            The connection manager doesn't support the given address type
            or access-control type.
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <method name="Accept" tp:name-for-bindings="Accept">
      <tp:docstring>
        Accept a stream tube that's in the &quot;local pending&quot; state. The
        connection manager will attempt to open the tube. The tube remains in
        the &quot;local pending&quot; state until the <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Interface.Tube">TubeChannelStateChanged</tp:dbus-ref>
        signal is emitted.
      </tp:docstring>
      <arg direction="in" name="address_type" tp:type="Socket_Address_Type" type="u">
        <tp:docstring>
          The type of address the connection manager should listen on.
        </tp:docstring>
      </arg>
      <arg direction="in" name="access_control" tp:type="Socket_Access_Control" type="u">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The type of access control the connection manager should apply to
          the socket.</p>

          <p>Note that if you plan to establish more than one connection
          through the tube, the Socket_Access_Control_Port access control
          can't be used as you can't connect more than once from the same
          port.</p>
        </tp:docstring>
      </arg>
      <arg direction="in" name="access_control_param" type="v">
        <tp:docstring>
          A parameter for the access control type, to be interpreted as
          specified in the documentation for the Socket_Access_Control enum.
        </tp:docstring>
      </arg>
      <arg direction="out" name="address" type="v">
        <tp:docstring>
          The address on which the connection manager will listen for
          connections to this tube. The client should not attempt to connect
          to the address until the tube is open.
        </tp:docstring>
      </arg>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument">
          <tp:docstring>
            The access_control_param is invalid with the given access_control.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotImplemented">
          <tp:docstring>
            The given address type or access-control mechanism is not supported.
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <signal name="NewRemoteConnection" tp:name-for-bindings="New_Remote_Connection">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Emitted each time a participant opens a new connection to its
        socket.</p>

        <p>This signal is only fired on the offering side.</p>
      </tp:docstring>
      <arg name="Handle" tp:type="Contact_Handle" type="u">
        <tp:docstring>
          The handle of the participant who opened the new connection
        </tp:docstring>
      </arg>
      <arg name="Connection_Param" type="v">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>A parameter which can be used by the listening process to identify
          the connection. Note that this parameter has a meaningful value
          only in the Socket_Access_Control_Port and
          Socket_Access_Control_Credentials cases. If a different
          Socket_Access_Control has been chosen when offering the tube, this
          parameter should be ignored.</p>

          <p>In the Socket_Access_Control_Port case, the variant
          contains a struct Socket_Address_IPv4 (or Socket_Address_IPv6)
          containing the address from which the CM is connected to the client
          application.</p>

          <p>In the Socket_Access_Control_Credentials case, the variant
          contains the byte (D-Bus signature 'y') that has been sent with
          the credentials.</p>
        </tp:docstring>
      </arg>
      <arg name="Connection_ID" tp:type="Stream_Tube_Connection_ID" type="u">
        <tp:docstring>
          The unique ID associated with this connection. This ID will be used
          to identifiy the connection when reporting errors with
          <tp:member-ref>ConnectionClosed</tp:member-ref>.
        </tp:docstring>
      </arg>
    </signal>

    <signal name="NewLocalConnection" tp:name-for-bindings="New_Local_Connection">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Emitted when the tube application connects to the CM's socket.</p>

        <p>This signal is only fired on the accepting side.</p>
      </tp:docstring>
      <arg name="Connection_ID" tp:type="Stream_Tube_Connection_ID" type="u">
        <tp:docstring>
          The unique ID associated with this connection. This ID will be used
          to identifiy the connection when reporting errors with
          <tp:member-ref>ConnectionClosed</tp:member-ref>.
        </tp:docstring>
      </arg>
    </signal>

    <signal name="ConnectionClosed" tp:name-for-bindings="Connection_Closed" tp:type="Stream_Tube_Connection_Closed">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Emitted when a connection has been closed.</p>
      </tp:docstring>
      <arg name="Connection_ID" tp:type="Stream_Tube_Connection_ID" type="u">
        <tp:docstring>
          The ID of the connection.
        </tp:docstring>
      </arg>
      <arg name="Error" tp:type="DBus_Error_Name" type="s">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The name of a D-Bus error describing the error that occurred.</p>

          <p>The following errors can be used:</p>
          <ul>
            <li><code>org.freedesktop.Telepathy.Error.Cancelled</code>:
               user closed the socket or the tube.</li>
            <li><code>org.freedesktop.Telepathy.Error.ConnectionLost</code>:
               the bytestream relaying connection's data has been broken.</li>
            <li><code>org.freedesktop.Telepathy.Error.ConnectionRefused</code>:
               the tube offer refused the connection.</li>
          </ul>
        </tp:docstring>
      </arg>
      <arg name="Message" type="s">
        <tp:docstring>
          A debug message.
        </tp:docstring>
      </arg>
    </signal>

    <property access="read" name="Service" tp:name-for-bindings="Service" type="s">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p> A string representing the service name that will be used over the
          tube.  It should be a well-known TCP service name as defined by
          <a href="http://www.iana.org/assignments/port-numbers">
            http://www.iana.org/assignments/port-numbers</a> or
          <a href="http://www.dns-sd.org/ServiceTypes.html">
            http://www.dns-sd.org/ServiceTypes.html</a>, for instance
          &quot;rsync&quot; or &quot;daap&quot;.</p>
        <p>When the tube is offered, the service name is transmitted to the
          other end.</p>
        <p>When requesting a channel with
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection.Interface.Requests.CreateChannel</tp:dbus-ref>,
          this property MUST be included in the request.</p>
      </tp:docstring>
    </property>

    <property access="read" name="SupportedSocketTypes" tp:name-for-bindings="Supported_Socket_Types" tp:type="Supported_Socket_Map" type="a{uau}">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>A mapping from address types (members of Socket_Address_Type) to
        arrays of access-control type (members of Socket_Access_Control)
        that the connection manager supports for stream tubes with that
        address type. For simplicity, if a CM supports offering a
        particular type of tube, it is assumed to support accepting it.</p>

        <p>A typical value for a host without IPv6 support:</p>

        <pre>
          {
            Socket_Address_Type_IPv4:
              [Socket_Access_Control_Localhost, Socket_Access_Control_Port,
               Socket_Access_Control_Netmask],
            Socket_Address_Type_Unix:
              [Socket_Access_Control_Localhost, Socket_Access_Control_Credentials]
          }
        </pre>

        <p>Connection Managers MUST support at least IPv4 with the localhost
          access control.</p>

        <p>When requesting a channel with
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection.Interface.Requests.CreateChannel</tp:dbus-ref>,
          this property MUST NOT be included in the request.</p>

      </tp:docstring>
    </property>

    <tp:simple-type name="Stream_Tube_Connection_ID" type="u">
      <tp:docstring>An identifier for a stream tube connection.
        These are defined with the
        <tp:member-ref>NewLocalConnection</tp:member-ref> or
        <tp:member-ref>NewRemoteConnection</tp:member-ref> signals
        and are used by <tp:member-ref>ConnectionClosed</tp:member-ref>
        to identify the closed connection.
        </tp:docstring>
    </tp:simple-type>

  </interface>

</node>
<node name="/Channel_Type_DBus_Tube" xml:base="../spec/Channel_Type_DBus_Tube.xml">
  <tp:copyright>Copyright © 2008-2009 Collabora Limited</tp:copyright>
  <tp:copyright>Copyright © 2008-2009 Nokia Corporation</tp:copyright>
  <tp:license>
    This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Channel.Type.DBusTube">
    <tp:requires interface="org.freedesktop.Telepathy.Channel"/>
    <tp:requires interface="org.freedesktop.Telepathy.Channel.Interface.Tube"/>
    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>A D-Bus tube is an ordered reliable transport, for transporting D-Bus
        traffic.</p>

      <p>For each D-Bus tube, the connection manager listens on a D-Bus
        server address, as detailed in the D-Bus specification. On this
        address, it emulates a bus upon which each tube participant appears
        as an endpoint.</p>

      <p>The objects and interfaces which are expected to exist on the
        emulated bus depend on the well-known name; typically, either the
        participant who initiated the tube is expected to export the same
        objects/interfaces that would be exported by a service of that name
        on a bus, or all participants are expected to export those
        objects/interfaces.</p>

      <p>In a multi-user context (Handle_Type_Room) the tube behaves
        like the D-Bus bus daemon, so participants can send each other
        private messages, or can send broadcast messages which are
        received by everyone in the tube (including themselves).
        Each participant has a D-Bus unique name; connection managers
        MUST prevent participants from sending messages with the wrong
        sender unique name, and SHOULD attempt to avoid participants
        receiving messages not intended for them.</p>

      <p>In a 1-1 context (Handle_Type_Contact) the tube behaves like
        a peer-to-peer D-Bus connection - arbitrary D-Bus messages with
        any sender and/or destination can be sent by each participant,
        and each participant receives all messages sent by the other
        participant.</p>

    </tp:docstring>

    <method name="Offer" tp:name-for-bindings="Offer">
      <tp:docstring>
        Offers a D-Bus tube providing the service specified.
      </tp:docstring>
      <arg direction="in" name="parameters" tp:type="String_Variant_Map" type="a{sv}">
        <tp:docstring>
          The dictionary of arbitrary
          <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Interface.Tube">Parameters</tp:dbus-ref>
          to send with the tube offer.
        </tp:docstring>
      </arg>
      <arg direction="in" name="access_control" tp:type="Socket_Access_Control" type="u">
        <tp:docstring>
          The access control the connection manager applies to the D-Bus socket.
        </tp:docstring>
      </arg>
      <arg direction="out" name="address" type="s">
        <tp:docstring>
          The string describing the address of the private bus. The client
          SHOULD NOT attempt to connect to the address until the tube is open.
        </tp:docstring>
      </arg>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable">
          <tp:docstring>
            The contact associated with this channel doesn't have tubes
            capabilities.
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <method name="Accept" tp:name-for-bindings="Accept">
      <tp:docstring>
        Accept a D-Bus tube that's in the &quot;local pending&quot; state. The
        connection manager will attempt to open the tube. The tube remains in
        the &quot;local pending&quot; state until the <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Interface.Tube">TubeChannelStateChanged</tp:dbus-ref>
        signal is emitted.
      </tp:docstring>
      <arg direction="in" name="access_control" tp:type="Socket_Access_Control" type="u">
        <tp:docstring>
          The access control the connection manager applies to the D-Bus socket.
        </tp:docstring>
      </arg>
      <arg direction="out" name="address" type="s">
        <tp:docstring>
          The string describing the address of the private bus. The client
          SHOULD NOT attempt to connect to the address until the tube is open.
        </tp:docstring>
      </arg>
    </method>

    <signal name="DBusNamesChanged" tp:name-for-bindings="DBus_Names_Changed">
      <tp:docstring>
        Emitted on a multi-user (i.e. Handle_Type_Room) D-Bus tube when a
        participant opens or closes the tube.  This provides change
        notification for the <tp:member-ref>DBusNames</tp:member-ref> property.
      </tp:docstring>
      <arg name="Added" tp:type="DBus_Tube_Participants" type="a{us}">
        <tp:docstring>
          Array of handles and D-Bus names of new participants.
        </tp:docstring>
      </arg>
      <arg name="Removed" tp:type="Contact_Handle[]" type="au">
        <tp:docstring>
          Array of handles of former participants.
        </tp:docstring>
      </arg>
    </signal>

    <property access="read" name="ServiceName" tp:name-for-bindings="Service_Name" type="s">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>A string representing the service name that will be used over the
          tube. It SHOULD be a well-known D-Bus service name, of the form
          <tt>com.example.ServiceName</tt>.</p>
        <p>When the tube is offered, the service name is transmitted to the
          other end.</p>
        <p>When requesting a channel with
          <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection.Interface.Requests">CreateChannel</tp:dbus-ref>,
          this property MUST be included in the request.</p>
      </tp:docstring>
    </property>

    <property access="read" name="DBusNames" tp:name-for-bindings="DBus_Names" tp:type="DBus_Tube_Participants" type="a{us}">
      <tp:docstring>
        For a multi-user (i.e. Handle_Type_Room) D-Bus tube, a mapping
        between contact handles and their unique bus names on this tube.
        For a peer-to-peer (i.e. Handle_Type_Contact) D-Bus tube, the empty
        dictionary.  Change notification is via
        <tp:member-ref>DBusNamesChanged</tp:member-ref>.
      </tp:docstring>
    </property>

    <tp:mapping name="DBus_Tube_Participants">
      <tp:docstring>Represents the participants in a multi-user D-Bus tube, as
        used by the <tp:member-ref>DBusNames</tp:member-ref> property and the
        <tp:member-ref>DBusNamesChanged</tp:member-ref> signal.</tp:docstring>
      <tp:member name="Handle" tp:type="Contact_Handle" type="u">
        <tp:docstring>
          The handle of a participant in this D-Bus tube.
        </tp:docstring>
      </tp:member>
      <tp:member name="Unique_Name" tp:type="DBus_Unique_Name" type="s">
        <tp:docstring>
          That participant's unique name.
        </tp:docstring>
      </tp:member>
    </tp:mapping>

    <property access="read" name="SupportedAccessControls" tp:name-for-bindings="Supported_Access_Controls" tp:type="Socket_Access_Control[]" type="au">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>A list of the access control types that are supported with this channel.
        Note that only Socket_Access_Control_Localhost and
        Socket_Access_Control_Credentials can be used with D-Bus tubes.</p>

        <p>When requesting a channel with
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection.Interface.Requests.CreateChannel</tp:dbus-ref>,
          this property MUST NOT be included in the request.</p>

      </tp:docstring>
    </property>

  </interface>

</node>

<node name="/Channel_Interface_Call_State" xml:base="../spec/Channel_Interface_Call_State.xml">
  <tp:copyright> Copyright (C) 2008 Collabora Limited </tp:copyright>
  <tp:copyright> Copyright (C) 2008 Nokia Corporation </tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Channel.Interface.CallState">
    <tp:requires interface="org.freedesktop.Telepathy.Channel.Type.StreamedMedia"/>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>An interface for streamed media channels that can indicate call
        progress or call states. The presence of this interface is no guarantee
        that call states will actually be signalled (for instance, SIP
        implementations are not guaranteed to generate status 180 Ringing, so a
        call can be accepted without the Ringing flag ever having been set;
        similarly, Jingle implementations are not guaranteed to send
        <code>&lt;ringing/&gt;</code>).</p>

      <p>To notify the other participant in the call that they are on hold,
        see <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Interface">Hold</tp:dbus-ref>.</p>
    </tp:docstring>
    <tp:added version="0.17.2"/>

    <method name="GetCallStates" tp:name-for-bindings="Get_Call_States">
      <tp:docstring>
        Get the current call states for all contacts involved in this call.
      </tp:docstring>

      <arg direction="out" name="States" tp:type="Channel_Call_State_Map" type="a{uu}">
        <tp:docstring>
          The current call states. Participants where the call state flags
          would be 0 (all unset) may be omitted from this mapping.
        </tp:docstring>
      </arg>
    </method>

    <signal name="CallStateChanged" tp:name-for-bindings="Call_State_Changed">
      <tp:docstring>
        Emitted when the state of a member of the channel has changed.
      </tp:docstring>

      <arg name="Contact" tp:type="Contact_Handle" type="u">
        <tp:docstring>
          An integer handle for the contact.
        </tp:docstring>
      </arg>

      <arg name="State" tp:type="Channel_Call_State_Flags" type="u">
        <tp:docstring>
          The new state for this contact.
        </tp:docstring>
      </arg>
    </signal>

    <tp:mapping name="Channel_Call_State_Map">
      <tp:docstring>
        A map from contacts to call states.
      </tp:docstring>

      <tp:member name="Contact" tp:type="Contact_Handle" type="u">
        <tp:docstring>A contact involved in this call.</tp:docstring>
      </tp:member>

      <tp:member name="State" tp:type="Channel_Call_State_Flags" type="u">
        <tp:docstring>State flags for the given contact.</tp:docstring>
      </tp:member>
    </tp:mapping>

    <tp:flags name="Channel_Call_State_Flags" type="u" value-prefix="Channel_Call_State">
      <tp:docstring>
        A set of flags representing call states.
      </tp:docstring>

      <tp:flag suffix="Ringing" value="1">
        <tp:docstring>
          The contact has been alerted about the call but has not responded
          (e.g. 180 Ringing in SIP).
        </tp:docstring>
      </tp:flag>

      <tp:flag suffix="Queued" value="2">
        <tp:docstring>
          The contact is temporarily unavailable, and the call has been placed
          in a queue (e.g. 182 Queued in SIP, or call-waiting in telephony).
        </tp:docstring>
      </tp:flag>

      <tp:flag suffix="Held" value="4">
        <tp:docstring>
          The contact has placed the call on hold, and will not receive
          media from the local user or any other participants until they
          unhold the call again.
        </tp:docstring>
      </tp:flag>

      <tp:flag suffix="Forwarded" value="8">
        <tp:docstring>
          The initiator of the call originally called a contact other than the
          current recipient of the call, but the call was then forwarded or
          diverted.
        </tp:docstring>
      </tp:flag>

      <tp:flag suffix="In_Progress" value="16">
        <tp:docstring>
          Progress has been made in placing the outgoing call, but the
          destination contact may not have been made aware of the call yet
          (so the Ringing state is not appropriate). This corresponds to SIP's
          status code 183 Session Progress, and could be used when the
          outgoing call has reached a gateway, for instance.
        </tp:docstring>
      </tp:flag>
    </tp:flags>

  </interface>
</node>
<node name="/Channel_Interface_Chat_State" xml:base="../spec/Channel_Interface_Chat_State.xml">
  <tp:copyright> Copyright (C) 2007 Collabora Limited </tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Channel.Interface.ChatState">
    <tp:requires interface="org.freedesktop.Telepathy.Channel"/>
    <method name="SetChatState" tp:name-for-bindings="Set_Chat_State">
      <arg direction="in" name="State" tp:type="Channel_Chat_State" type="u">
        <tp:docstring>
          The new state.
        </tp:docstring>
      </arg>
      <tp:docstring>
        Set the local state and notify other members of the channel that it
        has changed.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument"/>
      </tp:possible-errors>
    </method>
    <signal name="ChatStateChanged" tp:name-for-bindings="Chat_State_Changed">
      <arg name="Contact" tp:type="Contact_Handle" type="u">
        <tp:docstring>
          An integer handle for the contact.
        </tp:docstring>
      </arg>
      <arg name="State" tp:type="Channel_Chat_State" type="u">
        <tp:docstring>
          The new state of this contact.
        </tp:docstring>
      </arg>
      <tp:docstring>
        Emitted when the state of a member of the channel has changed.
        This includes local state.
      </tp:docstring>
    </signal>
    <tp:enum name="Channel_Chat_State" type="u">
      <tp:enumvalue suffix="Gone" value="0">
        <tp:docstring>
        The contact has effectively ceased participating in the chat.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Inactive" value="1">
        <tp:docstring>
        The contact has not been active for some time.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Active" value="2">
        <tp:docstring>
        The contact is actively participating in the chat.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Paused" value="3">
        <tp:docstring>
        The contact has paused composing a message.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Composing" value="4">
        <tp:docstring>
        The contact is composing a message to be sent to the chat.
        </tp:docstring>
      </tp:enumvalue>
    </tp:enum>
    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>An interface for channels for receiving notifications of remote contacts'
      state, and for notifying remote contacts of the local state.</p>

      <p>Clients should assume that a contact's state is Channel_Chat_State_Inactive
      unless they receive a notification otherwise.</p>

      <p>The Channel_Chat_State_Gone state is treated differently to other states:</p>
      <ul>
        <li>It may not be used for multi-user chats</li>
        <li>It may not be explicitly sent</li>
        <li>It should be automatically sent when the channel is closed</li>
        <li>It must not be sent to the peer if a channel is closed without being used</li>
        <li>Receiving it must not cause a new channel to be opened</li>
      </ul>

      <p>The different states are defined by XEP-0085, but may be applied to any suitable protocol.</p>
    </tp:docstring>
  </interface>
</node>
<node name="/Channel_Interface_Destroyable" xml:base="../spec/Channel_Interface_Destroyable.xml">
  <tp:copyright>Copyright (C) 2008 Collabora Ltd.</tp:copyright>
  <tp:copyright>Copyright (C) 2008 Nokia Corporation</tp:copyright>

  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
      modify it under the terms of the GNU Lesser General Public
      License as published by the Free Software Foundation; either
      version 2.1 of the License, or (at your option) any later version.</p>

    <p>This library is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
      Lesser General Public License for more details.</p>

    <p>You should have received a copy of the GNU Lesser General Public
      License along with this library; if not, write to the Free Software
      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
      USA.</p>
  </tp:license>

  <interface name="org.freedesktop.Telepathy.Channel.Interface.Destroyable">
    <tp:requires interface="org.freedesktop.Telepathy.Channel"/>
    <tp:added version="0.17.14">(as stable API)</tp:added>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>This interface exists to support channels where
        <tp:dbus-ref namespace="org.freedesktop.Telepathy">Channel.Close</tp:dbus-ref>
        is insufficiently destructive. At the moment this means
        <tp:dbus-ref namespace="org.freedesktop.Telepathy">Channel.Type.Text</tp:dbus-ref>,
        but the existence of this interface means that unsupported channels
        can be terminated in a non-channel-type-specific way.</p>
    </tp:docstring>

    <method name="Destroy" tp:name-for-bindings="Destroy">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Close the channel abruptly, possibly with loss of data. The
          connection manager MUST NOT re-create the channel unless/until
          more events occur.</p>

        <tp:rationale>
          <p>The main motivating situation for this method is that when a Text
            channel with pending messages is closed with Close, it comes back
            as an incoming channel (to avoid a race between Close and an
            incoming message). If Destroy is called on a Text channel, the CM
            should delete all pending messages and close the channel, and
            the channel shouldn't be re-created until/unless another message
            arrives.</p>
        </tp:rationale>

        <p>Most clients SHOULD call
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">Channel.Close</tp:dbus-ref>
          instead. However, if a client explicitly intends to destroy the
          channel with possible loss of data, it SHOULD call this method
          if this interface is supported (according to the
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">Channel.Interfaces</tp:dbus-ref>
          property), falling back to Close if not.</p>

        <p>In particular, channel dispatchers SHOULD use this method if
          available when terminating channels that cannot be handled
          correctly (for instance, if no handler has been installed for
          a channel type, or if the handler crashes repeatedly).</p>

        <p>Connection managers do not need to implement this interface on
          channels where Close and Destroy would be equivalent.</p>

        <tp:rationale>
          <p>Callers need to be able to fall back to Close in any case.</p>
        </tp:rationale>
      </tp:docstring>
    </method>

  </interface>
</node>
<node name="/Channel_Interface_DTMF" xml:base="../spec/Channel_Interface_DTMF.xml">
  <tp:copyright>Copyright (C) 2005, 2006 Collabora Limited</tp:copyright>
  <tp:copyright>Copyright (C) 2005, 2006 Nokia Corporation</tp:copyright>
  <tp:copyright>Copyright (C) 2006 INdT</tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Channel.Interface.DTMF">
    <tp:requires interface="org.freedesktop.Telepathy.Channel.Type.StreamedMedia"/>

    <method name="StartTone" tp:name-for-bindings="Start_Tone">
      <arg direction="in" name="Stream_ID" tp:type="Stream_ID" type="u">
        <tp:docstring>A stream ID as defined in the StreamedMedia channel type.</tp:docstring>
      </arg>
      <arg direction="in" name="Event" tp:type="DTMF_Event" type="y">
        <tp:docstring>A numeric event code from the DTMF_Event enum.</tp:docstring>
      </arg>
      <tp:docstring>
        Start sending a DTMF tone on this stream. Where possible, the tone
        will continue until <tp:member-ref>StopTone</tp:member-ref> is called.
        On certain protocols, it may
        only be possible to send events with a predetermined length. In this
        case, the implementation may emit a fixed-length tone, and the StopTone
        method call should return NotAvailable.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument">
          <tp:docstring>
            The given stream ID was invalid.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable">
          <tp:docstring>
            The requested event is not available on this stream.
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <method name="StopTone" tp:name-for-bindings="Stop_Tone">
      <arg direction="in" name="Stream_ID" tp:type="Stream_ID" type="u">
        <tp:docstring>A stream ID as defined in the StreamedMedia channel type.</tp:docstring>
      </arg>
      <tp:docstring>
        Stop sending any DTMF tone which has been started using the
        <tp:member-ref>StartTone</tp:member-ref>
        method. If there is no current tone, this method will do nothing.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument">
          <tp:docstring>
            The given stream ID was invalid.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable">
          <tp:docstring>
            Continuous tones are not supported by this stream.
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <tp:enum name="DTMF_Event" type="y">
      <tp:enumvalue suffix="Digit_0" value="0">
        <tp:docstring>0</tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Digit_1" value="1">
        <tp:docstring>1</tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Digit_2" value="2">
        <tp:docstring>2</tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Digit_3" value="3">
        <tp:docstring>3</tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Digit_4" value="4">
        <tp:docstring>4</tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Digit_5" value="5">
        <tp:docstring>5</tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Digit_6" value="6">
        <tp:docstring>6</tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Digit_7" value="7">
        <tp:docstring>7</tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Digit_8" value="8">
        <tp:docstring>8</tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Digit_9" value="9">
        <tp:docstring>9</tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Asterisk" value="10">
        <tp:docstring>*</tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Hash" value="11">
        <tp:docstring>#</tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Letter_A" value="12">
        <tp:docstring>A</tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Letter_B" value="13">
        <tp:docstring>B</tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Letter_C" value="14">
        <tp:docstring>C</tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Letter_D" value="15">
        <tp:docstring>D</tp:docstring>
      </tp:enumvalue>
    </tp:enum>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      An interface that gives a Channel the ability to send DTMF events over
      audio streams which have been established using the StreamedMedia channel
      type. The event codes used are in common with those defined in <a href="http://www.rfc-editor.org/rfc/rfc4733.txt">RFC4733</a>, and are
      listed in the <tp:type>DTMF_Event</tp:type> enumeration.
    </tp:docstring>

  </interface>
</node>
<node name="/Channel_Interface_Group" xml:base="../spec/Channel_Interface_Group.xml">
  <tp:copyright>Copyright © 2005-2009 Collabora Limited</tp:copyright>
  <tp:copyright>Copyright © 2005-2009 Nokia Corporation</tp:copyright>
  <tp:copyright>Copyright © 2006 INdT</tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Channel.Interface.Group">
    <tp:requires interface="org.freedesktop.Telepathy.Channel"/>

    <tp:struct array-name="Local_Pending_Info_List" name="Local_Pending_Info">
      <tp:docstring>A structure representing a contact whose attempt to
        join a group is to be confirmed by the local user using
        <tp:member-ref>AddMembers</tp:member-ref>.</tp:docstring>
      <tp:member name="To_Be_Added" tp:type="Contact_Handle" type="u">
        <tp:docstring>
          The contact to be added to the group
        </tp:docstring>
      </tp:member>
      <tp:member name="Actor" tp:type="Contact_Handle" type="u">
        <tp:docstring>
          The contact requesting or causing the change
        </tp:docstring>
      </tp:member>
      <tp:member name="Reason" tp:type="Channel_Group_Change_Reason" type="u">
        <tp:docstring>
          The reason for the change
        </tp:docstring>
      </tp:member>
      <tp:member name="Message" type="s">
        <tp:docstring>
          A human-readable message from the Actor, or an empty string
          if there is no message
        </tp:docstring>
      </tp:member>
    </tp:struct>

    <method name="AddMembers" tp:name-for-bindings="Add_Members">
      <arg direction="in" name="Contacts" tp:type="Contact_Handle[]" type="au">
        <tp:docstring>
          An array of contact handles to invite to the channel
        </tp:docstring>
      </arg>
      <arg direction="in" name="Message" type="s">
        <tp:docstring>
          A string message, which can be blank if desired
        </tp:docstring>
      </arg>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Invite all the given contacts into the channel, or accept requests for
          channel membership for contacts on the pending local list.</p>

        <p>A message may be provided along with the request, which will be sent
        to the server if supported. See the CHANNEL_GROUP_FLAG_MESSAGE_ADD and
        CHANNEL_GROUP_FLAG_MESSAGE_ACCEPT
        <tp:member-ref>GroupFlags</tp:member-ref> to see in which cases this
        message should be provided.</p>

        <p>Attempting to add contacts who are already members is allowed;
          connection managers must silently accept this, without error.</p>
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotCapable"/>
        <tp:error name="org.freedesktop.Telepathy.Error.PermissionDenied"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle"/>
        <tp:error name="org.freedesktop.Telepathy.Error.Channel.Full"/>
        <tp:error name="org.freedesktop.Telepathy.Error.Channel.InviteOnly"/>
        <tp:error name="org.freedesktop.Telepathy.Error.Channel.Banned"/>
      </tp:possible-errors>
    </method>

    <method name="GetAllMembers" tp:name-for-bindings="Get_All_Members">
      <tp:deprecated version="0.17.6">Use GetAll on the D-Bus
        Properties D-Bus interface to get properties including Members,
        RemotePendingMembers and LocalPendingMembers instead, falling back to
        this method and GetLocalPendingMembersWithInfo if necessary.
      </tp:deprecated>

      <arg direction="out" name="Members" tp:type="Contact_Handle[]" type="au">
        <tp:docstring>
          array of handles of current members
        </tp:docstring>
      </arg>
      <arg direction="out" name="Local_Pending" tp:type="Contact_Handle[]" type="au">
        <tp:docstring>
          array of handles of local pending members
        </tp:docstring>
      </arg>
      <arg direction="out" name="Remote_Pending" tp:type="Contact_Handle[]" type="au">
        <tp:docstring>
          array of handles of remote pending members
        </tp:docstring>
      </arg>
      <tp:docstring>
        Returns arrays of all current, local and remote pending channel
        members.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
      </tp:possible-errors>
    </method>

    <tp:flags name="Channel_Group_Flags" type="u" value-prefix="Channel_Group_Flag">
      <tp:flag suffix="Can_Add" value="1">
        <tp:docstring>
            The <tp:member-ref>AddMembers</tp:member-ref> method can be used to
            add or invite members who are
            not already in the local pending list (which is always valid).
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="Can_Remove" value="2">
        <tp:docstring>
            The <tp:member-ref>RemoveMembers</tp:member-ref> method can be used
            to remove channel members
            (removing those on the pending local list is always valid).
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="Can_Rescind" value="4">
        <tp:docstring>
            The <tp:member-ref>RemoveMembers</tp:member-ref> method can be used
            on people on the remote
            pending list.
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="Message_Add" value="8">
        <tp:docstring>
            A message may be sent to the server when calling
            <tp:member-ref>AddMembers</tp:member-ref> on
            contacts who are not currently pending members.
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="Message_Remove" value="16">
        <tp:docstring>
            A message may be sent to the server when calling
            <tp:member-ref>RemoveMembers</tp:member-ref> on
            contacts who are currently channel members.
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="Message_Accept" value="32">
        <tp:docstring>
            A message may be sent to the server when calling
            <tp:member-ref>AddMembers</tp:member-ref> on
            contacts who are locally pending.
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="Message_Reject" value="64">
        <tp:docstring>
            A message may be sent to the server when calling
            <tp:member-ref>RemoveMembers</tp:member-ref> on
            contacts who are locally pending.
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="Message_Rescind" value="128">
        <tp:docstring>
            A message may be sent to the server when calling
            <tp:member-ref>RemoveMembers</tp:member-ref> on
            contacts who are remote pending.
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="Channel_Specific_Handles" value="256">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>
            The members of this group have handles which are specific to
            this channel, and are not valid as general-purpose handles on
            the connection. Depending on the channel, it may be possible to
            check the <tp:member-ref>HandleOwners</tp:member-ref> property or
            call <tp:member-ref>GetHandleOwners</tp:member-ref> to find the
            owners of these handles, which should be done if you wish to (e.g.)
            subscribe to the contact's presence.
          </p>

          <p>
            Connection managers must ensure that any given handle is not
            simultaneously a general-purpose handle and a channel-specific
            handle.
          </p>
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="Only_One_Group" value="512">
        <tp:docstring>
            Placing a contact in multiple groups of this type is not allowed
            and will raise NotAvailable (on services where contacts may only
            be in one user-defined group, user-defined groups will have
            this flag).
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="Handle_Owners_Not_Available" value="1024">
        <tp:docstring>
          In rooms with channel specific handles (ie Channel_Specific_Handles
          flag is set), this flag indicates that no handle owners are
          available, apart from the owner of the
          <tp:member-ref>SelfHandle</tp:member-ref>.

          <tp:rationale>
            This used to be an important optimization to avoid repeated
            GetHandleOwners calls, before we introduced the
            <tp:member-ref>HandleOwners</tp:member-ref> property and
            <tp:member-ref>HandleOwnersChanged</tp:member-ref> signal.
          </tp:rationale>
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="Properties" value="2048">
        <tp:docstring>
          This flag indicates that all the properties introduced in
          specification 0.17.6 are fully supported.
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="Members_Changed_Detailed" value="4096">
        <tp:docstring>
          Indicates that <tp:member-ref>MembersChangedDetailed</tp:member-ref>
          will be emitted for changes to this group's members in addition to
          <tp:member-ref>MembersChanged</tp:member-ref>.
          Clients can then connect to the former and ignore emission of the
          latter. This flag's state MUST NOT change over the lifetime of a
          channel.

          <tp:rationale>
            If it were allowed to change, client bindings would have to always
            connect to MembersChanged just in case the flag ever went away (and
            generally be unnecessarily complicated), which would mostly negate
            the point of having this flag in the first place.
          </tp:rationale>
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="Message_Depart" value="8192">
        <tp:added version="0.17.21"/>
        <tp:docstring>
          A message may be sent to the server when calling
          <tp:member-ref>RemoveMembers</tp:member-ref> on
          the <tp:member-ref>SelfHandle</tp:member-ref>.

          <tp:rationale>
            This would be set for XMPP Multi-User Chat or IRC channels,
            but not for a typical implementation of streamed media calls.
          </tp:rationale>
        </tp:docstring>
      </tp:flag>
    </tp:flags>

    <property access="read" name="GroupFlags" tp:name-for-bindings="Group_Flags" tp:type="Channel_Group_Flags" type="u">
      <tp:docstring>
        An integer representing the bitwise-OR of flags on this
        channel. The user interface can use this to present information about
        which operations are currently valid. Change notification is via
        the <tp:member-ref>GroupFlagsChanged</tp:member-ref> signal.
      </tp:docstring>
      <tp:added version="0.17.6">For backwards compatibility,
        clients should fall back to calling GetGroupFlags if
        Channel_Group_Flag_Properties is not present.</tp:added>
    </property>

    <method name="GetGroupFlags" tp:name-for-bindings="Get_Group_Flags">
      <arg direction="out" name="Group_Flags" tp:type="Channel_Group_Flags" type="u">
        <tp:docstring>
          The value of the GroupFlags property
        </tp:docstring>
      </arg>
      <tp:docstring>
        Returns the value of the <tp:member-ref>GroupFlags</tp:member-ref> property.
      </tp:docstring>
      <tp:deprecated version="0.17.6">Use GetAll on the D-Bus
        Properties D-Bus interface to get properties including GroupFlags
        instead, falling back to this method if necessary.</tp:deprecated>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
      </tp:possible-errors>
    </method>

    <tp:mapping name="Handle_Owner_Map">
      <tp:docstring>
        A map from channel-specific handles to their owners.
      </tp:docstring>
      <tp:added version="0.17.6">For backwards compatibility,
        clients should fall back to calling GetHandleOwners if
        Channel_Group_Flag_Properties is not present.</tp:added>

      <tp:member name="Channel_Specific_Handle" tp:type="Contact_Handle" type="u">
        <tp:docstring>
          A nonzero channel-specific handle
        </tp:docstring>
      </tp:member>
      <tp:member name="Global_Handle" tp:type="Contact_Handle" type="u">
        <tp:docstring>
          The global handle that owns the corresponding channel-specific
          handle, or 0 if this could not be determined
        </tp:docstring>
      </tp:member>
    </tp:mapping>

    <property access="read" name="HandleOwners" tp:name-for-bindings="Handle_Owners" tp:type="Handle_Owner_Map" type="a{uu}">
      <tp:docstring>
        A map from channel-specific handles to their owners, including
        at least all of the channel-specific handles in this channel's members,
        local-pending or remote-pending sets as keys. Any handle not in
        the keys of this mapping is not channel-specific in this channel.
        Handles which are channel-specific, but for which the owner is
        unknown, MUST appear in this mapping with 0 as owner. Change
        notification is via the
        <tp:member-ref>HandleOwnersChanged</tp:member-ref> signal.
      </tp:docstring>
      <tp:added version="0.17.6"/>
    </property>

    <signal name="HandleOwnersChanged" tp:name-for-bindings="Handle_Owners_Changed">
      <tp:docstring>
        Emitted whenever the <tp:member-ref>HandleOwners</tp:member-ref>
        property changes.
      </tp:docstring>
      <tp:added version="0.17.6">This signal should not be relied on
        unless Channel_Group_Flag_Properties is present.</tp:added>

      <arg name="Added" tp:type="Handle_Owner_Map" type="a{uu}">
        <tp:docstring>
          A map from channel-specific handles to their owners, in which the
          keys include all the handles that were added to the keys of the
          HandleOwners property, and all the handles in that property whose
          owner has changed
        </tp:docstring>
      </arg>
      <arg name="Removed" tp:type="Contact_Handle[]" type="au">
        <tp:docstring>
          The channel-specific handles that were removed from the keys of the
          HandleOwners property, as a result of the contact leaving this group
          in a previous <tp:member-ref>MembersChanged</tp:member-ref> signal
        </tp:docstring>
      </arg>
    </signal>

    <method name="GetHandleOwners" tp:name-for-bindings="Get_Handle_Owners">
      <arg direction="in" name="Handles" tp:type="Contact_Handle[]" type="au">
        <tp:docstring>
          A list of integer handles representing members of the channel
        </tp:docstring>
      </arg>
      <arg direction="out" name="Owners" tp:type="Contact_Handle[]" type="au">
        <tp:docstring>
          An array of integer handles representing the owner handles of
          the given room members, in the same order, or 0 if the
          owner is not available
        </tp:docstring>
      </arg>
      <tp:docstring>
        If the CHANNEL_GROUP_FLAG_CHANNEL_SPECIFIC_HANDLES flag is set on
        the channel, then the handles of the group members are specific
        to this channel, and are not meaningful in a connection-wide
        context such as contact lists. This method allows you to find
        the owner of the handle if it can be discovered in this channel,
        or 0 if the owner is not available.
      </tp:docstring>
      <tp:deprecated version="0.17.6">Clients should use the
        HandleOwners property and HandleOwnersChanged signal if
        Channel_Group_Flag_Properties is present.</tp:deprecated>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable">
          <tp:docstring>
            This channel doesn't have the CHANNEL_SPECIFIC_HANDLES flag,
            so handles in this channel are globally meaningful and calling
            this method is not necessary
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument">
          <tp:docstring>
            One of the given handles is not a member
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <method name="GetLocalPendingMembers" tp:name-for-bindings="Get_Local_Pending_Members">
      <arg direction="out" name="Handles" tp:type="Contact_Handle[]" type="au"/>
      <tp:docstring>
        Returns the To_Be_Added handle (only) for each structure in the
        <tp:member-ref>LocalPendingMembers</tp:member-ref> property.
      </tp:docstring>
      <tp:deprecated version="0.17.6">Use the LocalPendingMembers
        property, if Channel_Group_Flag_Properties is present.</tp:deprecated>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
      </tp:possible-errors>
    </method>

    <method name="GetLocalPendingMembersWithInfo" tp:name-for-bindings="Get_Local_Pending_Members_With_Info">
      <tp:added version="0.15.0"/>
      <tp:docstring>
        Returns the <tp:member-ref>LocalPendingMembers</tp:member-ref> property.
      </tp:docstring>
      <tp:deprecated version="0.17.6">Use the LocalPendingMembers
        property, if Channel_Group_Flag_Properties is present.</tp:deprecated>
      <arg direction="out" name="Info" tp:type="Local_Pending_Info[]" type="a(uuus)">
        <tp:docstring>
          An array of structs containing:
          <ul>
            <li>
              A handle representing the contact requesting channel membership
            </li>
            <li>
              A handle representing the contact making the request, or 0 if
              unknown
            </li>
            <li>
              The reason for the request: one of the values of
              <tp:type>Channel_Group_Change_Reason</tp:type>
            </li>
            <li>
              A string message containing the reason for the request if any (or
              blank if none)
            </li>
          </ul>
        </tp:docstring>
      </arg>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
      </tp:possible-errors>
    </method>

    <property access="read" name="LocalPendingMembers" tp:name-for-bindings="Local_Pending_Members" tp:type="Local_Pending_Info[]" type="a(uuus)">
      <tp:docstring>
        An array of structs containing handles representing contacts
        requesting channel membership and awaiting local approval with
        <tp:member-ref>AddMembers</tp:member-ref>.
      </tp:docstring>
      <tp:added version="0.17.6">If Channel_Group_Flag_Properties is
        not present, clients should fall back to using the
        deprecated GetLocalPendingMembersWithInfo method, or fall back
        from that to the deprecated GetAllMembers method.</tp:added>
    </property>

    <property access="read" name="Members" tp:name-for-bindings="Members" tp:type="Contact_Handle[]" type="au">
      <tp:docstring>
        The members of this channel.
      </tp:docstring>
      <tp:added version="0.17.6">If Channel_Group_Flag_Properties
        is not set, fall back to calling GetAllMembers.</tp:added>
    </property>

    <method name="GetMembers" tp:name-for-bindings="Get_Members">
      <arg direction="out" name="Handles" tp:type="Contact_Handle[]" type="au"/>
      <tp:docstring>
        Returns the <tp:member-ref>Members</tp:member-ref> property.
      </tp:docstring>
      <tp:deprecated version="0.17.6">Use the Members
        property, if Channel_Group_Flag_Properties is present.</tp:deprecated>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
      </tp:possible-errors>
    </method>

    <property access="read" name="RemotePendingMembers" tp:name-for-bindings="Remote_Pending_Members" tp:type="Contact_Handle[]" type="au">
      <tp:docstring>
        An array of handles representing contacts who have been
        invited to the channel and are awaiting remote approval.
      </tp:docstring>
      <tp:added version="0.17.6">If Channel_Group_Flag_Properties
        is not set, fall back to calling GetAllMembers.</tp:added>
    </property>

    <method name="GetRemotePendingMembers" tp:name-for-bindings="Get_Remote_Pending_Members">
      <arg direction="out" name="Handles" tp:type="Contact_Handle[]" type="au"/>
      <tp:docstring>
        Returns an array of handles representing contacts who have been
        invited to the channel and are awaiting remote approval.
      </tp:docstring>
      <tp:deprecated version="0.17.6">Use the
        <tp:member-ref>RemotePendingMembers</tp:member-ref>
        property, if Channel_Group_Flag_Properties is present.</tp:deprecated>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
      </tp:possible-errors>
    </method>

    <signal name="SelfHandleChanged" tp:name-for-bindings="Self_Handle_Changed">
      <tp:docstring>
        Emitted whenever the <tp:member-ref>SelfHandle</tp:member-ref> property
        changes.
      </tp:docstring>
      <tp:added version="0.17.6">This signal should not be relied on
        unless Channel_Group_Flag_Properties is present.</tp:added>

      <arg name="Self_Handle" tp:type="Contact_Handle" type="u">
        <tp:docstring>
          The new value of the SelfHandle property.
        </tp:docstring>
      </arg>
    </signal>

    <property access="read" name="SelfHandle" tp:name-for-bindings="Self_Handle" tp:type="Contact_Handle" type="u">
      <tp:docstring>
        The handle for the user on this channel (which can also be a
        local or remote pending member), or 0 if the user is not a member at
        all (which is likely to be the case, for instance, on <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type">ContactList</tp:dbus-ref>
        channels). Note that this is different from the result of
        <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection.GetSelfHandle</tp:dbus-ref>
        on some protocols, so the value of this handle should
        always be used with the methods of this interface.
      </tp:docstring>
      <tp:added version="0.17.6">For backwards compatibility,
        clients should fall back to calling GetSelfHandle if
        Channel_Group_Flag_Properties is not present.</tp:added>
    </property>

    <method name="GetSelfHandle" tp:name-for-bindings="Get_Self_Handle">
      <arg direction="out" name="Self_Handle" tp:type="Contact_Handle" type="u"/>
      <tp:docstring>
        Returns the value of the <tp:member-ref>SelfHandle</tp:member-ref>
        property.
      </tp:docstring>
      <tp:deprecated version="0.17.6">Clients should retrieve the
        SelfHandle property using GetAll instead,
        if Channel_Group_Flag_Properties is present.</tp:deprecated>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
      </tp:possible-errors>
    </method>

    <signal name="GroupFlagsChanged" tp:name-for-bindings="Group_Flags_Changed">
      <arg name="Added" tp:type="Channel_Group_Flags" type="u">
        <tp:docstring>
          A bitwise OR of the flags which have been set
        </tp:docstring>
      </arg>
      <arg name="Removed" tp:type="Channel_Group_Flags" type="u">
        <tp:docstring>
          A bitwise OR of the flags which have been cleared
        </tp:docstring>
      </arg>
      <tp:docstring>
        Emitted when the flags as returned by
        <tp:member-ref>GetGroupFlags</tp:member-ref> are changed.
        The user interface should be updated as appropriate.
      </tp:docstring>
    </signal>

    <tp:enum name="Channel_Group_Change_Reason" type="u">
      <tp:enumvalue suffix="None" value="0">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>No reason was provided for this change.</p>

          <p>In particular, this reason SHOULD be used when representing
            users joining a named chatroom in the usual way, users leaving
            a chatroom by their own request, and normal termination of a
            StreamedMedia call by the remote user.</p>

          <p>If the <tp:member-ref>SelfHandle</tp:member-ref> is removed from
            a group for this reason and the actor is not the SelfHandle, the
            equivalent D-Bus error is
            <code>org.freedesktop.Telepathy.Error.Terminated</code>.</p>

          <p>If the SelfHandle is removed from a group for this reason and
            the actor is also the SelfHandle, the equivalent D-Bus error is
            <code>org.freedesktop.Telepathy.Error.Cancelled</code>.</p>
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Offline" value="1">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The change is due to a user going offline. Also used when
            user is already offline, but this wasn't known previously.</p>

          <p>If a one-to-one <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type">StreamedMedia</tp:dbus-ref>
            call fails because the contact being called is offline, the
            connection manager SHOULD indicate this by removing both the
            <tp:member-ref>SelfHandle</tp:member-ref> and the other contact's
            handle from the Group interface with reason Offline.</p>

          <tp:rationale>
            For 1-1 calls, the call terminates as a result of removing the
            remote contact, so the SelfHandle should be removed at the same
            time as the remote contact and for the same reason.
          </tp:rationale>

          <p>If a handle is removed from a group for this reason, the
            equivalent D-Bus error is
            <code>org.freedesktop.Telepathy.Error.Offline</code>.</p>
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Kicked" value="2">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The change is due to a kick operation.</p>

          <p>If the <tp:member-ref>SelfHandle</tp:member-ref> is removed
            from a group for this reason, the equivalent D-Bus error is
            <code>org.freedesktop.Telepathy.Error.Channel.Kicked</code>.
          </p>
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Busy" value="3">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The change is due to a busy indication.</p>

          <p>If a one-to-one <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type">StreamedMedia</tp:dbus-ref>
            call fails because the contact being called is busy, the
            connection manager SHOULD indicate this by removing both the
            <tp:member-ref>SelfHandle</tp:member-ref> and the other contact's
            handle from the Group interface with reason Busy.</p>

          <tp:rationale>
            For 1-1 calls, the call terminates as a result of removing the
            remote contact, so the SelfHandle should be removed at the same
            time as the remote contact and for the same reason.
          </tp:rationale>

          <p>If the <tp:member-ref>SelfHandle</tp:member-ref> is removed
            from a group for this reason, the equivalent D-Bus error is
            <code>org.freedesktop.Telepathy.Error.Busy</code>.
          </p>
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Invited" value="4">
        <tp:docstring>
          The change is due to an invitation. This reason SHOULD only be used
          when contacts are added to the remote-pending set (to indicate that
          the contact has been invited) or to the members (to indicate that
          the contact has accepted the invitation).

          <tp:rationale>
            Otherwise, what would it mean?
          </tp:rationale>
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Banned" value="5">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The change is due to a kick+ban operation.</p>

          <p>If the <tp:member-ref>SelfHandle</tp:member-ref> is removed
            from a group for this reason, the equivalent D-Bus error is
            <code>org.freedesktop.Telepathy.Error.Channel.Banned</code>.
          </p>
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Error" value="6">
        <tp:docstring>
            The change is due to an error occurring.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Invalid_Contact" value="7">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The change is because the requested contact does not exist.</p>

          <p>For instance, if the user invites a nonexistent contact to a
            chatroom or attempts to call a nonexistent contact, this could
            be indicated by the CM adding that contact's handle to
            remote-pending for reason None or Invited, then removing it for
            reason Invalid_Contact. In the case of a 1-1 StreamedMedia
            call, the CM SHOULD remove the self handle from the Group
            in the same signal.</p>

          <tp:rationale>
            For 1-1 calls, the call terminates as a result of removing the
            remote contact, so the SelfHandle should be removed at the same
            time as the remote contact and for the same reason.
          </tp:rationale>

          <p>If a contact is removed from a group for this reason, the
            equivalent D-Bus error is
            <code>org.freedesktop.Telepathy.Error.DoesNotExist</code>.
          </p>
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="No_Answer" value="8">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The change is because the requested contact did not respond.</p>

          <p>If a one-to-one <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type">StreamedMedia</tp:dbus-ref>
            call fails because the contact being called did not respond, the
            connection manager SHOULD indicate this by removing both the
            <tp:member-ref>SelfHandle</tp:member-ref> and the other contact's
            handle from the Group interface with reason No_Answer.</p>

          <tp:rationale>
            Documenting existing practice.
          </tp:rationale>

          <p>If a contact is removed from a group for this reason, the
            equivalent D-Bus error is
            <code>org.freedesktop.Telepathy.Error.NoAnswer</code>.
          </p>
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Renamed" value="9">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The change is because a contact's unique identifier changed.
          There must be exactly one handle in the removed set and exactly
          one handle in one of the added sets. The <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection.Interface.Renaming">Renamed</tp:dbus-ref>
          signal on the
          <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection.Interface">Renaming</tp:dbus-ref>
          interface will have been emitted for the same handles,
          shortly before this <tp:member-ref>MembersChanged</tp:member-ref> signal is emitted.</p>
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Permission_Denied" value="10">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The change is because there was no permission to contact the
            requested handle.</p>

          <p>If a contact is removed from a group for this reason, the
            equivalent D-Bus error is
            <code>org.freedesktop.Telepathy.Error.PermissionDenied</code>.
          </p>
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Separated" value="11">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>If members are removed with this reason code, the change is
            because the group has split into unconnected parts which can only
            communicate within themselves (e.g. netsplits on IRC use this
            reason code).
          </p>
          <p>
            If members are added with this reason code, the change is because
            unconnected parts of the group have rejoined. If this channel
            carries messages (e.g. <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type">Text</tp:dbus-ref>
            or <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type">Tubes</tp:dbus-ref>
            channels) applications must
            assume that the contacts being added are likely to have missed some
            messages as a result of the separation, and that the contacts
            in the group are likely to have missed some messages from the
            contacts being added.
          </p>
          <p>Note that from the added contacts' perspective, they have been
            in the group all along, and the contacts we indicate to be in
            the group (including the local user) have just rejoined
            the group with reason Separated. Application protocols in Tubes
            should be prepared to cope with this situation.
          </p>

          <p>The <tp:member-ref>SelfHandle</tp:member-ref> SHOULD NOT be
            removed from channels with this reason.</p>
        </tp:docstring>
      </tp:enumvalue>
    </tp:enum>

    <signal name="MembersChanged" tp:name-for-bindings="Members_Changed">
      <arg name="Message" type="s">
        <tp:docstring>
          A string message from the server, or blank if not
        </tp:docstring>
      </arg>
      <arg name="Added" tp:type="Contact_Handle[]" type="au">
        <tp:docstring>
          A list of members added to the channel
        </tp:docstring>
      </arg>
      <arg name="Removed" tp:type="Contact_Handle[]" type="au">
        <tp:docstring>
          A list of members removed from the channel
        </tp:docstring>
      </arg>
      <arg name="Local_Pending" tp:type="Contact_Handle[]" type="au">
        <tp:docstring>
          A list of members who are pending local approval
        </tp:docstring>
      </arg>
      <arg name="Remote_Pending" tp:type="Contact_Handle[]" type="au">
        <tp:docstring>
          A list of members who are pending remote approval
        </tp:docstring>
      </arg>
      <arg name="Actor" tp:type="Contact_Handle" type="u">
        <tp:docstring>
          The contact handle of the person who made the change, or 0
          if not known
        </tp:docstring>
      </arg>
      <arg name="Reason" tp:type="Channel_Group_Change_Reason" type="u">
        <tp:docstring>
          A reason for the change
        </tp:docstring>
      </arg>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Emitted when contacts join any of the three lists (members, local
          pending or remote pending) or when they leave any of the three lists.
          There may also be a message from the server regarding this change,
          which may be displayed to the user if desired.</p>

        <p>All channel-specific handles that are mentioned in this signal
          MUST be represented in the value of the
          <tp:member-ref>HandleOwners</tp:member-ref> property.
          In practice, this will mean that
          <tp:member-ref>HandleOwnersChanged</tp:member-ref> is
          emitted <em>before</em> emitting a MembersChanged signal in which
          channel-specific handles are added, but that it is emitted
          <em>after</em> emitting a MembersChanged signal in which
          channel-specific handles are removed.</p>
      </tp:docstring>
    </signal>

    <tp:mapping name="Handle_Identifier_Map">
      <tp:docstring>
        A map from handles to the corresponding normalized string identifier.
      </tp:docstring>
      <tp:added version="0.17.17"/>

      <tp:member name="Handle" tp:type="Contact_Handle" type="u">
        <tp:docstring>
          A nonzero handle
        </tp:docstring>
      </tp:member>
      <tp:member name="Identifier" type="s">
        <tp:docstring>
          The same string that would be returned by <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection">InspectHandles</tp:dbus-ref>
          for this handle.
        </tp:docstring>
      </tp:member>
    </tp:mapping>

    <signal name="MembersChangedDetailed" tp:name-for-bindings="Members_Changed_Detailed">
      <arg name="Added" tp:type="Contact_Handle[]" type="au">
        <tp:docstring>
          A list of members added to the channel
        </tp:docstring>
      </arg>
      <arg name="Removed" tp:type="Contact_Handle[]" type="au">
        <tp:docstring>
          A list of members removed from the channel
        </tp:docstring>
      </arg>
      <arg name="Local_Pending" tp:type="Contact_Handle[]" type="au">
        <tp:docstring>
          A list of members who are pending local approval
        </tp:docstring>
      </arg>
      <arg name="Remote_Pending" tp:type="Contact_Handle[]" type="au">
        <tp:docstring>
          A list of members who are pending remote approval
        </tp:docstring>
      </arg>
      <arg name="Details" tp:type="String_Variant_Map" type="a{sv}">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>Information about the change, which may include the following
            well-known keys:</p>

          <dl>
            <dt>actor (u — <tp:type>Contact_Handle</tp:type>)</dt>
            <dd>The contact handle of the person who made the change; 0 or
              omitted if unknown or not applicable.</dd>

            <dt>change-reason (u — <tp:type>Channel_Group_Change_Reason</tp:type>)</dt>
            <dd>A reason for the change.</dd>

            <dt>contact-ids (a{us} — <tp:type>Handle_Identifier_Map</tp:type>)</dt>
            <dd>
              <p>The string identifiers for handles mentioned in this signal, to
              give clients the minimal information necessary to react to the
              event without waiting for round-trips.  Connection managers
              SHOULD include the identifiers for members added to the group and
              for the actor (if any); they MAY omit the identifiers for handles
              which have been removed from the group.</p>

              <tp:rationale>
                <p>On IRC, an event such as a netsplit could cause the vast
                majority of a channel to leave.  Given that clients should
                already know the identifiers of a channel's members, including
                potentially hundreds of strings in the netsplit signal is
                unnecessary.</p>
              </tp:rationale>

              <p>Clients MUST NOT assume that the presence or absence of a
                handle in this mapping is meaningful. This mapping is merely
                an optimization for round-trip reduction, and connection
                managers MAY add additional handles, omit some handles, or
                omit the mapping completely.</p>
            </dd>

            <dt>message (s)</dt>
            <dd>A string message from the server regarding the change</dd>

            <dt>error (s — <tp:type>DBus_Error_Name</tp:type>)</dt>
            <dd>A (possibly implementation-specific) DBus error describing the
              change, providing more specific information than the
              <tp:type>Channel_Group_Change_Reason</tp:type> enum allows. This
              MUST only be present if it is strictly more informative than
              'change-reason'; if present, 'change-reason' MUST be set to the
              closest available reason.

              <tp:rationale>
                A SIP connection manager might want to signal &quot;402 Payment
                required&quot; as something more specific than Error or
                Permission_Denied so that a SIP-aware UI could handle it
                specially; including a namespaced error permits this to be done
                without <tp:type>Channel_Group_Change_Reason</tp:type> being
                extended to encompass every error any CM ever wants to report.
              </tp:rationale>
            </dd>

            <dt>debug-message (s)</dt>
            <dd>Debugging information on the change. SHOULD NOT be shown to
              users in normal circumstances.</dd>
          </dl>
        </tp:docstring>
      </arg>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Emitted when contacts join any of the three lists (members, local
          pending or remote pending) or when they leave any of the three
          lists. This signal provides a superset of the information provided by
          <tp:member-ref>MembersChanged</tp:member-ref>;
          if the channel's <tp:member-ref>GroupFlags</tp:member-ref>
          contains Members_Changed_Detailed, then clients may listen exclusively
          to this signal in preference to that signal.</p>

        <p>All channel-specific handles that are mentioned in this signal
          MUST be represented in the value of the
          <tp:member-ref>HandleOwners</tp:member-ref> property.  In practice,
          this will mean that
          <tp:member-ref>HandleOwnersChanged</tp:member-ref> is emitted
          <em>before</em> emitting a MembersChangedDetailed signal in which
          channel-specific handles are added, but that it is emitted
          <em>after</em> emitting a MembersChangedDetailed signal in which
          channel-specific handles are removed.</p>
      </tp:docstring>
      <tp:added version="0.17.16"/>
    </signal>

    <method name="RemoveMembers" tp:name-for-bindings="Remove_Members">
      <arg direction="in" name="Contacts" tp:type="Contact_Handle[]" type="au">
        <tp:docstring>
          An array of contact handles to remove from the channel
        </tp:docstring>
      </arg>
      <arg direction="in" name="Message" type="s">
        <tp:docstring>
          A string message, which can be blank if desired
        </tp:docstring>
      </arg>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Requests the removal of contacts from a channel, reject their
          request for channel membership on the pending local list, or
          rescind their invitation on the pending remote list.</p>

        <p>If the <tp:member-ref>SelfHandle</tp:member-ref> is in a Group,
          it can be removed via this method, in order to leave the group
          gracefully. This is the recommended way to leave a chatroom, close
          or reject a <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type">StreamedMedia</tp:dbus-ref>
          call, and so on.</p>

        <p>Accordingly, connection managers SHOULD support
          doing this, regardless of the value of
          <tp:member-ref>GroupFlags</tp:member-ref>.
          If doing so fails with PermissionDenied, this is considered to a bug
          in the connection manager, but clients MUST recover by falling back
          to closing the channel with the <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel">Close</tp:dbus-ref>
          method.</p>

        <p>Removing any contact from the local pending list is always
          allowed. Removing contacts other than the
          <tp:member-ref>SelfHandle</tp:member-ref> from the channel's members
          is allowed if and only if Channel_Group_Flag_Can_Remove is in the
          <tp:member-ref>GroupFlags</tp:member-ref>,
          while removing contacts other than the
          <tp:member-ref>SelfHandle</tp:member-ref> from the remote pending list
          is allowed if and only if Channel_Group_Flag_Can_Rescind is in the
          <tp:member-ref>GroupFlags</tp:member-ref>.</p>

        <p>A message may be provided along with the request, which will be
          sent to the server if supported. See the
          Channel_Group_Flag_Message_Remove,
          Channel_Group_Flag_Message_Depart,
          Channel_Group_Flag_Message_Reject and
          Channel_Group_Flag_Message_Rescind
          <tp:member-ref>GroupFlags</tp:member-ref> to see in which cases this
          message should be provided.</p>
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable"/>
        <tp:error name="org.freedesktop.Telepathy.Error.PermissionDenied"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle"/>
      </tp:possible-errors>
    </method>

    <method name="RemoveMembersWithReason" tp:name-for-bindings="Remove_Members_With_Reason">
      <arg direction="in" name="Contacts" tp:type="Contact_Handle[]" type="au">
        <tp:docstring>
          An array of contact handles to remove from the channel
        </tp:docstring>
      </arg>
      <arg direction="in" name="Message" type="s">
        <tp:docstring>
          A string message, which can be blank if desired
        </tp:docstring>
      </arg>
      <arg direction="in" name="Reason" tp:type="Channel_Group_Change_Reason" type="u">
        <tp:docstring>
          A reason for the change
        </tp:docstring>
      </arg>
      <tp:docstring>
        As <tp:member-ref>RemoveMembers</tp:member-ref>, but a reason code may
        be provided where
        appropriate. The reason code may be ignored if the underlying
        protocol is unable to represent the given reason.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable"/>
        <tp:error name="org.freedesktop.Telepathy.Error.PermissionDenied"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument">
          <tp:docstring>
            The provided reason code was invalid.
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>Interface for channels which have multiple members, and where the members
    of the channel can change during its lifetime. Your presence in the channel
    cannot be presumed by the channel's existence (for example, a channel you
    may request membership of but your request may not be granted).</p>

  <p>This interface implements three lists: a list of current members
    (<tp:member-ref>Members</tp:member-ref>), and two lists of local pending
    and remote pending members
    (<tp:member-ref>LocalPendingMembers</tp:member-ref> and
    <tp:member-ref>RemotePendingMembers</tp:member-ref>, respectively).
    Contacts on the remote
    pending list have been invited to the channel, but the remote user has not
    accepted the invitation. Contacts on the local pending list have requested
    membership of the channel, but the local user of the framework must accept
    their request before they may join. A single contact should never appear on
    more than one of the three lists. The lists are empty when the channel is
    created, and the <tp:member-ref>MembersChanged</tp:member-ref> signal
    (and, if the channel's <tp:member-ref>GroupFlags</tp:member-ref> contains
    Members_Changed_Detailed, the
    <tp:member-ref>MembersChangedDetailed</tp:member-ref> signal)
    should be emitted when information
    is retrieved from the server, or changes occur.</p>

  <p>If the <tp:member-ref>MembersChanged</tp:member-ref> or
    <tp:member-ref>MembersChangedDetailed</tp:member-ref> signal indicates
    that the <tp:member-ref>SelfHandle</tp:member-ref> has been removed from
    the channel, and the channel subsequently emits <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel">Closed</tp:dbus-ref>,
    clients SHOULD consider the details given in the MembersChanged or
    MembersChangedDetailed signal to be the reason why the channel closed.</p>

  <p>Addition of members to the channel may be requested by using
    <tp:member-ref>AddMembers</tp:member-ref>. If
    remote acknowledgement is required, use of the AddMembers method will cause
    users to appear on the remote pending list. If no acknowledgement is
    required, AddMembers will add contacts to the member list directly.  If a
    contact is awaiting authorisation on the local pending list, AddMembers
    will grant their membership request.</p>

  <p>Removal of contacts from the channel may be requested by using
    <tp:member-ref>RemoveMembers</tp:member-ref>.  If a contact is awaiting
    authorisation on the local pending
    list, RemoveMembers will refuse their membership request. If a contact is
    on the remote pending list but has not yet accepted the invitation,
    RemoveMembers will rescind the request if possible.</p>

  <p>It should not be presumed that the requester of a channel implementing this
    interface is immediately granted membership, or indeed that they are a
    member at all, unless they appear in the list. They may, for instance,
    be placed into the remote pending list until a connection has been
    established or the request acknowledged remotely.</p>

  <p>If the local user joins a Group channel whose members or other state
    cannot be discovered until the user joins (e.g. many chat room
    implementations), the connection manager should ensure that the channel
    is, as far as possible, in a consistent state before adding the local
    contact to the members set; until this happens, the local contact should
    be in the remote-pending set. For instance, if the connection manager
    queries the server to find out the initial members list for the
    channel, it should leave the local contact in the remote-pending set
    until it has finished receiving the initial members list.
  </p>

  <p>If the protocol provides no reliable way to tell whether the complete
    initial members list has been received yet, the connection manager
    should make a best-effort attempt to wait for the full list
    (in the worst case, waiting for a suitable arbitrary timeout)
    rather than requiring user interfaces to do so on its behalf.</p>
    </tp:docstring>
  </interface>
</node>
<node name="/Channel_Interface_Hold" xml:base="../spec/Channel_Interface_Hold.xml">
  <tp:copyright> Copyright (C) 2005-2008 Collabora Limited </tp:copyright>
  <tp:copyright> Copyright (C) 2005-2008 Nokia Corporation </tp:copyright>
  <tp:copyright> Copyright (C) 2006 INdT </tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
  </tp:license>

  <interface name="org.freedesktop.Telepathy.Channel.Interface.Hold">
    <tp:requires interface="org.freedesktop.Telepathy.Channel.Type.StreamedMedia"/>
    <tp:changed version="0.17.4">first API-stable version</tp:changed>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>Interface for channels where you may put the channel on hold.
        This only makes sense for channels where
        you are streaming media to or from the members. (To see whether the
        other participant has put you on hold, see <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Interface">CallState</tp:dbus-ref>.)</p>

      <p>If you place a channel on hold, this indicates that you do not wish
        to be sent media streams by any of its members and will be ignoring
        any media streams you continue to receive. It also requests that the
        connection manager free up any resources that are only needed for
        an actively used channel (e.g. in a GSM or PBX call, it will be
        necessary to place an active call on hold before you can start
        another call).</p>
    </tp:docstring>

    <method name="GetHoldState" tp:name-for-bindings="Get_Hold_State">
      <tp:docstring>
        Return whether the local user has placed the channel on hold.
      </tp:docstring>

      <arg direction="out" name="HoldState" tp:type="Local_Hold_State" type="u">
        <tp:docstring>
          The state of the channel
        </tp:docstring>
      </arg>

      <arg direction="out" name="Reason" tp:type="Local_Hold_State_Reason" type="u">
        <tp:docstring>
          The reason why the channel is in that state
        </tp:docstring>
      </arg>
    </method>

    <signal name="HoldStateChanged" tp:name-for-bindings="Hold_State_Changed">
      <tp:docstring>
        Emitted to indicate that the hold state has changed for this channel.
        This may occur as a consequence of you requesting a change with
        <tp:member-ref>RequestHold</tp:member-ref>, or the state changing as a
        result of a request from
        another process.
      </tp:docstring>

      <arg name="HoldState" tp:type="Local_Hold_State" type="u">
        <tp:docstring>
          The state of the channel
        </tp:docstring>
      </arg>

      <arg name="Reason" tp:type="Local_Hold_State_Reason" type="u">
        <tp:docstring>
          The reason for the state change
        </tp:docstring>
      </arg>
    </signal>

    <tp:enum name="Local_Hold_State" type="u">
      <tp:docstring>
        The hold state of a channel.
      </tp:docstring>

      <tp:enumvalue suffix="Unheld" value="0">
        <tp:docstring>
          All streams are unheld (the call is active). New channels SHOULD
          have this hold state.
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Held" value="1">
        <tp:docstring>
          All streams are held (the call is on hold)
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Pending_Hold" value="2">
        <tp:docstring>
          The connection manager is attempting to move to state Held, but
          has not yet completed that operation. It is unspecified whether
          any, all or none of the streams making up the channel are on hold.
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Pending_Unhold" value="3">
        <tp:docstring>
          The connection manager is attempting to move to state Held, but
          has not yet completed that operation. It is unspecified whether
          any, all or none of the streams making up the channel are on hold.
        </tp:docstring>
      </tp:enumvalue>
    </tp:enum>

    <tp:enum name="Local_Hold_State_Reason" type="u">
      <tp:docstring>
        The reason for a change to the Local_Hold_State. Clients MUST
        treat unknown values as equivalent to Local_Hold_State_Reason_None.
      </tp:docstring>

      <tp:enumvalue suffix="None" value="0">
        <tp:docstring>
          The reason cannot be described by any of the predefined values
          (connection managers SHOULD avoid this reason, but clients MUST
          handle it gracefully)
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Requested" value="1">
        <tp:docstring>
          The change is in response to a user request
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Resource_Not_Available" value="2">
        <tp:docstring>
          The change is because some resource was not available
        </tp:docstring>
      </tp:enumvalue>
    </tp:enum>

    <method name="RequestHold" tp:name-for-bindings="Request_Hold">
      <arg direction="in" name="Hold" type="b">
        <tp:docstring>
          A boolean indicating whether or not the channel should be on hold
        </tp:docstring>
      </arg>

      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Request that the channel be put on hold (be instructed not to send
          any media streams to you) or be taken off hold.</p>

        <p>If the connection manager can immediately tell that the requested
          state change could not possibly succeed, this method SHOULD
          return the NotAvailable error. If the requested state is the
          same as the current state, this method SHOULD return successfully
          without doing anything.</p>

        <p>Otherwise, this method SHOULD immediately set the hold state to
          Local_Hold_State_Pending_Hold or Local_Hold_State_Pending_Unhold
          (as appropriate), emitting
          <tp:member-ref>HoldStateChanged</tp:member-ref> if this is a change,
          and return successfully.</p>

        <p>The eventual success or failure of the request is indicated by a
          subsequent HoldStateChanged signal, changing the hold state to
          Local_Hold_State_Held or Local_Hold_State_Unheld.</p>

        <p>If the channel has multiple streams, and the connection manager
          succeeds in changing the hold state of one stream but fails to
          change the hold state of another, it SHOULD attempt to revert
          all streams to their previous hold states.</p>

        <p>The following state transitions SHOULD be used, where
          appropriate:</p>

        <ul>
          <li>Successful hold:
            (Unheld, any reason) → (Pending_Hold, Requested) →
            (Held, Requested)
          </li>
          <li>Successful unhold:
            (Held, any reason) → (Pending_Unhold, Requested) →
            (Unheld, Requested)
          </li>
          <li>Attempting to unhold fails at the first attempt to acquire a
            resource:
            (Held, any reason) → (Pending_Unhold, Requested) →
            (Held, Resource_Not_Available)
          </li>
          <li>Attempting to unhold acquires one resource, but fails to acquire
            a second, and takes time to release the first:
            (Held, any reason) → (Pending_Unhold, Requested) →
            (Pending_Hold, Resource_Not_Available) →
            (Held, Resource_Not_Available)
          </li>
        </ul>
      </tp:docstring>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable">
          <tp:docstring>
            The requested hold state cannot be achieved; for example,
            if only a limited number of channels can be in the &quot;not on hold&quot;
            state, attempts to exceed this number will raise NotAvailable.
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

  </interface>
</node>
<node name="/Channel_Interface_Media_Signalling" xml:base="../spec/Channel_Interface_Media_Signalling.xml">
  <tp:copyright> Copyright © 2005-2009 Collabora Limited </tp:copyright>
  <tp:copyright> Copyright © 2005-2009 Nokia Corporation </tp:copyright>
  <tp:copyright> Copyright © 2006 INdT </tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Channel.Interface.MediaSignalling">
    <tp:requires interface="org.freedesktop.Telepathy.Channel"/>
    <tp:requires interface="org.freedesktop.Telepathy.Channel.Type.StreamedMedia"/>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>An interface for signalling a channel containing synchronised media
        sessions which can contain an arbitrary number of streams. The
        presence of this interface on a Channel indicates that the connection
        manager will not carry out the actual streaming for this channel,
        and that the client handling the channel is responsible for doing
        so; in most cases we recommend doing this by using the
        telepathy-farsight library.</p>

      <tp:rationale>
        <p>Streaming audio and (particularly) video requires a high level of
          integration with the UI, and having the connection manager act as
          a proxy would be likely to introduce unacceptable latency. As a
          result, audio/video streaming is offloaded into the client
          where possible, as an exception to the general design of
          Telepathy.</p>
      </tp:rationale>

      <p>The negotiation interface is based on the API of the
        <a href="http://farsight.freedesktop.org/">Farsight</a> library.
        This, in turn, is based upon the IETF MMusic ICE drafts, where
        connections are established by signalling potential connection
        candidates to the peer until a usable connection is found, and
        codecs are negotiated with an SDP-style offer and answer. However,
        the principles should be applicable to other media streaming methods
        and the API re-used without difficulty.</p>

      <p>Note that the naming conventions used in the MediaStreamHandler
        and MediaSessionHandler interfaces are rather confusing; methods
        have signal-like names and signals have method-like names, due to
        the API being based rather too closely on that of Farsight. This
        is for historical reasons and will be fixed in a future release
        of the Telepathy specification.</p>
    </tp:docstring>

    <tp:simple-type name="Media_Session_Type" type="s">
      <tp:docstring>The type of a media session. Currently, the only supported
        value is &quot;rtp&quot;.</tp:docstring>
    </tp:simple-type>

    <tp:struct array-name="Media_Session_Handler_Info_List" name="Media_Session_Handler_Info">
      <tp:docstring>A struct representing a active session handler.</tp:docstring>
      <tp:member name="Session_Handler" type="o">
        <tp:docstring>The object path of the session handler, which is on the
          same bus name as the channel.</tp:docstring>
      </tp:member>
      <tp:member name="Media_Session_Type" tp:type="Media_Session_Type" type="s">
        <tp:docstring>The media session's type</tp:docstring>
      </tp:member>
    </tp:struct>

    <method name="GetSessionHandlers" tp:name-for-bindings="Get_Session_Handlers">
      <arg direction="out" name="Session_Handlers" tp:type="Media_Session_Handler_Info[]" type="a(os)"/>
      <tp:docstring>
        Returns all currently active session handlers on this channel
        as a list of (session_handler_path, type).
      </tp:docstring>
    </method>

    <signal name="NewSessionHandler" tp:name-for-bindings="New_Session_Handler">
      <arg name="Session_Handler" type="o">
        <tp:docstring>
          Object path of the new <tp:dbus-ref namespace="org.freedesktop.Telepathy">Media.SessionHandler</tp:dbus-ref>
          object
        </tp:docstring>
      </arg>
      <arg name="Session_Type" tp:type="Media_Session_Type" type="s">
        <tp:docstring>
          String indicating type of session, eg &quot;rtp&quot;
        </tp:docstring>
      </arg>
      <tp:docstring>
        Signal that a session handler object has been created. The client
        should create a session object and create streams for the streams
        within.
      </tp:docstring>
    </signal>

    <tp:property name="nat-traversal" type="s">
      <tp:deprecated version="0.17.22">Use the <tp:dbus-ref namespace="org.freedesktop.Telepathy.Media.StreamHandler">NATTraversal</tp:dbus-ref>
        property on the Media.StreamHandler, if available; use this
        as a fallback.</tp:deprecated>
      <tp:docstring>
        A string indicating the NAT traversal techniques employed by the
        streams within this channel if they do not have a <tp:dbus-ref namespace="org.freedesktop.Telepathy.Media.StreamHandler">NATTraversal</tp:dbus-ref>
        property. The possible values are the same as for the NATTraversal
        property on the streams.
      </tp:docstring>
    </tp:property>

    <tp:property name="stun-server" type="s">
      <tp:deprecated version="0.17.22">Use the <tp:dbus-ref namespace="org.freedesktop.Telepathy.Media.StreamHandler">STUNServers</tp:dbus-ref>
        property on the Media.StreamHandler, if available; use this
        as a fallback.</tp:deprecated>
      <tp:docstring>
        The IP address or hostname of the STUN server to use for NAT traversal
        if the individual streams do not specify one.
      </tp:docstring>
    </tp:property>

    <tp:property name="stun-port" type="q">
      <tp:deprecated version="0.17.22">Use the <tp:dbus-ref namespace="org.freedesktop.Telepathy.Media.StreamHandler">STUNServers</tp:dbus-ref>
        property on the Media.StreamHandler, if available; use this
        as a fallback.</tp:deprecated>
      <tp:docstring>
      The UDP port number to use on the provided STUN server.
      </tp:docstring>
    </tp:property>

    <tp:property name="gtalk-p2p-relay-token" type="s">
      <tp:deprecated version="0.17.22">XMPP connection managers
        supporting the Google Talk relay server SHOULD make the necessary
        HTTP requests to find a username and password, and use those
        to populate the <tp:dbus-ref namespace="org.freedesktop.Telepathy.Media.StreamHandler">RelayInfo</tp:dbus-ref>
        property on the Media.StreamHandler.</tp:deprecated>
      <tp:docstring>
      The authentication token for use with the Google Talk peer-to-peer relay
      server.
      </tp:docstring>
    </tp:property>

    <tp:handler-capability-token name="gtalk-p2p">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The client can implement streaming for streams whose <tp:dbus-ref namespace="org.freedesktop.Telepathy.Media.StreamHandler">NATTraversal</tp:dbus-ref>
          property is <code>gtalk-p2p</code>.</p>
      </tp:docstring>
    </tp:handler-capability-token>

    <tp:handler-capability-token name="ice-udp">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The client can implement streaming for streams whose <tp:dbus-ref namespace="org.freedesktop.Telepathy.Media.StreamHandler">NATTraversal</tp:dbus-ref>
          property is <code>ice-udp</code>.</p>
      </tp:docstring>
    </tp:handler-capability-token>

    <tp:handler-capability-token name="wlm-8.5">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The client can implement streaming for streams whose <tp:dbus-ref namespace="org.freedesktop.Telepathy.Media.StreamHandler">NATTraversal</tp:dbus-ref>
          property is <code>wlm-8.5</code>.</p>
      </tp:docstring>
    </tp:handler-capability-token>

    <tp:handler-capability-token name="wlm-2009">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The client can implement streaming for streams whose <tp:dbus-ref namespace="org.freedesktop.Telepathy.Media.StreamHandler">NATTraversal</tp:dbus-ref>
          property is <code>wlm-2009</code>.</p>
      </tp:docstring>
    </tp:handler-capability-token>

    <tp:handler-capability-token is-family="yes" name="video/h264">
      <tp:docstring>
        <p>The client supports media streaming with H264 (etc.).</p>

        <p>This handler capability token is a one of a family
          of similar tokens: for any other audio or video codec whose MIME
          type is audio/<em>subtype</em> or video/<em>subtype</em>, a handler
          capability token of this form may exist (the subtype MUST appear
          in lower case in this context). Clients MAY support more
          codecs than they explicitly advertise support for; clients SHOULD
          explicitly advertise support for their preferred codec(s), and
          for codecs like H264 that are, in practice, significant in codec
          negotiation.</p>

        <tp:rationale>
          <p>For instance, the XMPP capability used by the Google Video
            Chat web client to determine whether a client is compatible
            with it requires support for H264 video, so an XMPP
            connection manager that supports this version of Jingle should
            not advertise the Google Video Chat capability unless there
            is at least one installed client that declares that it supports
            <code>video/h264</code> on StreamedMedia channels.</p>
        </tp:rationale>

        <p>For example, a client could advertise support for
          Speex, Theora and H264 by having three
          handler capability tokens,
          <code>org.freedesktop.Telepathy.Channel.Interface.MediaSignalling/audio/speex</code>,
          <code>org.freedesktop.Telepathy.Channel.Interface.MediaSignalling/video/theora</code> and
          <code>org.freedesktop.Telepathy.Channel.Interface.MediaSignalling/video/h264</code>,
          in its <tp:dbus-ref namespace="org.freedesktop.Telepathy.Client.Handler">Capabilities</tp:dbus-ref>
          property.</p>

        <p>Clients MAY have media signalling abilities without explicitly
          supporting any particular codec, and connection managers SHOULD
          support this usage.</p>

        <tp:rationale>
          <p>This is necessary to support gatewaying between two Telepathy
            connections, in which case the available codecs might not be
            known to the gatewaying process.</p>
        </tp:rationale>
      </tp:docstring>
    </tp:handler-capability-token>

  </interface>
</node>
<node name="/Channel_Interface_Messages" xml:base="../spec/Channel_Interface_Messages.xml">
  <tp:copyright>Copyright © 2008-2009 Collabora Ltd.</tp:copyright>
  <tp:copyright>Copyright © 2008-2009 Nokia Corporation</tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
USA.</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Channel.Interface.Messages">
    <tp:requires interface="org.freedesktop.Telepathy.Channel.Type.Text"/>
    <tp:added version="0.17.16">(as stable API)</tp:added>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>This interface extends the Text interface to support more general
        messages, including:</p>

      <ul>
        <li>messages with attachments (like MIME multipart/mixed)</li>
        <li>groups of alternatives (like MIME multipart/alternative)</li>
        <li>delivery reports</li>
        <li>any extra types of message we need in future</li>
      </ul>

      <p>Although this specification supports formatted (rich-text)
        messages with unformatted alternatives, implementations SHOULD NOT
        attempt to send formatted messages until the Telepathy specification
        has also been extended to cover capability discovery for message
        formatting.</p>

      <tp:rationale>
        We intend to expose all rich-text messages as XHTML-IM, but on some
        protocols, formatting is an extremely limited subset of that format
        (e.g. there are protocols where foreground/background colours, font
        and size can be set, but only for entire messages).
        Until we can tell UIs what controls to offer to the user, it's
        unfriendly to offer the user controls that may have no effect.
      </tp:rationale>

      <p>This interface also replaces <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type">Text.SendError</tp:dbus-ref>,
        adding support for
        protocols where the message content is not echoed back to the sender on
        failure, adding support for receiving positive acknowledgements,
        and using the Messages queue for state-recovery
        (ensuring that incoming delivery reports are not lost if there is not
        currently a process handling them).</p>

      <p>If this interface is present, clients that support it SHOULD
        listen for the <tp:member-ref>MessageSent</tp:member-ref> and
        <tp:member-ref>MessageReceived</tp:member-ref> signals, and
        ignore the <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type.Text">Sent</tp:dbus-ref>,
        <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type.Text">SendError</tp:dbus-ref>
        and <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type.Text">Received</tp:dbus-ref>
        signals on the Text interface (which are guaranteed to duplicate
        signals from this interface).</p>
    </tp:docstring>

    <property access="read" name="SupportedContentTypes" tp:name-for-bindings="Supported_Content_Types" type="as">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>A list of MIME types supported by this channel, with more preferred
          MIME types appearing earlier in the list. The list MAY include &quot;*/*&quot;
          to indicate that attachments with arbitrary MIME types can be sent.
          This list MUST NOT be empty, since all Messages implementations
          MUST accept messages containing a single &quot;text/plain&quot; part.</p>

        <p>Some examples of how this property interacts with the
          <tp:member-ref>MessagePartSupportFlags</tp:member-ref>:</p>

        <dl>
          <dt>A simple IM implementation: only plain text messages are
            allowed</dt>
          <dd>SupportedContentTypes = ['text/plain'],
            MessagePartSupportFlags = 0</dd>

          <dt>Formatted text with a plain text alternative is allowed (see the
            HTML interface draft)</dt>
          <dd>SupportedContentTypes = ['text/html', 'text/plain'],
            MessagePartSupportFlags = 0</dd>

          <dt>JPEG or PNG images may be sent, but without any attached
            text</dt>
          <dd>SupportedContentTypes = ['text/plain', 'image/jpeg',
            'image/png'], MessagePartSupportFlags = 0</dd>

          <dt>Unformatted text to which an optional JPEG or PNG image may be
            attached</dt>
          <dd>SupportedContentTypes = ['text/plain', 'image/jpeg',
            'image/png'], MessagePartSupportFlags = One_Attachment</dd>

          <dt>Formatted text to which arbitrarily many images may be
            attached</dt>
          <dd>SupportedContentTypes = ['text/html', 'text/plain', 'image/jpeg',
            'image/png', 'image/x-ms-bmp'], MessagePartSupportFlags =
            One_Attachment | Multiple_Attachments</dd>

          <dt>A full SIP implementation: arbitrary MIME messages are
            allowed</dt>
          <dd>SupportedContentTypes = ['*/*'], MessagePartSupportFlags =
            One_Attachment | Multiple_Attachments</dd>
        </dl>
      </tp:docstring>
    </property>

    <property access="read" name="MessagePartSupportFlags" tp:name-for-bindings="Message_Part_Support_Flags" tp:type="Message_Part_Support_Flags" type="u">
      <tp:docstring>
        Flags indicating the level of support for message parts on this
        channel.
      </tp:docstring>
    </property>

    <tp:flags name="Message_Part_Support_Flags" type="u" value-prefix="Message_Part_Support_Flag">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Flags indicating the level of support for message parts on this
          channel. They are designed such that setting more flags always
          implies that the channel has more capabilities.</p>

        <p>If no flags are set, this indicates that messages may contain
          a single message part whose content-type is any of the types
          from SupportedContentTypes, possibly with some alternatives.</p>

        <p>There is no flag indicating support for alternatives. This is
          because the SendMessage implementation can always accept messages
          containing alternatives, even if the underlying protocol does not,
          by deleting all alternatives except the first (most preferred)
          that is supported.</p>

        <tp:rationale>
          Each of the flags so far implies the previous flag, so we could
          have used a simple enumeration here; however, we've defined
          the message-part support indicator as a flag set for future
          expansion.
        </tp:rationale>

        <p>See <tp:member-ref>SupportedContentTypes</tp:member-ref> for some
          examples.</p>
      </tp:docstring>

      <tp:flag suffix="One_Attachment" value="1">
        <tp:docstring>
          <tp:member-ref>SendMessage</tp:member-ref> will accept messages
          containing a textual message body,
          plus a single attachment of any type listed in the
          SupportedContentTypes property. It does not make sense for this
          flag to be set if Message_Part_Support_Flag_Data_Only is not also set
          (because the connection manager can trivially provide an empty text
          part if necessary).
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="Multiple_Attachments" value="2">
        <tp:docstring>
          SendMessage will accept messages containing a textual message body,
          plus an arbitrary number of attachments of any type listed in the
          SupportedContentTypes property. It does not make sense for this
          flag to be set if Message_Part_Support_Flag_One_Attachment is not
          also set.
        </tp:docstring>
      </tp:flag>
    </tp:flags>

    <tp:mapping array-depth="2" array-name="Message_Part_List" name="Message_Part">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Part of a message's content. In practice, this mapping never
          appears in isolation - messages are represented by a list of
          <tp:type>Message_Part</tp:type> mappings.</p>

        <p>An example of how a message might
          look, in a Python-like syntax:</p>

          <pre>
[
  {
    'message-token': '9de9546a-3400-4419-a505-3ea270cb834c',
    'message-sender': 42,
    'message-sent': 1210067943,
    'message-received': 1210067947,
    'message-type': 0,              # = Channel_Text_Message_Type_Normal
    'pending-message-id': 437,
  },
  { 'alternative': 'main',
    'content-type': 'text/html',
    'content': 'Here is a photo of my cat:&lt;br /&gt;' +
               '&lt;img src=&quot;cid:catphoto&quot; alt=&quot;lol!&quot; /&gt;' +
               '&lt;br /&gt;Isn't it cute?',
  },
  { 'alternative': 'main',
    'content-type': 'text/plain',
    'content': 'Here is a photo of my cat:\n[IMG: lol!]\nIsn't it cute?',
  },
  { 'identifier': 'catphoto',
    'content-type': 'image/jpeg',
    'size': 101000,
    'needs-retrieval': True,
  },
]
          </pre>

        <div>
          <p>The first part of the message contains &quot;headers&quot; which refer
            to the entire message.</p>

          <p>It is an error for a connection manager to put keys referring
            to the message as a whole in the second or subsequent
            Message_Part, but clients MUST recover from this error by ignoring
            these keys in the second and subsequent parts.</p>

          <tp:rationale>
            <p>Instead of representing messages as aa{sv} where the first
              dictionary is special (a dictionary of headers), we could have
              used a signature like (a{sv}aa{sv}) to separate out the headers
              and the body parts.</p>

            <p>However, this would make access to the messages more awkward.
              In Python, the syntax for access to a header field would remain
              <code>message[0]['message-type']</code>, but access to a body
              field in the second body part would change from
              message[2]['content'] to message[1][1]['content']. In GLib,
              the message would change from being a
              GPtrArray(GHashTable) to being a
              GValueArray(GHashTable, GPtrArray(GHashTable)) which is rather
              inconvenient to dereference.</p>
          </tp:rationale>

          <p>Well-known keys for the message as a whole, and the corresponding
            value types, include:</p>

          <dl>
            <dt>message-token (s)</dt>
            <dd>An opaque, globally-unique identifier for the entire message.
              This MAY be treated as if it were a MIME Message-ID, e.g. for
              the mid: and cid: URI schemes. If omitted, there is no suitable
              token.</dd>

            <dt>message-sent (x - <tp:type>Unix_Timestamp64</tp:type>)</dt>
            <dd>The time the message was sent (if unavailable, the time
              it arrived at a central server MAY be used). Omitted if no
              reasonable approximation is available; SHOULD always be present
              on outgoing messages.</dd>

            <dt>message-received (x - <tp:type>Unix_Timestamp64</tp:type>)</dt>
            <dd>The time the message was received locally. SHOULD always
              be present.</dd>

            <dt>message-sender (u - <tp:type>Contact_Handle</tp:type>)</dt>
            <dd>The contact who sent the message. If 0 or omitted, the contact
              who sent the message could not be determined.</dd>

            <dt>message-type (u - <tp:type>Channel_Text_Message_Type</tp:type>)
            </dt>
            <dd>The type of message; if omitted,
              Channel_Text_Message_Type_Normal MUST be assumed. MAY
              be omitted for normal chat messages.</dd>

            <dt>pending-message-id (u - <tp:type>Message_ID</tp:type>)</dt>
            <dd>The incoming message ID. This MUST NOT be present on outgoing
              messages. Clients SHOULD NOT store this key - it is only valid
              for as long as the message remains unacknowledged.</dd>

            <dt>interface (s - <tp:type>DBus_Interface</tp:type>)</dt>
            <dd>This message is specific to the given interface, which is
              neither Text nor Messages. It SHOULD be ignored if that
              interface is not supported. (Note that an 'interface' key
              can also appear on the second and subsequent parts, where
              it indicates that that part (only) should be ignored if
              unsupported.)</dd>

            <dt>scrollback (b)</dt>
            <dd>If present and true, the incoming message was part of a
              replay of message history (this matches the Scrollback flag in
              <tp:type>Channel_Text_Message_Flags</tp:type>). This flag
              does not make sense on outgoing messages and SHOULD NOT
              appear there.</dd>

            <dt>rescued (b)</dt>
            <dd>If present and true, the incoming message has been seen in
              a previous channel during the lifetime of the Connection,
              but had not been acknowledged when that channel closed, causing
              an identical channel (in which the message now appears) to open.
              This matches the Rescued flag in
              <tp:type>Channel_Text_Message_Flags</tp:type>; it
              does not make sense on outgoing messages, and SHOULD NOT
              appear there.</dd>
          </dl>
        </div>

        <div>
          <p>The second and subsequent parts contain the message's
            content, including plain text, formatted text and/or attached
            files.</p>

          <p>It is an error for a connection manager to put keys referring
            to the message body in the first Message_Part;
            clients MUST recover from this error by ignoring
            these keys in first part.</p>

          <p>In any group of parts with the same non-empty value for the
            &quot;alternative&quot; key (which represent alternative versions of the
            same content), more faithful versions of the intended message MUST
            come before less faithful versions (note that this order is the
            opposite of MIME &quot;multipart/alternative&quot; parts). Clients SHOULD
            display the first alternative that they understand.</p>

          <tp:rationale>
            <p>Specifying the preference order means that if the underlying
              protocol doesn't support alternatives, the CM can safely delete
              everything apart from the first supported alternative when
              sending messages.</p>

            <p>The order is the reverse of MIME because MIME's rationale for
              placing the &quot;plainest&quot; part first (legibility in pre-MIME UAs)
              does not apply to us, and placing the most preferred part
              first simplifies display (a client can iterate the message
              in order, display the first alternative that it understands,
              and skip displaying all subsequent parts with the same
              &quot;alternative&quot; key).</p>
          </tp:rationale>

          <p>Clients SHOULD present all parts that are not redundant
            alternatives in the order they appear in this array, possibly
            excluding parts that are referenced by another displayed part.
            It is implementation-specific how the parts are presented to the
            user.</p>

          <tp:rationale>
            <p>This allows CMs to assume that all parts are actually shown to
              the user, even if they are not explicitly referenced - we do
              not yet recommend formatted text, and there is no way for
              plain text to reference an attachment since it has no concept of
              markup or references. This also forces clients to do something
              sensible with messages that consist entirely of &quot;attachments&quot;,
              with no &quot;body&quot; at all.</p>

            <p>For instance, when displaying the above example, a client that
              understands the HTML part should display the JPEG image once,
              between the two lines &quot;Here is a photo of my cat:&quot; and
              &quot;Isn't it cute?&quot;; it may additionally present the image in some
              way for a second time, after &quot;Isn't it cute?&quot;, or may choose
              not to.</p>

            <p>A client that does not understand HTML, displaying the same
              message, should display the plain-text part, followed by the JPEG
              image.</p>
          </tp:rationale>

          <p>Well-known keys for the second and subsequent parts, and the
            corresponding value types, include:</p>

          <dl>
            <dt>identifier (s)</dt>
            <dd>An opaque identifier for this part.
              Parts of a message MAY reference other parts by treating
              this identifier as if it were a MIME Content-ID and using
              the cid: URI scheme.</dd>

            <dt>alternative (s)</dt>
            <dd>
              <p>If present, this part of the message is an alternative for
                all other parts with the same value for &quot;alternative&quot;.
                Clients SHOULD only display one of them (this is expected to
                be used for XHTML messages in a future version of this
                specification).</p>

              <p>If omitted, this part is not an alternative for any other
                part.</p>

              <p>Parts of a message MAY reference the group of alternatives
                as a whole (i.e. a reference to whichever of them is chosen)
                by treating this identifier as if it were the MIME Content-ID
                of a multipart/alternative part, and using the cid: URI
                scheme.</p>
            </dd>

            <dt>content-type (s)</dt>
            <dd>
              <p>The MIME type of this part. See the documentation
                for ReceivedMessage for notes on the special status of
                &quot;text/plain&quot; parts.</p>

              <p>Connection managers MUST NOT signal parts without a
                'content-type' key; if a protocol provides no way to determine
                the MIME type, the connection manager is responsible for
                guessing it, but MAY fall back to &quot;text/plain&quot; for text and
                &quot;application/octet-stream&quot; for non-text.</p>

              <p>Clients MUST ignore parts without a 'content-type' key, which
                are reserved for future expansion.</p>
            </dd>

            <dt>lang (s)</dt>
            <dd>The natural language of this part, identified by a
              RFC 3066 language tag.

              <tp:rationale>
                XMPP allows alternative-selection by language as well as
                by content-type.
              </tp:rationale>
            </dd>

            <dt>size (u)</dt>
            <dd>The size in bytes (if needs-retrieval is true, this MAY be an
              estimated or approximate size). SHOULD be omitted if 'content'
              is provided.

              <tp:rationale>
                There's no point in providing the size if you're already
                providing all the content.
              </tp:rationale>
              </dd>

            <dt>needs-retrieval (b)</dt>
            <dd>If false or omitted, the connection
              manager already holds this part in memory. If present and true,
              this part will be retrieved on demand (like MIME's
              message/external-body), so clients should expect retrieval to
              take time; if this specification is later extended to provide a
              streaming version of GetPendingMessageContent, clients should
              use it for parts with this flag.</dd>

            <dt>truncated (b)</dt>
            <dd>The content available via the 'content' key or
              GetPendingMessageContent has been truncated by the server
              or connection manager (equivalent to
              Channel_Text_Message_Flag_Truncated in the Text interface).
            </dd>

            <dt>content (s or ay)</dt>
            <dd>The part's content, if it is available and
              sufficiently small to include here (implies that
              'needs-retrieval' is false or omitted). Otherwise, omitted.
              If the part is human-readable text or HTML, the value for this
              key MUST be a UTF-8 string (D-Bus signature 's').
              If the part is not text, the value MUST be a byte-array
              (D-Bus signature 'ay'). If the part is a text-based format
              that is not the main body of the message (e.g. an iCalendar
              or an attached XML document), the value SHOULD be a UTF-8 string,
              transcoding from another charset to UTF-8 if necessary, but
              MAY be a byte-array (of unspecified character set) if
              transcoding fails or the source charset is not known.</dd>

              <!-- FIXME: "sufficiently small to include" is not currently
              defined; we should add some API so clients can tell the
                CM how large a message it should emit in the signal.-->

            <dt>interface (s - <tp:type>DBus_Interface</tp:type>)</dt>
            <dd>This part is specific to the given interface, which is
              neither Text nor Messages. It SHOULD be ignored if that
              interface is not supported. (Note that an 'interface' key
              can also appear on the first part, where it indicates that the
              entire message should be ignored if unsupported.)</dd>
          </dl>

        </div>


        <div>
          <p>Delivery reports are also represented as messages, of type
            Channel_Text_Message_Type_Delivery_Report, with the
            Non_Text_Content flag in the Text interface.</p>

          <p>Whenever a message of type
            Channel_Text_Message_Type_Delivery_Report is signalled for a
            delivery error report, Channel.Type.Text.SendError SHOULD also
            be emitted; whenever Channel.Type.Text.SendError is emitted by a
            channel which supports this interface, a message of type
            Channel_Text_Message_Type_Delivery_Report MUST also be emitted.</p>

          <p>The corresponding message in the Messages interface MUST contain
            &quot;headers&quot; for the delivery report, as specified below, in its
            first Message_Part.</p>

          <dl>
            <dt>message-sender (u - Contact_Handle as defined above)</dt>
            <dd>MUST be the intended recipient of the original message, if
              available (zero or omitted if the intended recipient is
              unavailable or is not a contact, e.g. a chatroom), even if the
              delivery report actually came from an intermediate server.</dd>

            <dt>message-type (u - Channel_Text_Message_Type as defined
              above)</dt>
            <dd>MUST be Channel_Text_Message_Type_Delivery_Report.</dd>

            <dt>delivery-status (u - Delivery_Status)</dt>
            <dd>The status of the message. All delivery reports MUST contain
              this key in the first Message_Part.</dd>

            <dt>delivery-token (s - Sent_Message_Token)</dt>

            <dd>
              <p>An identifier for the message to which this delivery report
                refers. MUST NOT be an empty string. Omitted if not
                available.</p>

              <p>Clients may match this against the token produced by the
                SendMessage method and MessageSent signal. A status report
                with no token could match any sent message, and a sent
                message with an empty token could match any status report.
                If multiple sent messages match, clients SHOULD use some
                reasonable heuristic.</p>

              <tp:rationale>
                In an ideal world, we could unambiguously match reports
                against messages; however, deployed protocols are not ideal,
                and not all reports and messages can be matched.
              </tp:rationale>
            </dd>

            <dt>delivery-error (u - Channel_Text_Send_Error)</dt>
            <dd>
              The reason for the failure. MUST be omitted if this was a
              successful delivery; SHOULD be omitted if it would be
              Channel_Text_Send_Error_Unknown.
            </dd>

            <dt>delivery-dbus-error (s - DBus_Error_Name)</dt>
            <dd>
              The reason for the failure, specified as a (possibly
              implementation-specific) D-Bus error. MUST be omitted if this was
              a successful delivery. If set, the 'delivery-error' key SHOULD be
              set to the closest available value.
            </dd>

            <dt>delivery-error-message (s)</dt>
            <dd>
              Debugging information on why the message could not be delivered.
              MUST be omitted if this was a successful delivery; MAY always be
              omitted.
            </dd>

            <dt>delivery-echo (aa{sv} - Message_Part[])</dt>
            <dd>
              <p>The message content, as defined by the Messages interface.
                Omitted if no content is available. Content MAY have been
                truncated, message parts MAY have been removed, and message
                parts MAY have had their content removed (i.e. the message part
                metadata is present, but the 'content' key is not).</p>

              <tp:rationale>
                Some protocols, like XMPP, echo the failing message back to
                the sender. This is sometimes the only way to match it
                against the sent message, so we include it here.
              </tp:rationale>

              <p>Unlike in the Messages interface, content not visible
                in the value for this key cannot be retrieved by another
                means, so the connection manager SHOULD be more
                aggressive about including (possibly truncated) message
                content in the 'content' key.</p>

              <tp:rationale>
                The Messages interface needs to allow all content to be
                retrieved, but in this interface, the content we provide is
                merely a hint; so some is better than none, and it doesn't
                seem worth providing an API as complex as Messages'
                GetPendingMessageContent for the echoed message.
              </tp:rationale>
            </dd>

          </dl>

          <p>The second and subsequent Message_Part dictionaries, if present,
            are a human-readable report from the IM service.</p>

          <p>Clients MUST NOT attempt to send delivery reports using the
            SendMessage method in the Messages API, and connection managers
            MUST NOT allow this to be done. If support for sending delivery
            reports is later added, it will be part of this interface.</p>

          <p>Some example delivery reports in a Python-like syntax (in which
            arrays are indicated by [a, b] and dictionaries by {k1: v1, k2: v2})
            follow.</p>

          <dl>
            <dt>A minimal delivery report indicating permanent failure of the
              sent message whose token was
              <code>b9a991bd-8845-4d7f-a704-215186f43bb4</code> for an unknown
              reason</dt>
            <dd><pre>
[{
# header
'message-sender': 123,
'message-type': Channel_Text_Message_Type_Delivery_Report,
'delivery-status': Delivery_Status_Permanently_Failed,
'delivery-token': 'b9a991bd-8845-4d7f-a704-215186f43bb4',
}
# no body
]
</pre></dd>

            <dt>A delivery report where the failed message is echoed back to the
              sender rather than being referenced by ID, and the failure reason
              is that this protocol cannot send messages to offline contacts
              such as the contact with handle 123</dt>
            <dd><pre>
[{ # header
'message-sender': 123,
'message-type': Channel_Text_Message_Type_Delivery_Report,
'delivery-status': Delivery_Status_Temporarily_Failed,
'delivery-error': Channel_Text_Send_Error_Offline,
'delivery-echo':
    [{ # header of original message
    'message-sender': 1,
    'message-sent': 1210067943,
    },
    { # body of original message
    'content-type': 'text/plain',
    'content': 'Hello, world!',
    }]
  ],

# no body
]
</pre></dd>

            <dt>A maximally complex delivery report: the server reports a
              bilingual human-readable failure message because the user sent
              a message &quot;Hello, world!&quot; with token
              <code>b9a991bd-8845-4d7f-a704-215186f43bb4</code> to a contact
              with handle 123, but that handle represents a contact who does not
              actually exist</dt>
            <dd><pre>
[{ # header
'message-sender': 123,
'message-type': Channel_Text_Message_Type_Delivery_Report,
'delivery-status': Delivery_Status_Permanently_Failed,
'delivery-error': Channel_Text_Send_Error_Invalid_Contact,
'delivery-token': 'b9a991bd-8845-4d7f-a704-215186f43bb4',
'delivery-echo':
    [{ # header of original message
    'message-sender': 1,
    'message-sent': 1210067943,
    },
    { # body of original message
    'content-type': 'text/plain',
    'content': 'Hello, world!',
    }]
  ],
},
{ # message from server (alternative in English)
'alternative': '404',
'content-type': 'text/plain',
'lang': 'en',
'content': 'I have no contact with that name',
},
{ # message from server (alternative in German)
'alternative': '404'.
'content-type': 'text/plain',
'lang': 'de',
'content', 'Ich habe keinen Kontakt mit diesem Namen',
}
]
</pre></dd>

            <dt>A minimal delivery report indicating successful delivery
              of the sent message whose token was
              <code>b9a991bd-8845-4d7f-a704-215186f43bb4</code></dt>
            <dd><pre>
[{
# header
'message-sender': 123,
'message-type': Channel_Text_Message_Type_Delivery_Report,
'delivery-status': Delivery_Status_Delivered,
'delivery-token': 'b9a991bd-8845-4d7f-a704-215186f43bb4',
}
# no body
]
</pre></dd>

          </dl>

        </div>
      </tp:docstring>

      <tp:member name="Key" type="s">
        <tp:docstring>
          A key, which SHOULD be one of the well-known keys specified, if
          possible.
        </tp:docstring>
      </tp:member>

      <tp:member name="Value" type="v">
        <tp:docstring>
          The value corresponding to the given key, which must be of one of
          the types indicated.
        </tp:docstring>
      </tp:member>
    </tp:mapping>

    <tp:simple-type array-name="Message_Part_Index_List" name="Message_Part_Index" type="u">
      <tp:added version="0.17.17"/>
      <tp:docstring>
        The index of a message part within a message.
      </tp:docstring>
    </tp:simple-type>

    <tp:mapping name="Message_Part_Content_Map">
      <tp:added version="0.17.17"/>
      <tp:docstring>
        A mapping from message part indexes to their content, as returned by
        <tp:member-ref>GetPendingMessageContent</tp:member-ref>.
      </tp:docstring>

      <tp:member name="Part" tp:type="Message_Part_Index" type="u">
        <tp:docstring>
          Indexes into the array of <tp:type>Message_Part</tp:type>s that
          represents a message. The &quot;headers&quot; part (which is not a valid
          argument to GetPendingMessageContent) is considered to be part 0,
          so the valid part numbers start at 1 (for the second message part).
        </tp:docstring>
      </tp:member>

      <tp:member name="Content" type="v">
        <tp:docstring>
          The message part's content. The variant MUST contain either type
          's' or 'ay' (UTF-8 text string, or byte array), following the
          same rules as for the value of the 'content' key in
          the <tp:type>Message_Part</tp:type> mappings.
        </tp:docstring>
      </tp:member>
    </tp:mapping>

    <tp:simple-type name="Sent_Message_Token" type="s">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>An opaque token used to identify sent messages. As a special case,
          the empty string indicates that there is no particular
          identification for a message.</p>

        <p>CM implementations SHOULD use an identifier expected to be unique,
          such as a UUID, if possible.</p>

        <p>Some protocols can only track a limited number of sent messages
          in a small message-ID space. As a result, clients MUST NOT assume
          that message tokens will not be re-used, and SHOULD use some
          reasonable heuristic to assign delivery reports to messages, such
          as matching on message content or timestamp (if available), or
          assuming that the delivery report refers to the most recent message
          with that ID.</p>
      </tp:docstring>
    </tp:simple-type>

    <method name="SendMessage" tp:name-for-bindings="Send_Message">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Submit a message to the server for sending.
          If this method returns successfully, the message has been submitted
          to the server and the <tp:member-ref>MessageSent</tp:member-ref>
          signal is emitted. A corresponding
          <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type.Text">Sent</tp:dbus-ref>
          signal on the Text interface MUST also be emitted.</p>

        <p>This method MUST return before the MessageSent signal is
          emitted.</p>

        <tp:rationale>
          <p>This means that the process sending the message is the first
            to see the <tp:type>Sent_Message_Token</tp:type>, and can
            relate the message to the corresponding
            <tp:member-ref>MessageSent</tp:member-ref> signal by comparing
            message tokens (if supported by the protocol).</p>
        </tp:rationale>

        <p>If this method fails, message submission to the server has failed
          and no signal on this interface (or the Text interface) is
          emitted.</p>
      </tp:docstring>

      <arg direction="in" name="Message" tp:type="Message_Part[]" type="aa{sv}">
        <tp:docstring>
          The message content, including any attachments or alternatives
        </tp:docstring>
      </arg>
      <arg direction="in" name="Flags" tp:type="Message_Sending_Flags" type="u">
        <tp:docstring>
          Flags affecting how the message is sent.
        </tp:docstring>
      </arg>

      <arg direction="out" name="Token" tp:type="Sent_Message_Token" type="s">
        <tp:docstring>
          An opaque token used to match any incoming delivery or failure
          reports against this message, or an empty string if the message
          is not readily identifiable.
        </tp:docstring>
      </arg>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument">
          <tp:docstring>
            The requested message is malformed and cannot be sent.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable"/>
        <tp:error name="org.freedesktop.Telepathy.Error.PermissionDenied"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
      </tp:possible-errors>
    </method>

    <tp:flags name="Message_Sending_Flags" type="u" value-prefix="Message_Sending_Flag">
      <tp:docstring>
        Flags altering the way a message is sent. The &quot;most usual&quot; action
        should always be to have these flags unset.
      </tp:docstring>

      <tp:flag suffix="Report_Delivery" value="1">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>Provide a successful delivery report if possible, even if this is
            not the default for this protocol. Ignored if delivery reports are
            not possible on this protocol.</p>

          <tp:rationale>
            <p>In some protocols, like XMPP, it is not conventional to request
              or send positive delivery notifications.</p>
          </tp:rationale>

          <p>Delivery failure reports SHOULD always be sent, but if this flag
            is present, the connection manager MAY also try harder to obtain
            failed delivery reports or allow them to be matched to outgoing
            messages.</p>
        </tp:docstring>
      </tp:flag>
    </tp:flags>

    <signal name="MessageSent" tp:name-for-bindings="Message_Sent">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Signals that a message has been submitted for sending. This
          MUST be emitted exactly once per emission of the <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type.Text">Sent</tp:dbus-ref>
          signal on the
          Text interface.</p>

        <tp:rationale>
          <p>This signal allows a process that is not the caller of
            SendMessage to log sent messages. The double signal-emission
            provides compatibility with older clients. Clients supporting
            Messages should listen for Messages.MessageSent only (if the
            channel has the Messages interface) or Text.Sent only
            (otherwise).</p>
        </tp:rationale>
      </tp:docstring>

      <arg name="Content" tp:type="Message_Part[]" type="aa{sv}">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The message content (see <tp:type>Message_Part</tp:type> for full
            details). If the message that was passed to SendMessage has a
            formatted text part that the connection manager recognises, but no
            text/plain alternative, the CM MUST use the formatted text part to
            generate a text/plain alternative which is also included in this
            signal argument.</p>

          <p>If the connection manager can predict that the message will be
            altered during transmission, this argument SHOULD reflect what
            other contacts will receive, rather than being a copy of the
            argument to SendMessage (if the message is truncated,
            formatting or alternatives are dropped, etc., then the edited
            version SHOULD appear in this signal).</p>
        </tp:docstring>
      </arg>

      <arg name="Flags" tp:type="Message_Sending_Flags" type="u">
        <tp:docstring>
          <p>Flags affecting how the message was sent.  The flags might be a
            subset of those passed to SendMessage if the caller requested
            unsupported flags.</p>
        </tp:docstring>
      </arg>

      <arg name="Message_Token" tp:type="Sent_Message_Token" type="s">
        <tp:docstring>
          An opaque token used to match any incoming delivery or failure
          reports against this message, or an empty string if the message
          is not readily identifiable.
        </tp:docstring>
      </arg>
    </signal>

    <property access="read" name="PendingMessages" tp:name-for-bindings="Pending_Messages" tp:type="Message_Part[][]" type="aaa{sv}">
      <tp:docstring>
        A list of incoming messages that have neither been acknowledged nor
        rejected. This list is a more detailed version of the one returned
        by <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type">Text.ListPendingMessages</tp:dbus-ref>,
        and contains the same messages, uniquely identified by the same
        pending message IDs. Its items can be removed using
        <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type">Text.AcknowledgePendingMessages</tp:dbus-ref>.
      </tp:docstring>
    </property>

    <signal name="PendingMessagesRemoved" tp:name-for-bindings="Pending_Messages_Removed">
      <tp:docstring>
        The messages with the given IDs have been removed from the
        <tp:member-ref>PendingMessages</tp:member-ref> list. Clients SHOULD NOT
        attempt to acknowledge those messages.

        <tp:rationale>
          This completes change notification for the PendingMessages property
          (previously, there was change notification when pending messages
          were added, but not when they were removed).
        </tp:rationale>
      </tp:docstring>

      <arg name="Message_IDs" tp:type="Message_ID[]" type="au">
        <tp:docstring>
          The messages that have been removed from the pending message list.
        </tp:docstring>
      </arg>
    </signal>

    <method name="GetPendingMessageContent" tp:name-for-bindings="Get_Pending_Message_Content">
      <tp:docstring>
        Retrieve the content of one or more parts of a pending message.
        Note that this function may take a considerable amount of time
        to return if the part's 'needs-retrieval' flag is true; consider
        extending the default D-Bus method call timeout. Additional API is
        likely to be added in future, to stream large message parts.
      </tp:docstring>

      <arg direction="in" name="Message_ID" tp:type="Message_ID" type="u">
        <tp:docstring>
          The ID of a pending message
        </tp:docstring>
      </arg>

      <arg direction="in" name="Parts" tp:type="Message_Part_Index[]" type="au">
        <tp:docstring>
          The desired entries in the array of message parts, identified by
          their position. The &quot;headers&quot; part (which is not a valid argument
          to this method) is considered to be part 0, so the valid part
          numbers start at 1 (for the second Message_Part).
        </tp:docstring>
      </arg>

      <arg direction="out" name="Content" tp:type="Message_Part_Content_Map" type="a{uv}">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The content of the requested parts. The keys in this mapping
            are positions in the array of message parts; the values are
            either of type 's' or 'ay' (UTF-8 text string, or byte array),
            following the same rules as for the value of the 'content' key in
            the <tp:type>Message_Part</tp:type> mappings.</p>

          <p>If the one of the requested part numbers was greater than zero
            but referred to a part that had no content (i.e. it had no
            'content-type' key or no 'content' key), it is simply omitted from
            this mapping; this is not considered to be an error condition.</p>
        </tp:docstring>
      </arg>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument">
          <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
            Either there is no pending message with the given message ID,
            or one of the part numbers given was 0 or too large.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable"/>
        <tp:error name="org.freedesktop.Telepathy.Error.PermissionDenied"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
      </tp:possible-errors>
    </method>

    <signal name="MessageReceived" tp:name-for-bindings="Message_Received">
      <tp:docstring>
        Signals that a message has been received and added to the pending
        messages queue. This MUST be emitted exactly once per emission of the
        <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type.Text">Received</tp:dbus-ref>
        signal on the Text interface.

        <tp:rationale>
          The double signal-emission provides compatibility with older
          clients. Clients supporting Messages should listen for
          Messages.MessageReceived only (if the channel has the Messages
          interface) or Text.Received only (otherwise).
        </tp:rationale>
      </tp:docstring>

      <arg name="Message" tp:type="Message_Part[]" type="aa{sv}">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          The message content, including any attachments or alternatives
        </tp:docstring>
      </arg>
    </signal>

    <tp:enum name="Delivery_Status" plural="Delivery_Statuses" type="u" value-prefix="Delivery_Status">
      <tp:docstring>
        <p>The status of a message as indicated by a delivery report.</p>

        <p>If this enum is extended in future specifications, this should
          only be to add new, non-overlapping conditions (i.e. all failures
          should still be signalled as either Temporarily_Failed
          or Permanently_Failed). If additional detail is required (e.g.
          distinguishing between the various types of permanent failure) this
          will be done using additional keys in the Message_Part.</p>
      </tp:docstring>

      <tp:enumvalue suffix="Unknown" value="0">
        <tp:docstring>
          The message's disposition is unknown.
          Clients SHOULD consider all messages to have status
          Delivery_Status_Unknown unless otherwise specified; connection
          managers SHOULD NOT signal this delivery status explicitly.
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Delivered" value="1">
        <tp:docstring>
          The message has been delivered to the intended recipient.
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Temporarily_Failed" value="2">
        <tp:docstring>
          Delivery of the message has failed. Clients SHOULD notify the user,
          but MAY automatically try sending another copy of the message.

          <tp:rationale>
            Similar to errors with type=&quot;wait&quot; in XMPP; analogous to
            4xx errors in SMTP.
          </tp:rationale>
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Permanently_Failed" value="3">
        <tp:docstring>
          Delivery of the message has failed. Clients SHOULD NOT try again
          unless by specific user action. If the user does not modify the
          message or alter configuration before re-sending, this error is
          likely to happen again.

          <tp:rationale>
            Similar to errors with type=&quot;cancel&quot;, type=&quot;modify&quot;
            or type=&quot;auth&quot; in XMPP; analogous to 5xx errors in SMTP.
          </tp:rationale>
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Accepted" value="4">
        <tp:docstring>
          An intermediate server has accepted the message but the message
          has not been yet delivered to the ultimate recipient. The
          connection manager might send a Failed report or Delivered report
          later.

          <tp:rationale>
            Similar to &quot;202 Accepted&quot; success code in SIP; analogous to
            251 and 252 responses in SMTP.
          </tp:rationale>
        </tp:docstring>
      </tp:enumvalue>
    </tp:enum>

    <tp:flags name="Delivery_Reporting_Support_Flags" type="u" value-prefix="Delivery_Reporting_Support_Flag">
      <tp:docstring>
        Flags indicating the level of support for delivery reporting on this
        channel. Any future flags added to this set will conform to the
        convention that the presence of an extra flag implies that
        more operations will succeed.
      </tp:docstring>

      <tp:flag suffix="Receive_Failures" value="1">
        <tp:docstring>
          Clients MAY expect to receive negative delivery reports if
          Message_Sending_Flag_Report_Delivery is specified when sending.

          <tp:rationale>
            If senders want delivery reports, they should ask for them.
            If they don't want delivery reports, they can just ignore them,
            so there's no need to have capability discovery for what will
            happen if a delivery report isn't requested.
          </tp:rationale>
        </tp:docstring>
      </tp:flag>

      <tp:flag suffix="Receive_Successes" value="2">
        <tp:docstring>
          Clients MAY expect to receive positive delivery reports if
          Message_Sending_Flag_Report_Delivery is specified when sending.

          <tp:rationale>
            Same rationale as Receive_Failures.
          </tp:rationale>
        </tp:docstring>
      </tp:flag>

    </tp:flags>

    <property access="read" name="DeliveryReportingSupport" tp:name-for-bindings="Delivery_Reporting_Support" tp:type="Delivery_Reporting_Support_Flags" type="u">
      <tp:docstring>
        A bitfield indicating features supported by this channel.
      </tp:docstring>
    </property>

  </interface>
</node>
<node name="/Channel_Interface_Password" xml:base="../spec/Channel_Interface_Password.xml">
  <tp:copyright>
Copyright © 2005-2009 Collabora Limited
Copyright © 2005-2009 Nokia Corporation
Copyright © 2006 INdT
  </tp:copyright>
  <tp:license>
    This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Channel.Interface.Password">
    <tp:requires interface="org.freedesktop.Telepathy.Channel"/>
    <tp:flags name="Channel_Password_Flags" type="u" value-prefix="Channel_Password_Flag">
      <tp:flag suffix="Provide" value="8">
        <tp:docstring>
          The <tp:member-ref>ProvidePassword</tp:member-ref> method must be
          called now for the user to join the channel
        </tp:docstring>
      </tp:flag>
    </tp:flags>
    <method name="GetPasswordFlags" tp:name-for-bindings="Get_Password_Flags">
      <arg direction="out" name="Password_Flags" tp:type="Channel_Password_Flags" type="u">
        <tp:docstring>
          An integer with the logical OR of all the flags set
          (values of ChannelPasswordFlags)
        </tp:docstring>
      </arg>
      <tp:docstring>
        Returns the bitwise-OR of the flags relevant to the password on this
        channel.  The user interface can use this to present information about
        which operations are currently valid.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
      </tp:possible-errors>
    </method>
    <signal name="PasswordFlagsChanged" tp:name-for-bindings="Password_Flags_Changed">
      <arg name="Added" tp:type="Channel_Password_Flags" type="u">
        <tp:docstring>
          A bitwise OR of the flags which have been set
        </tp:docstring>
      </arg>
      <arg name="Removed" tp:type="Channel_Password_Flags" type="u">
        <tp:docstring>
          A bitwise OR of the flags which have been cleared
        </tp:docstring>
      </arg>
      <tp:docstring>
        Emitted when the flags as returned by
        <tp:member-ref>GetPasswordFlags</tp:member-ref> are changed.
        The user interface should be updated as appropriate.
      </tp:docstring>
    </signal>
    <method name="ProvidePassword" tp:name-for-bindings="Provide_Password">
      <arg direction="in" name="Password" type="s">
        <tp:docstring>
          The password
        </tp:docstring>
      </arg>
      <arg direction="out" name="Correct" type="b">
        A boolean indicating whether or not the password was correct
      </arg>
      <tp:docstring>
        Provide the password so that the channel can be joined. Must be
        called with the correct password in order for channel joining to
        proceed if the 'provide' password flag is set.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument"/>
      </tp:possible-errors>
    </method>
    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>Interface for channels that may have a password set that users need
    to provide before being able to join, or may be able to view or change
    once they have joined the channel.</p>

    <p>The <tp:member-ref>GetPasswordFlags</tp:member-ref> method and the
    associated <tp:member-ref>PasswordFlagsChanged</tp:member-ref>
    signal indicate whether the channel has a password, whether the user
    must now provide it to join, and whether it can be viewed or changed
    by the user.</p>
    </tp:docstring>
  </interface>
</node>
<node name="/Channel_Interface_Tube" xml:base="../spec/Channel_Interface_Tube.xml">
  <tp:copyright>Copyright © 2008-2009 Collabora Limited</tp:copyright>
  <tp:copyright>Copyright © 2008-2009 Nokia Corporation</tp:copyright>
  <tp:license>
    This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Channel.Interface.Tube">
    <tp:requires interface="org.freedesktop.Telepathy.Channel"/>
    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>A <i>tube</i> is a mechanism for arbitrary data transfer between
      two or more IM users, used to allow applications on the users'
      systems to communicate without having to establish network
      connections themselves. Currently, two types of tube exist:
      <tp:dbus-ref namespace="org.freedesktop.Telepathy">Channel.Type.DBusTube</tp:dbus-ref> and
      <tp:dbus-ref namespace="org.freedesktop.Telepathy">Channel.Type.StreamTube</tp:dbus-ref>. This interface contains
      the properties, signals and methods common to both types of tube;
      you can only create channels of a specific tube type, not of this
      type. A tube channel contains exactly one tube; if you need several
      tubes, you have to create several tube channels.</p>

      <p>Tube channels can be requested for <tp:type>Handle_Type</tp:type>
        Contact (for 1-1 communication) or Room (to communicate with others in
        the room simultaneously).</p>

      <p>As an exception to the usual handling of capabilities, connection managers
        for protocols with capability discovery (such as XMPP) SHOULD advertise the
        capability representing each Tube type that they support
       (<tp:dbus-ref namespace="org.freedesktop.Telepathy">Channel.Type.DBusTube</tp:dbus-ref> and/or
        <tp:dbus-ref namespace="org.freedesktop.Telepathy">Channel.Type.StreamTube</tp:dbus-ref>)
        even if no client has indicated via
        <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection.Interface.ContactCapabilities">UpdateCapabilities</tp:dbus-ref>
        that such a tube is supported. They SHOULD also allow clients to offer tubes with any
        <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type.StreamTube">Service</tp:dbus-ref> or
        <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type.DBusTube">ServiceName</tp:dbus-ref>
        to any contact which supports the corresponding tube capability.</p>

      <tp:rationale>
        <p>This lowers the barrier to entry for those writing new tube
          applications, and preserves interoperability with older versions of
          the Telepathy stack which did not support rich capabilities.</p>
      </tp:rationale>
    </tp:docstring>

    <property access="read" name="Parameters" tp:name-for-bindings="Parameters" tp:type="String_Variant_Map" type="a{sv}">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Each tube has a dictionary of arbitrary parameters. Parameters are
          commonly used to bootstrap legacy protocols where you can't
          negotiate parameters in-band. The allowable keys,
          types and values are defined by the service, but connection managers
          must support the value being a string (D-Bus type <tt>'s'</tt>),
          array of bytes (D-Bus type <tt>'ay'</tt>), unsigned integer (D-Bus
          type <tt>'u'</tt>), integer (D-Bus type <tt>'i'</tt>) and boolean
          (D-Bus type <tt>'b'</tt>).</p>

        <p>When the tube is offered, the parameters are transmitted with the
          offer and appear as a property of the incoming tube for other
          participants.</p>

        <p>For example, a stream tube for <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type.StreamTube">Service</tp:dbus-ref>
          <tt>&quot;smb&quot;</tt> (<cite>Server Message Block over TCP/IP</cite>) might
          use the following properties, as defined in <a href="http://www.dns-sd.org/ServiceTypes.html">DNS SRV (RFC 2782)
          Service Types</a>:</p>

        <pre>
{ 'u': 'some-username',
  'p': 'top-secret-password',
  'path': '/etc/passwd',
}</pre>

        <p>When requesting a tube with
          <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection.Interface.Requests">CreateChannel</tp:dbus-ref>,
          this property MUST NOT be included in the request; instead, it is set
          when <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type">StreamTube.Offer</tp:dbus-ref>
          or <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type">DBusTube.Offer</tp:dbus-ref>
          (as appropriate) is called. Its value is undefined until the tube is
          offered; once set, its value MUST NOT change.</p>

        <p>When receiving an incoming tube, this property is immutable and so advertised in the
          <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection.Interface.Requests">NewChannels</tp:dbus-ref>
          signal.</p>
      </tp:docstring>
    </property>

    <property access="read" name="State" tp:name-for-bindings="State" tp:type="Tube_Channel_State" type="u">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>State of the tube in this channel.</p>

        <p>When requesting a tube with
          <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection.Interface.Requests">CreateChannel</tp:dbus-ref>,
          this property MUST NOT be included in the request.</p>
      </tp:docstring>
    </property>

    <tp:enum name="Tube_Channel_State" type="u">
      <tp:enumvalue suffix="Local_Pending" value="0">
        <tp:docstring>
          The initiator offered the tube. The tube is waiting to be
          accepted/closed locally. If the client accepts the tube, the tube's
          state will be Open.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Remote_Pending" value="1">
        <tp:docstring>
          The tube is waiting to be accepted/closed remotely. If the
          recipient accepts the tube, the tube's state will be Open.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Open" value="2">
        <tp:docstring>
          The initiator offered the tube and the recipient accepted it. The
          tube is open for traffic. The tube's state stays in this state until
          it is closed.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Not_Offered" value="3">
        <tp:docstring>
          The tube channel has been requested but the tube is not yet offered.
          The client should offer the tube to the recipient and the tube's
          state will be Remote_Pending. The method used to offer the tube
          depends on the tube type.
        </tp:docstring>
      </tp:enumvalue>
    </tp:enum>

    <signal name="TubeChannelStateChanged" tp:name-for-bindings="Tube_Channel_State_Changed">
      <tp:docstring>
        Emitted when the state of the tube channel changes. Valid state
        transitions are documented with <tp:type>Tube_Channel_State</tp:type>.
      </tp:docstring>
      <arg name="State" tp:type="Tube_Channel_State" type="u">
        <tp:docstring>
          The new state of the tube.
        </tp:docstring>
      </arg>
    </signal>

    <tp:enum name="Socket_Address_Type" type="u">
      <tp:enumvalue suffix="Unix" value="0">
        <tp:docstring>
          A Unix socket. The address variant contains a byte-array, signature 'ay',
          containing the path of the socket.
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Abstract_Unix" value="1">
        <tp:docstring>
          An abstract Unix socket. The address variant contains a byte-array,
          signature 'ay', containing the path of the socket including the
          leading null byte.
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="IPv4" value="2">
        <tp:docstring>
          An IPv4 socket. The address variant contains a Socket_Address_IPv4,
          i.e. a structure with signature (sq)
          in which the string is an IPv4 dotted-quad address literal
          (and must not be a DNS name), while the 16-bit unsigned integer is
          the port number.
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="IPv6" value="3">
        <tp:docstring>
          An IPv6 socket. The address variant contains a Socket_Address_IPv6,
          i.e. a structure with signature (sq)
          in which the string is an IPv6 address literal as specified in
          RFC2373 (and must not be a DNS name), while the 16-bit unsigned
          integer is the port number.
        </tp:docstring>
      </tp:enumvalue>

    </tp:enum>

    <tp:enum array-name="Socket_Access_Control_List" name="Socket_Access_Control" type="u">
      <tp:enumvalue suffix="Localhost" value="0">
        <tp:docstring>
          The IP or Unix socket can be accessed by any local user (e.g.
          a Unix socket that accepts all local connections, or an IP socket
          listening on 127.0.0.1 (or ::1) or rejecting connections not from
          that address). The associated variant must be ignored.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Port" value="1">
        <tp:docstring>
          May only be used on IP sockets. The associated variant must contain
          a struct Socket_Address_IPv4 (or Socket_Address_IPv6)
          containing the string form of an IP address of the appropriate
          version, and a port number. The socket can only be accessed if the
          connecting process has that address and port number; all other
          connections will be rejected.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Netmask" value="2">
        <tp:deprecated version="0.17.25">This has never been implemented.
        If you want to share a service to your whole LAN, Telepathy is
        not the way to do it.</tp:deprecated>
        <tp:docstring>
          May only be used on IP sockets. The associated variant must contain
          a struct Socket_Netmask_IPv4 (or Socket_Netmask_IPv6) with
          signature (sy), containing the string form of an
          IP address of the appropriate version, and a prefix length &quot;n&quot;.
          The socket can only be accessed if the first n bits of the
          connecting address match the first n bits of the given address.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Credentials" value="3">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>May only be used on UNIX sockets.
            The connecting process must send a byte when
            it first connects, which is not considered to be part of the data
            stream. If the operating system uses sendmsg() with SCM_CREDS or
            SCM_CREDENTIALS to pass credentials over sockets, the connecting
            process must do so if possible; if not, it must still send the
            byte.</p>

          <p>The listening process will disconnect the connection unless it
            can determine by OS-specific means that the connecting process
            has the same user ID as the listening process.</p>

          <p>The associated variant must be ignored.</p>
        </tp:docstring>
      </tp:enumvalue>
    </tp:enum>

  </interface>

</node>

</tp:spec>
<tp:spec>

<tp:title>Media session handler</tp:title>

<node name="/Media_Session_Handler" xml:base="../spec/Media_Session_Handler.xml">
  <tp:copyright> Copyright (C) 2005, 2006 Collabora Limited </tp:copyright>
  <tp:copyright> Copyright (C) 2005, 2006 Nokia Corporation </tp:copyright>
  <tp:copyright> Copyright (C) 2006 INdT </tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Media.SessionHandler">
    <method name="Error" tp:name-for-bindings="Error">
      <arg direction="in" name="Error_Code" tp:type="Media_Stream_Error" type="u"/>
      <arg direction="in" name="Message" type="s"/>
      <tp:deprecated version="0.13.4">
        Use <tp:dbus-ref namespace="org.freedesktop.Telepathy.Media">StreamHandler.Error</tp:dbus-ref>
        on each StreamHandler object instead.
      </tp:deprecated>
      <tp:docstring>
        Informs the connection manager that an error occured in this session.
        If used, the connection manager must terminate the session and all of
        the streams within it, and may also emit a <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type.StreamedMedia">StreamError</tp:dbus-ref>
        signal on the channel for each stream within the session.
      </tp:docstring>
    </method>
    <signal name="NewStreamHandler" tp:name-for-bindings="New_Stream_Handler">
      <arg name="Stream_Handler" type="o">
        <tp:docstring>
          The path of a new object implementing the <tp:dbus-ref namespace="org.freedesktop.Telepathy.Media">StreamHandler</tp:dbus-ref>
          interface.
        </tp:docstring>
      </arg>
      <arg name="ID" type="u">
        <tp:docstring>
          The unique ID of the new stream
        </tp:docstring>
      </arg>
      <arg name="Media_Type" tp:type="Media_Stream_Type" type="u">
        <tp:docstring>
          Type of media that this stream should handle
        </tp:docstring>
      </arg>
      <arg name="Direction" tp:type="Media_Stream_Direction" type="u">
        <tp:docstring>
          Direction of this stream
        </tp:docstring>
      </arg>
      <tp:docstring>
        Emitted when a new stream handler has been created for this
        session.
      </tp:docstring>
    </signal>
    <method name="Ready" tp:name-for-bindings="Ready">
      <tp:docstring>
        Inform the connection manager that a client is ready to handle
        this session handler (i.e. that it has connected to the
        <tp:member-ref>NewStreamHandler</tp:member-ref> signal and done any
        other necessary setup).
      </tp:docstring>
    </method>
    <tp:docstring>
      An media session handler is an object that handles a number of synchronised
    media streams.
    </tp:docstring>
  </interface>
</node>

</tp:spec>
<tp:spec>

<tp:title>Media stream handler</tp:title>

<node name="/Media_Stream_Handler" xml:base="../spec/Media_Stream_Handler.xml">
  <tp:copyright> Copyright (C) 2005-2008 Collabora Limited </tp:copyright>
  <tp:copyright> Copyright (C) 2005-2008 Nokia Corporation </tp:copyright>
  <tp:copyright> Copyright (C) 2006 INdT </tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Media.StreamHandler">

    <tp:struct array-name="Media_Stream_Handler_Candidate_List" name="Media_Stream_Handler_Candidate">
      <tp:member name="Name" type="s"/>
      <tp:member name="Transports" tp:type="Media_Stream_Handler_Transport[]" type="a(usuussduss)"/>
    </tp:struct>

    <tp:struct array-name="Media_Stream_Handler_Transport_List" name="Media_Stream_Handler_Transport">
      <tp:member name="Component_Number" type="u"/>
      <tp:member name="IP_Address" type="s"/>
      <tp:member name="Port" type="u"/>
      <tp:member name="Protocol" tp:type="Media_Stream_Base_Proto" type="u"/>
      <tp:member name="Subtype" type="s"/>
      <tp:member name="Profile" type="s"/>
      <tp:member name="Preference_Value" type="d"/>
      <tp:member name="Transport_Type" tp:type="Media_Stream_Transport_Type" type="u"/>
      <tp:member name="Username" type="s"/>
      <tp:member name="Password" type="s"/>
    </tp:struct>

    <tp:struct array-name="Media_Stream_Handler_Codec_List" name="Media_Stream_Handler_Codec">
      <tp:docstring>
        Information about a codec supported by a client or a peer's client.
      </tp:docstring>

      <tp:member name="Codec_ID" type="u">
        <tp:docstring>
          The codec's payload identifier, as per RFC 3551 (static or dynamic)
        </tp:docstring>
      </tp:member>
      <tp:member name="Name" type="s">
        <tp:docstring>The codec's name</tp:docstring>
      </tp:member>
      <tp:member name="Media_Type" tp:type="Media_Stream_Type" type="u">
        <tp:docstring>Type of stream this codec supports</tp:docstring>
      </tp:member>
      <tp:member name="Clock_Rate" type="u">
        <tp:docstring>Sampling frequency in Hertz</tp:docstring>
      </tp:member>
      <tp:member name="Number_Of_Channels" type="u">
        <tp:docstring>Number of supported channels</tp:docstring>
      </tp:member>
      <tp:member name="Parameters" tp:type="String_String_Map" type="a{ss}">
        <tp:docstring>Codec-specific optional parameters</tp:docstring>
      </tp:member>
    </tp:struct>

    <property access="read" name="STUNServers" tp:name-for-bindings="STUN_Servers" tp:type="Socket_Address_IP[]" type="a(sq)">
      <tp:added version="0.17.22"/>
      <tp:docstring>
        The IP addresses of possible STUN servers to use for NAT traversal, as
        dotted-quad IPv4 address literals or RFC2373 IPv6 address literals.
        This property cannot change once the stream has been created, so there
        is no change notification. The IP addresses MUST NOT be given as DNS
        hostnames.

        <tp:rationale>
          High-quality connection managers already need an asynchronous
          DNS resolver, so they might as well resolve this name to an IP
          to make life easier for streaming implementations.
        </tp:rationale>
      </tp:docstring>
    </property>

    <property access="read" name="CreatedLocally" tp:name-for-bindings="Created_Locally" type="b">
      <tp:added version="0.17.22"/>
      <tp:docstring>
        True if we were the creator of this stream, false otherwise.
        <tp:rationale>
          This information is needed for some nat traversal mechanisms, such
          as ICE-UDP, where the creator gets the role of the controlling agent.
        </tp:rationale>
      </tp:docstring>
    </property>

    <property access="read" name="NATTraversal" tp:name-for-bindings="NAT_Traversal" type="s">
      <tp:added version="0.17.22"/>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The transport (NAT traversal technique) to be used for this
          stream. Well-known values include:</p>

        <dl>
          <dt>none</dt>
          <dd>Raw UDP, with or without STUN, should be used. If the
            <tp:member-ref>STUNServers</tp:member-ref> property is non-empty,
            STUN SHOULD be used.</dd>

          <dt>stun</dt>
          <dd>A deprecated synonym for 'none'.</dd>

          <dt>gtalk-p2p</dt>
          <dd>Google Talk peer-to-peer connectivity establishment should be
            used, as implemented in libjingle 0.3.</dd>

          <dt>ice-udp</dt>
          <dd>Interactive Connectivity Establishment should be used,
            as defined by the IETF MMUSIC working group.</dd>

          <dt>wlm-8.5</dt>
          <dd>The transport used by Windows Live Messenger 8.5 or later,
            which resembles ICE draft 6, should be used.</dd>

          <dt>wlm-2009</dt>
          <dd>The transport used by Windows Live Messenger 2009 or later,
            which resembles ICE draft 19, should be used.</dd>
        </dl>

        <p>This property cannot change once the stream has been created, so
          there is no change notification.</p>
      </tp:docstring>
    </property>

    <property access="read" name="RelayInfo" tp:name-for-bindings="Relay_Info" tp:type="String_Variant_Map[]" type="aa{sv}">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>A list of mappings describing TURN or Google relay servers
          available for the client to use in its candidate gathering, as
          determined from the protocol. Map keys are:</p>

        <dl>
          <dt><code>ip</code> - s</dt>
          <dd>The IP address of the relay server as a dotted-quad IPv4
            address literal or an RFC2373 IPv6 address literal. This MUST NOT
            be a DNS hostname.

            <tp:rationale>
              High-quality connection managers already need an asynchronous
              DNS resolver, so they might as well resolve this name to an IP
              and make life easier for streaming implementations.
            </tp:rationale>
          </dd>

          <dt><code>type</code> - s</dt>
          <dd>
            <p>Either <code>udp</code> for UDP (UDP MUST be assumed if this
              key is omitted), <code>tcp</code> for TCP, or
              <code>tls</code>.</p>

            <p>The precise meaning of this key depends on the
              <tp:member-ref>NATTraversal</tp:member-ref> property: if
              NATTraversal is <code>ice-udp</code>, <code>tls</code> means
              TLS over TCP as referenced by ICE draft 19, and if
              NATTraversal is <code>gtalk-p2p</code>, <code>tls</code> means
              a fake SSL session over TCP as implemented by libjingle.</p>
          </dd>

          <dt><code>port</code> - q</dt>
          <dd>The UDP or TCP port of the relay server as an ASCII unsigned
            integer</dd>

          <dt><code>username</code> - s</dt>
          <dd>The username to use</dd>

          <dt><code>password</code> - s</dt>
          <dd>The password to use</dd>

          <dt><code>component</code> - u</dt>
          <dd>The component number to use this relay server for, as an
            ASCII unsigned integer; if not included, this relay server
            may be used for any or all components.

            <tp:rationale>
              In ICE draft 6, as used by Google Talk, credentials are only
              valid once, so each component needs relaying separately.
            </tp:rationale>
          </dd>
        </dl>

        <tp:rationale>
          <p>An equivalent of the gtalk-p2p-relay-token property on
            MediaSignalling channels is not included here. The connection
            manager should be responsible for making the necessary HTTP
            requests to turn the token into a username and password.</p>
        </tp:rationale>

        <p>The type of relay server that this represents depends on
          the value of the <tp:member-ref>NATTraversal</tp:member-ref>
          property. If NATTraversal is ice-udp, this is a TURN server;
          if NATTraversal is gtalk-p2p, this is a Google relay server;
          otherwise, the meaning of RelayInfo is undefined.</p>

        <p>If relaying is not possible for this stream, the list is empty.</p>

        <p>This property cannot change once the stream has been created, so
          there is no change notification.</p>
      </tp:docstring>
    </property>

    <signal name="AddRemoteCandidate" tp:name-for-bindings="Add_Remote_Candidate">
      <arg name="Candidate_ID" type="s">
        <tp:docstring>
          String identifier for this candidate
        </tp:docstring>
      </arg>
      <arg name="Transports" tp:type="Media_Stream_Handler_Transport[]" type="a(usuussduss)">
        <tp:docstring>
          Array of transports for this candidate with fields,
          as defined in NewNativeCandidate
        </tp:docstring>
      </arg>
      <tp:docstring>
        Signal emitted when the connection manager wishes to inform the
        client of a new remote candidate.
      </tp:docstring>
    </signal>
    <signal name="Close" tp:name-for-bindings="Close">
      <tp:docstring>
        Signal emitted when the connection manager wishes the stream to be
        closed.
      </tp:docstring>
    </signal>
    <method name="CodecChoice" tp:name-for-bindings="Codec_Choice">
      <arg direction="in" name="Codec_ID" type="u"/>
      <tp:docstring>
        Inform the connection manager of codec used to receive data.
      </tp:docstring>
    </method>
    <method name="Error" tp:name-for-bindings="Error">
      <arg direction="in" name="Error_Code" tp:type="Media_Stream_Error" type="u">
        <tp:docstring>
          ID of error, from the MediaStreamError enumeration
        </tp:docstring>
      </arg>
      <arg direction="in" name="Message" type="s">
        <tp:docstring>
          String describing the error
        </tp:docstring>
      </arg>
      <tp:docstring>
        Inform the connection manager that an error occured in this stream. The
        connection manager should emit the StreamError signal for the stream on
        the relevant channel, and remove the stream from the session.
      </tp:docstring>
    </method>
    <tp:enum name="Media_Stream_Error" type="u">
      <tp:enumvalue suffix="Unknown" value="0">
        <tp:docstring>
          An unknown error occured.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="EOS" value="1">
        <tp:docstring>
          The end of the stream was reached.
        </tp:docstring>
        <tp:deprecated version="0.17.27">
          This error has no use anywhere. In Farsight 1 times, it was used to
          indicate a GStreamer EOS (when the end of a file is reached). But
          since this is for live calls, it makes no sense.
        </tp:deprecated>
      </tp:enumvalue>
      <tp:enumvalue suffix="Codec_Negotiation_Failed" value="2">
        <tp:added version="0.17.27"/>
        <tp:docstring>
          There are no common codecs between the local side
          and the other particpants in the call. The possible codecs are not
          signalled here: the streaming implementation is assumed to report
          them in an implementation-dependent way, e.g. Farsight should use
          GstMissingElement.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Connection_Failed" value="3">
        <tp:added version="0.17.27"/>
        <tp:docstring>
          A network connection for the Media could not be established or was
          lost.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Network_Error" value="4">
        <tp:added version="0.17.27"/>
        <tp:docstring>
          There was an error in the networking stack
          (other than the connection failure).
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="No_Codecs" value="5">
        <tp:added version="0.17.27"/>
        <tp:docstring>
          There are no installed codecs for this media type.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Invalid_CM_Behavior" value="6">
        <tp:added version="0.17.27"/>
        <tp:docstring>
          The CM is doing something wrong.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Media_Error" value="7">
        <tp:added version="0.17.27"/>
        <tp:docstring>
          There was an error in the media processing stack.
        </tp:docstring>
      </tp:enumvalue>
    </tp:enum>
    <method name="NativeCandidatesPrepared" tp:name-for-bindings="Native_Candidates_Prepared">
      <tp:docstring>
        Informs the connection manager that all possible native candisates
        have been discovered for the moment.
      </tp:docstring>
    </method>
    <method name="NewActiveCandidatePair" tp:name-for-bindings="New_Active_Candidate_Pair">
      <arg direction="in" name="Native_Candidate_ID" type="s"/>
      <arg direction="in" name="Remote_Candidate_ID" type="s"/>
      <tp:docstring>
        Informs the connection manager that a valid candidate pair
        has been discovered and streaming is in progress.
      </tp:docstring>
    </method>
    <tp:enum name="Media_Stream_Base_Proto" type="u">
      <tp:enumvalue suffix="UDP" value="0">
        <tp:docstring>UDP (User Datagram Protocol)</tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="TCP" value="1">
        <tp:docstring>TCP (Transmission Control Protocol)</tp:docstring>
      </tp:enumvalue>
    </tp:enum>
    <method name="NewNativeCandidate" tp:name-for-bindings="New_Native_Candidate">
      <arg direction="in" name="Candidate_ID" type="s">
        <tp:docstring>
          String identifier for this candidate
        </tp:docstring>
      </arg>
      <arg direction="in" name="Transports" tp:type="Media_Stream_Handler_Transport[]" type="a(usuussduss)">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          Array of transports for this candidate, with fields:
          <ul>
            <li>component number</li>
            <li>IP address (as a string)</li>
            <li>port</li>
            <li>base network protocol (one of the values of MediaStreamBaseProto)</li>
            <li>proto subtype (e.g. RTP)</li>
            <li>proto profile (e.g. AVP)</li>
            <li>our preference value of this transport (double in range 0.0-1.0
              inclusive); 1 signals the most preferred transport</li>
            <li>transport type, one of the values of MediaStreamTransportType</li>
            <li>username if authentication is required</li>
            <li>password if authentication is required</li>
          </ul>
        </tp:docstring>
      </arg>
      <tp:docstring>
        Inform this MediaStreamHandler that a new native transport candidate
        has been ascertained.
      </tp:docstring>
    </method>
    <tp:enum name="Media_Stream_Transport_Type" type="u">
      <tp:enumvalue suffix="Local" value="0">
        <tp:docstring>
          A local address
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Derived" value="1">
        <tp:docstring>
          An external address derived by a method such as STUN
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Relay" value="2">
        <tp:docstring>
          An external stream relay
        </tp:docstring>
      </tp:enumvalue>
    </tp:enum>
    <method name="Ready" tp:name-for-bindings="Ready">
      <arg direction="in" name="Codecs" tp:type="Media_Stream_Handler_Codec[]" type="a(usuuua{ss})">
        <tp:docstring>
          Locally-supported codecs.
        </tp:docstring>
      </arg>
      <tp:docstring>
        Inform the connection manager that a client is ready to handle
        this StreamHandler. Also provide it with info about all supported
        codecs.
      </tp:docstring>
    </method>
    <method name="SetLocalCodecs" tp:name-for-bindings="Set_Local_Codecs">
      <arg direction="in" name="Codecs" tp:type="Media_Stream_Handler_Codec[]" type="a(usuuua{ss})">
        <tp:docstring>
          Locally-supported codecs
        </tp:docstring>
      </arg>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Used to provide codecs after Ready(), so the media client can go
          ready for an incoming call and exchange candidates/codecs before
          knowing what local codecs are available.</p>

        <p>This is useful for gatewaying calls between two connection managers.
          Given an incoming call, you need to call
          <tp:member-ref>Ready</tp:member-ref> to get the remote codecs before
          you can use them as the &quot;local&quot; codecs to place the outgoing call,
          and hence receive the outgoing call's remote codecs to use as the
          incoming call's &quot;local&quot; codecs.</p>

        <p>In this situation, you would pass an empty list of codecs to the
          incoming call's Ready method, then later call SetLocalCodecs on the
          incoming call in order to respond to the offer.</p>
      </tp:docstring>
    </method>
    <signal name="RemoveRemoteCandidate" tp:name-for-bindings="Remove_Remote_Candidate">
      <arg name="Candidate_ID" type="s">
        <tp:docstring>
          String identifier for remote candidate to drop
        </tp:docstring>
      </arg>
      <tp:deprecated version="0.17.18">
        There is no case where you want to release candidates (except
        for an ICE reset, and there you'd want to replace then all,
        using <tp:member-ref>SetRemoteCandidateList</tp:member-ref>).
      </tp:deprecated>
      <tp:docstring>
        Signal emitted when the connection manager wishes to inform the
        client that the remote end has removed a previously usable
        candidate.

        <tp:rationale>
          It seemed like a good idea at the time, but wasn't.
        </tp:rationale>
      </tp:docstring>
    </signal>
    <signal name="SetActiveCandidatePair" tp:name-for-bindings="Set_Active_Candidate_Pair">
      <arg name="Native_Candidate_ID" type="s"/>
      <arg name="Remote_Candidate_ID" type="s"/>
      <tp:docstring>
        Emitted by the connection manager to inform the client that a
        valid candidate pair has been discovered by the remote end
        and streaming is in progress.
      </tp:docstring>
    </signal>
    <signal name="SetRemoteCandidateList" tp:name-for-bindings="Set_Remote_Candidate_List">
      <arg name="Remote_Candidates" tp:type="Media_Stream_Handler_Candidate[]" type="a(sa(usuussduss))">
        <tp:docstring>
        A list of candidate id and a list of transports
        as defined in NewNativeCandidate
        </tp:docstring>
      </arg>
      <tp:docstring>
        Signal emitted when the connection manager wishes to inform the
        client of all the available remote candidates at once.
      </tp:docstring>
    </signal>
    <signal name="SetRemoteCodecs" tp:name-for-bindings="Set_Remote_Codecs">
      <arg name="Codecs" tp:type="Media_Stream_Handler_Codec[]" type="a(usuuua{ss})">
        <tp:docstring>
          Codecs supported by the remote peer.
        </tp:docstring>
      </arg>
      <tp:docstring>
        Signal emitted when the connection manager wishes to inform the
        client of the codecs supported by the remote end.
	If these codecs are compatible with the remote codecs, then the client
        must call <tp:member-ref>SupportedCodecs</tp:member-ref>,
        otherwise call <tp:member-ref>Error</tp:member-ref>.
      </tp:docstring>
    </signal>
    <signal name="SetStreamPlaying" tp:name-for-bindings="Set_Stream_Playing">
      <arg name="Playing" type="b"/>
      <tp:docstring>
        If emitted with argument TRUE, this means that the connection manager
        wishes to set the stream playing; this means that the streaming
        implementation should expect to receive data. If emitted with argument
        FALSE this signal is basically meaningless and should be ignored.

        <tp:rationale>
          We're very sorry.
        </tp:rationale>
      </tp:docstring>
    </signal>
    <signal name="SetStreamSending" tp:name-for-bindings="Set_Stream_Sending">
      <arg name="Sending" type="b"/>
      <tp:docstring>
        Signal emitted when the connection manager wishes to set whether or not
        the stream sends to the remote end.
      </tp:docstring>
    </signal>
    <signal name="StartTelephonyEvent" tp:name-for-bindings="Start_Telephony_Event">
      <arg name="Event" type="y">
        <tp:docstring>
          A telephony event code as defined by RFC 4733.
        </tp:docstring>
      </arg>
      <tp:docstring>
        Request that a telephony event (as defined by RFC 4733) is transmitted
        over this stream until StopTelephonyEvent is called.
      </tp:docstring>
    </signal>
    <signal name="StopTelephonyEvent" tp:name-for-bindings="Stop_Telephony_Event">
      <tp:docstring>
        Request that any ongoing telephony events (as defined by RFC 4733)
        being transmitted over this stream are stopped.
      </tp:docstring>
    </signal>
    <method name="StreamState" tp:name-for-bindings="Stream_State">
      <arg direction="in" name="State" tp:type="Media_Stream_State" type="u"/>
      <tp:docstring>
        Informs the connection manager of the stream's current state, as
        as specified in Channel.Type.StreamedMedia::ListStreams.
      </tp:docstring>
    </method>

    <method name="SupportedCodecs" tp:name-for-bindings="Supported_Codecs">
      <arg direction="in" name="Codecs" tp:type="Media_Stream_Handler_Codec[]" type="a(usuuua{ss})">
        <tp:docstring>
          Locally supported codecs.
        </tp:docstring>
      </arg>
      <tp:docstring>
        Inform the connection manager of the supported codecs for this session.
        This is called after the connection manager has emitted SetRemoteCodecs
        to notify what codecs are supported by the peer, and will thus be an
        intersection of all locally supported codecs (passed to Ready)
        and those supported by the peer.
      </tp:docstring>
    </method>

    <method name="CodecsUpdated" tp:name-for-bindings="Codecs_Updated">
      <arg direction="in" name="Codecs" tp:type="Media_Stream_Handler_Codec[]" type="a(usuuua{ss})">
        <tp:docstring>
          Locally supported codecs, which SHOULD be the same as were previously
          in effect, but possibly with different parameters.
        </tp:docstring>
      </arg>
      <tp:docstring>
        Inform the connection manager that the parameters of the supported
        codecs for this session have changed. The connection manager should
        send the new parameters to the remote contact.

        <tp:rationale>
          This is required for H.264 and Theora, for example.
        </tp:rationale>
      </tp:docstring>
    </method>

    <signal name="SetStreamHeld" tp:name-for-bindings="Set_Stream_Held">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Emitted when the connection manager wishes to place the stream on
          hold (so the streaming client should free hardware or software
          resources) or take the stream off hold (so the streaming client
          should reacquire the necessary resources).</p>

        <p>When placing a channel's streams on hold, the connection manager
          SHOULD notify the remote contact that this will be done (if
          appropriate in the protocol) before it emits this signal.</p>

        <tp:rationale>
          <p>It is assumed that relinquishing a resource will not fail.
            If it does, the call is probably doomed anyway.</p>
        </tp:rationale>

        <p>When unholding a channel's streams, the connection manager
          SHOULD emit this signal and wait for success to be indicated
          via HoldState before it notifies the remote contact that the
          channel has been taken off hold.</p>

        <tp:rationale>
          <p>This means that if a resource is unavailable, the remote
            contact will never even be told that we tried to acquire it.</p>
        </tp:rationale>
      </tp:docstring>
      <tp:added version="0.17.3"/>

      <arg name="Held" type="b">
        <tp:docstring>
          If true, the stream is to be placed on hold.
        </tp:docstring>
      </arg>
    </signal>

    <method name="HoldState" tp:name-for-bindings="Hold_State">
      <tp:docstring>
        Notify the connection manager that the stream's hold state has
        been changed successfully in response to SetStreamHeld.
      </tp:docstring>
      <tp:added version="0.17.3"/>
      <arg direction="in" name="Held" type="b">
        <tp:docstring>
          If true, the stream is now on hold.
        </tp:docstring>
      </arg>
    </method>

    <method name="UnholdFailure" tp:name-for-bindings="Unhold_Failure">
      <tp:docstring>
        Notify the connection manager that an attempt to reacquire the
        necessary hardware or software resources to unhold the stream,
        in response to SetStreamHeld, has failed.
      </tp:docstring>
      <tp:added version="0.17.3"/>
    </method>

    <tp:docstring>
    Handles signalling the information pertaining to a specific media stream.
    A client should provide information to this handler as and when it is
    available.
    </tp:docstring>
  </interface>
</node>

</tp:spec>
<tp:spec>

<tp:title>Generic interfaces</tp:title>

<tp:spec>

  <tp:title>D-Bus peer</tp:title>

  <node name="/DBus_Peer">
    <interface name="org.freedesktop.DBus.Peer" tp:implement-service="no">

      <method name="Ping" tp:name-for-bindings="Ping">
      </method>

      <method name="GetMachineId" tp:name-for-bindings="Get_Machine_Id">
        <arg direction="out" name="Machine_UUID" type="s"/>
      </method>

    </interface>
  </node>

</tp:spec>
<tp:spec>

  <tp:title>D-Bus introspectable object</tp:title>

  <node name="/DBus_Introspectable">
    <interface name="org.freedesktop.DBus.Introspectable">

      <method name="Introspect" tp:name-for-bindings="Introspect">
        <arg direction="out" name="XML_Data" type="s"/>
      </method>

    </interface>
  </node>

</tp:spec>
<tp:spec>

  <tp:title>D-Bus Properties</tp:title>

  <node name="/DBus_Properties">
    <interface name="org.freedesktop.DBus.Properties">

      <method name="Get" tp:name-for-bindings="Get">
        <arg direction="in" name="Interface_Name" type="s"/>
        <arg direction="in" name="Property_Name" type="s"/>
        <arg direction="out" name="Value" type="v"/>
      </method>

      <method name="Set" tp:name-for-bindings="Set">
        <arg direction="in" name="Interface_Name" type="s"/>
        <arg direction="in" name="Property_Name" type="s"/>
        <arg direction="in" name="Value" type="v"/>
      </method>

      <method name="GetAll" tp:name-for-bindings="Get_All">
        <arg direction="in" name="Interface_Name" type="s"/>
        <arg direction="out" name="Properties" type="a{sv}"/>
      </method>

    </interface>
  </node>

</tp:spec>

<node name="/Properties_Interface" xml:base="../spec/Properties_Interface.xml">
  <tp:copyright> Copyright (C) 2005-2007 Collabora Limited </tp:copyright>
  <tp:copyright> Copyright (C) 2005, 2006 Nokia Corporation </tp:copyright>
  <tp:copyright> Copyright (C) 2006 INdT </tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Properties">

    <tp:struct array-name="Property_Spec_List" name="Property_Spec">
      <tp:docstring>A struct (property ID, property name, D-Bus signature,
        flags) representing a property, as returned by ListProperties on the
        Properties interface.</tp:docstring>
      <tp:member name="Property_ID" type="u"/>
      <tp:member name="Name" type="s"/>
      <tp:member name="Signature" tp:type="DBus_Signature" type="s"/>
      <tp:member name="Flags" tp:type="Property_Flags" type="u"/>
    </tp:struct>

    <tp:struct array-name="Property_Flags_Change_List" name="Property_Flags_Change">
      <tp:docstring>A struct (property ID, flags) representing a change to
        a property's flags, as seen in the PropertyFlagsChanged signal on
        the Properties interface.</tp:docstring>
      <tp:member name="Property_ID" type="u"/>
      <tp:member name="New_Flags" type="u"/>
    </tp:struct>

    <tp:simple-type array-name="Property_ID_List" name="Property_ID" type="u">
      <tp:docstring>
        An unsigned integer used to represent a Telepathy property.
      </tp:docstring>
    </tp:simple-type>

    <tp:struct array-name="Property_Value_List" name="Property_Value">
      <tp:docstring>A struct (property ID, value) representing a
        property's value, as seen in the PropertiesChanged signal on
        the Properties interface, returned by the GetProperties method
        and passed to the SetProperties method.</tp:docstring>
      <tp:member name="Identifier" tp:type="Property_ID" type="u"/>
      <tp:member name="Value" type="v"/>
    </tp:struct>

    <method name="GetProperties" tp:name-for-bindings="Get_Properties">
      <tp:docstring>
        Returns an array of (identifier, value) pairs containing the current
        values of the given properties.
      </tp:docstring>
      <arg direction="in" name="Properties" tp:type="Property_ID[]" type="au">
        <tp:docstring>An array of property identifiers</tp:docstring>
      </arg>
      <arg direction="out" name="Values" tp:type="Property_Value[]" type="a(uv)">
        <!-- XXX: if we're ever breaking API compatibility, make this a{uv} -->
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>An array of structs containing:</p>
          <ul>
            <li>integer identifiers</li>
            <li>variant boxed values</li>
          </ul>
        </tp:docstring>
      </arg>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument">
          <tp:docstring>
            Some property identifier requested is invalid
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.PermissionDenied">
          <tp:docstring>
            Some property requested does not have the PROPERTY_FLAG_READ flag
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>
    <method name="ListProperties" tp:name-for-bindings="List_Properties">
      <tp:docstring>
        Returns a dictionary of the properties available on this channel.
      </tp:docstring>
      <arg direction="out" name="Available_Properties" tp:type="Property_Spec[]" type="a(ussu)">
        <!-- XXX: if we're ever breaking API compatibility, make this
        a{u(ssu)} ? -->
        <tp:docstring>
          An array of structs containing:
          <ul>
            <li>an integer identifier</li>
            <li>a string property name</li>
            <li>a string representing the D-Bus signature of this property</li>
            <li>a bitwise OR of the flags applicable to this property</li>
          </ul>
        </tp:docstring>
      </arg>
    </method>
    <signal name="PropertiesChanged" tp:name-for-bindings="Properties_Changed">
      <tp:docstring>
        Emitted when the value of readable properties has changed.
      </tp:docstring>
      <arg name="Properties" tp:type="Property_Value[]" type="a(uv)">
        <!-- XXX: if we're ever breaking API compatibility, make this a{uv} -->
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>An array of structs containing:</p>
          <ul>
            <li>integer identifiers</li>
            <li>variant boxed values</li>
          </ul>
          <p>The array should contain only properties whose values have
            actually changed.</p>
        </tp:docstring>
      </arg>
    </signal>
    <signal name="PropertyFlagsChanged" tp:name-for-bindings="Property_Flags_Changed">
      <tp:docstring>
        Emitted when the flags of some room properties have changed.
      </tp:docstring>
      <arg name="Properties" tp:type="Property_Flags_Change[]" type="a(uu)">
        <!-- XXX: if we're ever breaking API compatibility, make this a{uu} -->
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>An array of structs containing:</p>
          <ul>
            <li>integer identifiers</li>
            <li>a bitwise OR of the current flags</li>
          </ul>
          <p>The array should contain only properties whose flags have actually
            changed.</p>
        </tp:docstring>
      </arg>
    </signal>
    <method name="SetProperties" tp:name-for-bindings="Set_Properties">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Takes an array of (identifier, value) pairs containing desired
          values to set the given properties. In the case of any errors, no
          properties will be changed. When the changes have been acknowledged
          by the server, the PropertiesChanged signal will be emitted.</p>

        <p>All properties given must have the PROPERTY_FLAG_WRITE flag, or
        PermissionDenied will be returned. If any variants are of the wrong
        type, NotAvailable will be returned.  If any given property identifiers
        are invalid, InvalidArgument will be returned.</p>
      </tp:docstring>

      <arg direction="in" name="Properties" tp:type="Property_Value[]" type="a(uv)">
        <!-- XXX: if we're ever breaking API compatibility, make this a{uv} -->
      <tp:docstring>
        An array mapping integer property identifiers to boxed values
      </tp:docstring>
      </arg>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable"/>
        <tp:error name="org.freedesktop.Telepathy.Error.PermissionDenied"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
      </tp:possible-errors>
    </method>
    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>Interface for channels and other objects, to allow querying and setting
    properties. ListProperties returns which properties are valid for
    the given channel, including their type, and an integer handle used to
    refer to them in GetProperties, SetProperties, and the PropertiesChanged
    signal. The values are represented by D-Bus variant types, and are
    accompanied by flags indicating whether or not the property is readable or
    writable.</p>

    <p>Each property also has a flags value to indicate what methods are
    available. This is a bitwise OR of PropertyFlags values.</p>
    </tp:docstring>
    <tp:flags name="Property_Flags" type="u" value-prefix="Property_Flag">
      <tp:flag suffix="Read" value="1">
        <tp:docstring>The property can be read</tp:docstring>
      </tp:flag>
      <tp:flag suffix="Write" value="2">
        <tp:docstring>The property can be written</tp:docstring>
      </tp:flag>
    </tp:flags>
  </interface>
</node>

</tp:spec>
<tp:spec>

  <tp:title>D-Bus Daemon</tp:title>

  <node name="/DBus_Daemon">
    <interface name="org.freedesktop.DBus">
      <method name="Hello" tp:name-for-bindings="Hello">
        <arg direction="out" type="s"/>
      </method>
      <method name="RequestName" tp:name-for-bindings="Request_Name">
        <arg direction="in" type="s"/>
        <arg direction="in" type="u"/>
        <arg direction="out" type="u"/>
      </method>
      <method name="ReleaseName" tp:name-for-bindings="Release_Name">
        <arg direction="in" type="s"/>
        <arg direction="out" type="u"/>
      </method>
      <method name="StartServiceByName" tp:name-for-bindings="Start_Service_By_Name">
        <arg direction="in" type="s"/>
        <arg direction="in" type="u"/>
        <arg direction="out" type="u"/>
      </method>
      <method name="NameHasOwner" tp:name-for-bindings="Name_Has_Owner">
        <arg direction="in" type="s"/>
        <arg direction="out" type="b"/>
      </method>
      <method name="ListNames" tp:name-for-bindings="List_Names">
        <arg direction="out" type="as"/>
      </method>
      <method name="ListActivatableNames" tp:name-for-bindings="List_Activatable_Names">
        <arg direction="out" type="as"/>
      </method>
      <method name="AddMatch" tp:name-for-bindings="Add_Match">
        <arg direction="in" type="s"/>
      </method>
      <method name="RemoveMatch" tp:name-for-bindings="Remove_Match">
        <arg direction="in" type="s"/>
      </method>
      <method name="GetNameOwner" tp:name-for-bindings="Get_Name_Owner">
        <arg direction="in" type="s"/>
        <arg direction="out" type="s"/>
      </method>
      <method name="ListQueuedOwners" tp:name-for-bindings="List_Queued_Owners">
        <arg direction="in" type="s"/>
        <arg direction="out" type="as"/>
      </method>
      <method name="GetConnectionUnixUser" tp:name-for-bindings="Get_Connection_Unix_User">
        <arg direction="in" type="s"/>
        <arg direction="out" type="u"/>
      </method>
      <method name="GetConnectionUnixProcessID" tp:name-for-bindings="Get_Connection_Unix_Process_ID">
        <arg direction="in" type="s"/>
        <arg direction="out" type="u"/>
      </method>
      <method name="GetConnectionSELinuxSecurityContext" tp:name-for-bindings="Get_Connection_SE_Linux_Security_Context">
        <arg direction="in" type="s"/>
        <arg direction="out" type="ay"/>
      </method>
      <method name="ReloadConfig" tp:name-for-bindings="Reload_Config">
      </method>
      <method name="GetId" tp:name-for-bindings="Get_Id">
        <arg direction="out" type="s"/>
      </method>
      <signal name="NameOwnerChanged" tp:name-for-bindings="Name_Owner_Changed">
        <arg type="s"/>
        <arg type="s"/>
        <arg type="s"/>
      </signal>
      <signal name="NameLost" tp:name-for-bindings="Name_Lost">
        <arg type="s"/>
      </signal>
      <signal name="NameAcquired" tp:name-for-bindings="Name_Acquired">
        <arg type="s"/>
      </signal>
    </interface>
  </node>

</tp:spec>

<tp:spec>

<tp:title>Account Manager interfaces</tp:title>

<node name="/Account_Manager" xml:base="../spec/Account_Manager.xml">
  <tp:copyright>Copyright © 2008-2009 Collabora Ltd.</tp:copyright>
  <tp:copyright>Copyright © 2008-2009 Nokia Corporation</tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
<p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.AccountManager">
    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>The account manager is a central service used to store account
        details.</p>

      <p>The current account manager is defined to be the process that owns
        the well-known bus name org.freedesktop.Telepathy.AccountManager on
        the session bus. This process must export an
        /org/freedesktop/Telepathy/AccountManager object with the
        AccountManager interface.</p>

      <p>Until a mechanism exists for making a reasonable automatic choice
        of AccountManager implementation, implementations SHOULD NOT
        register as an activatable service for the AccountManager's
        well-known bus name. Instead, it is RECOMMENDED that some component
        of the user's session will select and activate a particular
        implementation, and that other Telepathy-enabled programs can
        detect whether Telepathy is in use by checking whether the
        AccountManager's well-known name is in use at runtime.</p>
    </tp:docstring>
    <tp:added version="0.17.2"/>

    <!-- Missing functionality compared with NMC 4.x:
    * look up accounts by conditions (can be done client-side, less
      efficiently, so not a blocker)
    * global presence/... changes (can be done client-side, less efficiently -
      we should add this)
    * count used channels (what's this for?)
    * get "average" status (not well-defined, UIs can do this)
    * request channels (out of scope: Channel Dispatcher will do this)
    * register filters (completely out of scope: Channel Dispatcher again)
    -->

    <property access="read" name="Interfaces" tp:name-for-bindings="Interfaces" tp:type="DBus_Interface[]" type="as">
      <tp:docstring>
        A list of the interfaces provided by the account manager object.
      </tp:docstring>
    </property>

    <property access="read" name="ValidAccounts" tp:name-for-bindings="Valid_Accounts" type="ao">
      <tp:docstring>
        A list of the valid (complete, usable) accounts. Change notification
        is via <tp:member-ref>AccountValidityChanged</tp:member-ref>.

        <tp:rationale>
          This split between valid and invalid accounts makes it easy to
          ignore the invalid ones. The only things that should be manipulating
          invalid accounts are account-editing UIs, which might be able to
          rescue them.
        </tp:rationale>
      </tp:docstring>
    </property>

    <property access="read" name="InvalidAccounts" tp:name-for-bindings="Invalid_Accounts" type="ao">
      <tp:docstring>
        A list of incomplete or otherwise unusable accounts. Change
        notification is via
        <tp:member-ref>AccountValidityChanged</tp:member-ref>.
      </tp:docstring>
    </property>

    <signal name="AccountRemoved" tp:name-for-bindings="Account_Removed">
      <tp:docstring>
        The given account has been removed.

        <tp:rationale>
          This is effectively change notification for the valid and invalid
          accounts lists. On emission of this signal, the Account indicated
          will no longer be present in either of the lists.
        </tp:rationale>
      </tp:docstring>

      <arg name="Account" type="o">
        <tp:docstring>
          An Account, which must not be used any more.
        </tp:docstring>
      </arg>
    </signal>

    <signal name="AccountValidityChanged" tp:name-for-bindings="Account_Validity_Changed">
      <tp:docstring>
        The validity of the given account has changed. New accounts are
        also indicated by this signal, as an account validity change
        (usually to True) on an account that did not previously exist.

        <tp:rationale>
          This is effectively change notification for the valid and invalid
          accounts lists.
        </tp:rationale>
      </tp:docstring>

      <arg name="Account" type="o">
        <tp:docstring>
          An Account.
        </tp:docstring>
      </arg>

      <arg name="Valid" type="b">
        <tp:docstring>
          True if the account is now valid.
        </tp:docstring>
      </arg>
    </signal>

    <property access="read" name="SupportedAccountProperties" tp:name-for-bindings="Supported_Account_Properties" tp:type="DBus_Qualified_Member[]" type="as">
      <tp:added version="0.17.24"/>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>A list of the fully qualified names of properties that can be set
          via the Properties argument to
          <tp:member-ref>CreateAccount</tp:member-ref> when an account is
          created.</p>

        <tp:rationale>
          <p>Examples of good properties to support here include
            <tp:dbus-ref namespace="org.freedesktop.Telepathy.Account">Icon</tp:dbus-ref>,
            <tp:dbus-ref namespace="org.freedesktop.Telepathy.Account">Enabled</tp:dbus-ref>,
            <tp:dbus-ref namespace="org.freedesktop.Telepathy.Account">Nickname</tp:dbus-ref>,
            <tp:dbus-ref namespace="org.freedesktop.Telepathy.Account">AutomaticPresence</tp:dbus-ref>,
            <tp:dbus-ref namespace="org.freedesktop.Telepathy.Account">ConnectAutomatically</tp:dbus-ref>,
            <tp:dbus-ref namespace="org.freedesktop.Telepathy.Account">RequestedPresence</tp:dbus-ref>
            and
            <tp:dbus-ref namespace="org.freedesktop.Telepathy.Account.Interface.Avatar">Avatar</tp:dbus-ref>.
            </p>

          <p>Examples of properties that would make no sense here include
            <tp:dbus-ref namespace="org.freedesktop.Telepathy.Account">Valid</tp:dbus-ref>,
            <tp:dbus-ref namespace="org.freedesktop.Telepathy.Account">Connection</tp:dbus-ref>,
            <tp:dbus-ref namespace="org.freedesktop.Telepathy.Account">ConnectionStatus</tp:dbus-ref>,
            <tp:dbus-ref namespace="org.freedesktop.Telepathy.Account">ConnectionStatusReason</tp:dbus-ref>,
            <tp:dbus-ref namespace="org.freedesktop.Telepathy.Account">CurrentPresence</tp:dbus-ref>
            and
            <tp:dbus-ref namespace="org.freedesktop.Telepathy.Account">NormalizedName</tp:dbus-ref>.
          </p>
        </tp:rationale>

        <p>This property MUST NOT include include the <tp:dbus-ref namespace="org.freedesktop.Telepathy.Account">DisplayName</tp:dbus-ref>
          and <tp:dbus-ref namespace="org.freedesktop.Telepathy.Account">Parameters</tp:dbus-ref>
          properties, which are set using separate arguments.</p>

        <p>This property MAY include the names of properties that, after
          account creation, will be read-only: this indicates that the property
          can be set at account creation but not changed later.</p>

        <tp:rationale>
          <p>For example, an account manager might support migration tools that
            use this to preserve the <tp:dbus-ref namespace="org.freedesktop.Telepathy.Account">HasBeenOnline</tp:dbus-ref>
            property, even though that property is usually read-only.</p>
        </tp:rationale>
      </tp:docstring>
    </property>

    <method name="CreateAccount" tp:name-for-bindings="Create_Account">
      <tp:docstring>
        Request the creation of a new <tp:dbus-ref namespace="org.freedesktop.Telepathy">Account</tp:dbus-ref>. The
        account manager SHOULD NOT allow invalid accounts to be created.
      </tp:docstring>
      <tp:changed version="0.17.24">added the Properties argument</tp:changed>

      <arg direction="in" name="Connection_Manager" tp:type="Connection_Manager_Name" type="s">
        <tp:docstring>
          The name of the connection manager, e.g. &quot;salut&quot;.
        </tp:docstring>
      </arg>

      <arg direction="in" name="Protocol" tp:type="Protocol" type="s">
        <tp:docstring>The protocol, e.g. &quot;local-xmpp&quot;.</tp:docstring>
      </arg>

      <arg direction="in" name="Display_Name" type="s">
        <tp:docstring>The initial value of the new account's <tp:dbus-ref namespace="org.freedesktop.Telepathy.Account">DisplayName</tp:dbus-ref>
          property. The account manager SHOULD modify this to make it unique if
          an Account already exists with the same display name, for instance by
          appending a number or the 'account' parameter. Account manager
          implementations SHOULD accept an empty string, but account editing
          user interfaces should avoid passing an empty string for this
          parameter.

          <tp:rationale>
            <p>The account creation UI may ask the user for a name for the new
              account. If the author of the UI chooses not to do this, the
              account creation UI is better able to suggest a default display
              name because it has protocol-specific knowledge which the account
              manager does not.</p>

            <p>The account manager always knows the complete list of accounts so
              it can easily tell whether it should append something to the
              display name to avoid presenting two identically-named accounts to
              the user.</p>
          </tp:rationale>
        </tp:docstring>
      </arg>

      <arg direction="in" name="Parameters" type="a{sv}">
        <tp:docstring>Initial parameter values, as would be passed to
          <tp:dbus-ref namespace="org.freedesktop.Telepathy.ConnectionManager">RequestConnection</tp:dbus-ref>.</tp:docstring>
      </arg>

      <arg direction="in" name="Properties" tp:type="Qualified_Property_Value_Map" type="a{sv}">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The values of any other properties to be set immediately on the
            new Account.</p>

          <p>Only the properties mentioned in
            <tp:member-ref>SupportedAccountProperties</tp:member-ref> are
            acceptable here. In particular, the <tp:dbus-ref namespace="org.freedesktop.Telepathy.Account">DisplayName</tp:dbus-ref>
            and <tp:dbus-ref namespace="org.freedesktop.Telepathy.Account">Parameters</tp:dbus-ref>
            properties are never allowed here, since they are set using the other
            arguments to this method.</p>

          <p>Account manager implementations SHOULD support creating accounts
            with an empty value for this argument.</p>
        </tp:docstring>
      </arg>

      <arg direction="out" name="Account" type="o">
        <tp:docstring>The new <tp:dbus-ref namespace="org.freedesktop.Telepathy">Account</tp:dbus-ref>.</tp:docstring>
      </arg>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.NotImplemented">
          <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
            <p>The Connection_Manager is not installed or does not
              implement the given Protocol, or one of the properties in the
              Properties argument is unsupported.</p>
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument">
          <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
            <p>The Parameters provided omit a required parameter
              or provide unsupported parameter, or the type of one
              of the Parameters or Properties is inappropriate.</p>
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

  </interface>
</node>

</tp:spec>
<tp:spec>

<tp:title>Account interfaces</tp:title>

<node name="/Account" xml:base="../spec/Account.xml">
  <tp:copyright>Copyright © 2008-2009 Collabora Ltd.</tp:copyright>
  <tp:copyright>Copyright © 2008-2009 Nokia Corporation</tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
<p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Account">
    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>An Account object encapsulates the necessary details to make a
        Telepathy connection.</p>

      <p>Accounts are uniquely identified by object path. The object path
        of an Account MUST take the form
        <code>/org/freedesktop/Telepathy/Account/<em>cm</em>/<em>proto</em>/<em>acct</em></code>, where:</p>

      <ul>
        <li><em>cm</em> is the same <tp:type>Connection_Manager_Name</tp:type>
          that appears in the connection manager's well-known bus name and
          object path</li>
        <li><em>proto</em> is the <tp:type>Protocol</tp:type> name as seen in
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">ConnectionManager.ListProtocols</tp:dbus-ref>,
          but with &quot;-&quot; replaced with &quot;_&quot;
          (i.e. the same as in the object-path of a <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection</tp:dbus-ref>)</li>
        <li><em>acct</em> is an arbitrary string of ASCII letters, digits
          and underscores, starting with a letter or underscore, which
          uniquely identifies this account</li>
        <li>Clients SHOULD parse the object path to discover the
          connection manager and protocol</li>
        <li>Clients MUST NOT attempt to parse <em>acct</em></li>
        <li>Clients MUST NOT assume that <em>acct</em> matches
          the connection-specific part of a Connection's object-path and
          bus name</li>
        <li>The account manager SHOULD choose <em>acct</em> such that if
          an account is deleted, its object path will be re-used if and only
          if the new account is in some sense &quot;the same&quot;
          (incorporating the 'account' parameter in some way is
          recommended)</li>
      </ul>

      <tp:rationale>
        <p>This API avoids specifying the &quot;profiles&quot; used in Mission Control
          4.x or the &quot;presets&quot; that have been proposed to replace them. An
          optional interface will be provided for AM implementations
          that want to provide presets.</p>

        <p>There is deliberately no functionality here for opening channels;
          we intend to provide that in the channel dispatcher.</p>

        <p>Other missing features which would be better in their own
          interfaces:</p>

        <ul>
          <li>dynamic parameter-providing (aka provisioning)</li>
          <li>saved server capabilities</li>
          <li>account conditions</li>
          <li>account grouping</li>
        </ul>
      </tp:rationale>

    </tp:docstring>
    <tp:added version="0.17.2"/>
    <tp:changed version="0.17.6">moved the Avatar property to a separate
      interface</tp:changed>

    <!-- Missing functionality compared with NMC 4.x account + profile,
    apart from as listed above:

    * vCard field, + default profile for each vCard field
      (vCard field is per protocol and should be chosen by the
      Telepathy <-> address-book bridge?; default profile is now
      meaningless)

    * "normalized name" (normalized handle?)

    * branding icon (what's this and how does it differ from the icon?)

    * configuration UI (not our problem - perhaps the UI could special-case
      by cm,protocol,preset tuples?)

    * default account domain (somewhat meaningless in general; specialized
      account config UI can hard-code this)

    * SPLIT_ACCOUNT (pseudo-capability - this is a property of the protocol,
      not the profile, and in any case only the account config UI cares)

    Missing functionality compared with Decibel accounts:

    * we don't really know, they take arbitrary key/value pairs...
      but display name, protocol, presence/message, current, autoreconnect
      are the ones given special status by the source, and we have all of them
    -->

    <property access="read" name="Interfaces" tp:name-for-bindings="Interfaces" tp:type="DBus_Interface[]" type="as">
      <tp:docstring>
        A list of the extra interfaces provided by this account.
      </tp:docstring>
    </property>

    <method name="Remove" tp:name-for-bindings="Remove">
      <tp:docstring>Delete the account.</tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.PermissionDenied"/>
      </tp:possible-errors>
    </method>

    <signal name="Removed" tp:name-for-bindings="Removed">
      <tp:docstring>
        This account has been removed.

        <tp:rationale>
          This is redundant with <tp:dbus-ref namespace="org.freedesktop.Telepathy.AccountManager">AccountRemoved</tp:dbus-ref>,
          but it's still worth having,
          to avoid having to bind to AccountManager.AccountRemoved to tell
          you whether your Account is valid — ideally, an account-editing UI
          should only care about a single Account.
        </tp:rationale>
      </tp:docstring>
    </signal>

    <signal name="AccountPropertyChanged" tp:name-for-bindings="Account_Property_Changed">
      <tp:docstring>
        The values of one or more properties on this interface (that do not
        specify that this signal does not apply to them) may have changed.
        This does not cover properties of other interfaces, which must
        provide their own change notification if appropriate.
      </tp:docstring>

      <arg name="Properties" type="a{sv}">
        <tp:docstring>
          A map from property names in this namespace (e.g.
          <tp:member-ref>Nickname</tp:member-ref>) to
          values. Properties whose values have not changed SHOULD be
          omitted, but this need not be done.
        </tp:docstring>
      </arg>
    </signal>

    <property access="readwrite" name="DisplayName" tp:name-for-bindings="Display_Name" type="s">
      <tp:docstring>
        The user-visible name of this account. This SHOULD be chosen by the
        user at account creation time. The account creation user interface
        is responsible for setting a reasonable default value in the user's
        locale; something like &quot;Jabber (bob@example.com)&quot; would be sensible.

        <tp:rationale>
          This approximately corresponds to &quot;display name&quot; in NMC 4.x and
          Decibel.
        </tp:rationale>
      </tp:docstring>
    </property>

    <property access="readwrite" name="Icon" tp:name-for-bindings="Icon" type="s">
      <tp:docstring>
        The name of an icon in the system's icon theme, such as &quot;im-msn&quot;,
        or the empty string to not specify an icon. If the icon is set to
        an empty string, the account manager or any client MAY derive a
        default icon, for instance from the protocol.

        <tp:rationale>
          This approximately corresponds to mc_profile_get_icon_name
          (or possibly mc_profile_get_branding_icon_name) in NMC 4.x.
          It's accessed via the account rather than the profile because
          we no longer have profiles as a core concept.
        </tp:rationale>
      </tp:docstring>
    </property>

    <property access="read" name="Valid" tp:name-for-bindings="Valid" type="b">
      <tp:docstring>
        If true, this account is considered by the account manager to be
        complete and usable. If false, user action is required to make it
        usable, and it will never attempt to connect (for instance, this
        might be caused by the absence of a required parameter).

        <tp:rationale>
          For connection managers with a plugin architecture, like
          telepathy-haze, we have little or no control over the parameters
          offered; for platforms with package management, we have little or
          no control over the CMs offered. NMC 4.x would just pretend the
          account didn't exist in these circumstances, but silent data loss
          is bad, and UIs with CM-specific knowledge (or a user filling in
          newly-required parameters) might be able to rescue a broken account.
        </tp:rationale>
      </tp:docstring>
    </property>

    <property access="readwrite" name="Enabled" tp:name-for-bindings="Enabled" type="b">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>This property gives the users the possibility to prevent an account
          from being used. This flag does not change the validity of the
          account.</p>

        <p>A disabled account can never be put online.</p>

        <tp:rationale>
          <p>Use cases:</p>

          <ul>
            <li>user has two or more accounts capable of calling contact X, but
              he doesn't want the UI to prompt him everytime about which one he
              wants to use for the call. He can then disable all the equivalent
              accounts but one.</li>

            <li>There is some temporary server error and the user doesn't want
              to be be bother by error messages, or change the account
              configuration: temporarily disabling the account is quicker.</li>
          </ul>
        </tp:rationale>

        <p>The AccountManager SHOULD allow this property to be set on invalid
          accounts, but MUST NOT attempt to put invalid accounts online
          even if they become Enabled.</p>

        <tp:rationale>
          <p>There doesn't seem to be any good reason not to allow this.</p>
        </tp:rationale>
      </tp:docstring>
    </property>

    <property access="readwrite" name="Nickname" tp:name-for-bindings="Nickname" type="s">
      <tp:docstring>
        The nickname to set on this account for display to other contacts,
        as set by the user. When the account becomes connected, the
        account manager SHOULD set this as the user's alias using <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection.Interface.Aliasing">SetAliases</tp:dbus-ref>
        if appropriate.

        <tp:rationale>
          In a later specification revision, we plan to separate the concepts
          of a contact's nickname as set by themselves, and the local
          name for them in our contact list (a &quot;handle&quot; or &quot;pet name&quot; as
          described in XEP-0165 and its references). The terminology change
          from alias to nickname here is a step in that direction.
          This corresponds to NMC 4.x mc_account_get_alias.
        </tp:rationale>
      </tp:docstring>
    </property>

    <property access="read" name="Parameters" tp:name-for-bindings="Parameters" type="a{sv}">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>A map from connection manager parameter names (as in the
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">ConnectionManager</tp:dbus-ref>
          interface) to their values. This property includes
          only those parameters that are stored for this account, and SHOULD
          only include those parameters that the user has explicitly set.
        </p>
        <p>This property cannot be altered using Set() - use
          <tp:member-ref>UpdateParameters</tp:member-ref> instead.</p>

        <tp:rationale>
          This avoids NMC being tied to gconf as a matter of API.
        </tp:rationale>
      </tp:docstring>
    </property>

    <method name="UpdateParameters" tp:name-for-bindings="Update_Parameters">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Change the value of the <tp:member-ref>Parameters</tp:member-ref>
          property.</p>

        <p>If any of the changed parameters'
          <tp:type>Conn_Mgr_Param_Flags</tp:type> include
          <code>DBus_Property</code>, the change will be applied to the
          corresponding D-Bus Property on the active
          <tp:member-ref>Connection</tp:member-ref>, if there is one. Changes to
          other parameters will not take effect until the next time the account
          is disconnected and reconnected.</p>

        <tp:rationale>
          <p>In general, reconnecting is a destructive operation that shouldn't
            happen as a side-effect. In particular, migration tools that
            twiddle the settings of all accounts shouldn't cause an automatic
            disconnect and reconnect.</p>
        </tp:rationale>
      </tp:docstring>

      <tp:changed version="0.17.16">
        parameters which are also D-Bus properties can and should be updated on
        existing Connections
      </tp:changed>

      <tp:changed version="0.17.24">
        return an array of the parameters that won't change until the account
        is reconnected
      </tp:changed>

      <arg direction="in" name="Set" type="a{sv}">
        <tp:docstring>
          A mapping from parameter names to their values. These parameters
          should be stored for future use.
        </tp:docstring>
      </arg>

      <arg direction="in" name="Unset" type="as">
        <tp:docstring>
          A list of the names of parameters to be removed from the set of
          stored values, allowing the default values to be used.
          If the given parameters were not, in fact, stored, or even if they
          do not exist at all, the account manager MUST accept this without
          error.
        </tp:docstring>
      </arg>

      <arg direction="out" name="Reconnect_Required" type="as">
        <tp:docstring>
          A list of the names of parameters with changes that will not take
          effect until the account is reconnected (this may be empty, e.g. if
          all the parameters are D-Bus properties or parameters for which the
          account manager has specific support). User interfaces that
          require &quot;instant apply&quot; semantics MAY call
          <tp:member-ref>Reconnect</tp:member-ref> in response to receiving
          a non-empty list.
        </tp:docstring>
      </arg>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.PermissionDenied"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument"/>
      </tp:possible-errors>
    </method>

    <property access="readwrite" name="AutomaticPresence" tp:name-for-bindings="Automatic_Presence" tp:type="Simple_Presence" type="(uss)">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The presence status that this account should have if it is brought
          online.</p>

        <p>Setting this property MUST NOT actually change the account's
          status until the next time it is (re)connected for some reason.</p>

        <p>The <tp:type>Connection_Presence_Type</tp:type> in the structure
          SHOULD NOT be Offline or Unset.</p>

        <tp:rationale>
          In ITOS2007 and ITOS2008 this is a global preference, not visible
          on D-Bus (the &quot;default presence&quot;). &quot;Automatic presence&quot; better
          describes when it is used.
        </tp:rationale>
      </tp:docstring>
    </property>

    <property access="readwrite" name="ConnectAutomatically" tp:name-for-bindings="Connect_Automatically" type="b">
      <tp:docstring>
        If true, the account manager SHOULD attempt to put this account
        online with the <tp:member-ref>AutomaticPresence</tp:member-ref>
        whenever possible (in the base
        Account interface this is deliberately left vague). If false,
        it MUST NOT put the account online automatically in response to,
        for instance, connectivity changes, but SHOULD still put the account
        online with the <tp:member-ref>AutomaticPresence</tp:member-ref> if
        requested by the user (for
        instance, if the user tries to start a conversation using this
        account).

        <tp:rationale>
          This approximately corresponds to NMC 4.x &quot;enabled&quot; and Decibel
          &quot;autoreconnect&quot;.
        </tp:rationale>
      </tp:docstring>
    </property>

    <property access="read" name="Connection" tp:name-for-bindings="Connection" type="o">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Either the object path of the <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection</tp:dbus-ref> to
        this account, or the special value <code>'/'</code> if there is no
        connection.</p>

        <p>If this object path is not '/', the Connection's well-known bus
          name can be derived from this object path by removing the first '/'
          and replacing subsequent '/' characters with '.'.</p>

        <tp:rationale>
          Object paths aren't nullable, so we can't use an empty string.
        </tp:rationale>
      </tp:docstring>
    </property>

    <property access="read" name="ConnectionStatus" tp:name-for-bindings="Connection_Status" type="u">
      <tp:docstring>
        If the <tp:member-ref>Connection</tp:member-ref> property is non-empty,
        the status of that connection.
        If the Connection property is the empty string, this property may
        either be Disconnected (indicating that the account manager is not
        attempting to bring it online), or Connecting (indicating that the
        account manager is attempting to connect).
        The account manager is expected to set this by observing signals
        from the Connection.

        <tp:rationale>
          If the AM is doing some sort of backoff/delay on reconnection
          attempts, the account's status is conceptually &quot;Connecting&quot; even
          though there is no Connection. This vaguely corresponds to
          GetCurrentStatus in NMC 4.x.
        </tp:rationale>
      </tp:docstring>
    </property>

    <property access="read" name="ConnectionStatusReason" tp:name-for-bindings="Connection_Status_Reason" type="u">
      <tp:docstring>
        The reason for the last change to
        <tp:member-ref>ConnectionStatus</tp:member-ref>.
        The account manager is expected to set this by observing signals
        from the Connection.

        <tp:rationale>
          If you weren't watching the Connection at the time it failed,
          you can't tell why - unless the AM can tell you. This is part
          of GetCurrentStatus in NMC 4.x.
        </tp:rationale>
      </tp:docstring>
    </property>

    <property access="read" name="CurrentPresence" tp:name-for-bindings="Current_Presence" tp:type="Simple_Presence" type="(uss)">
      <tp:docstring>
        The actual presence. If the connection is not online, this should be
        (Connection_Presence_Type_Offline, &quot;&quot;, &quot;&quot;).
        If the connection is online but does not support the <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection.Interface">SimplePresence</tp:dbus-ref>
        interface, this should be (Connection_Presence_Type_Unset, &quot;&quot;, &quot;&quot;).
        The account manager is expected to set this by observing signals
        from the Connection.

        <tp:rationale>
          This corresponds to GetPresenceActual in NMC 4.x.
        </tp:rationale>
      </tp:docstring>
    </property>

    <property access="readwrite" name="RequestedPresence" tp:name-for-bindings="Requested_Presence" tp:type="Simple_Presence" type="(uss)">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The requested presence for this account. When this is changed, the
        account manager should attempt to manipulate the connection manager to
        make <tp:member-ref>CurrentPresence</tp:member-ref> match
        <tp:member-ref>RequestedPresence</tp:member-ref> as closely as
          possible. It should not be saved to any sort of persistent
          storage.</p>

        <p>When the account manager automatically connects an account,
          it must signal this by setting the RequestedPresence to the same
          thing as the <tp:member-ref>AutomaticPresence</tp:member-ref>.</p>

        <tp:rationale>
          This corresponds to e.g. GetPresence and GetPresenceMessage
          in NMC 4.x.
        </tp:rationale>
      </tp:docstring>
    </property>

    <method name="Reconnect" tp:name-for-bindings="Reconnect">
      <tp:added version="0.17.24"/>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Re-connect this account. If the account is currently disconnected
          and the requested presence is offline, or if the account
          is not <tp:member-ref>Enabled</tp:member-ref> or not
          <tp:member-ref>Valid</tp:member-ref>, this does nothing.</p>

        <p>If the account is disconnected and the requested presence is not
          offline, this forces an attempt to connect with the requested
          presence immediately.</p>

        <p>If the account is connecting or connected, this is equivalent to
          remembering the current value of
          <tp:member-ref>RequestedPresence</tp:member-ref>, setting its value
          to (OFFLINE, &quot;offline&quot;, &quot;&quot;), waiting for the change to take effect,
          then setting its value to the value that was previously
          remembered.</p>

        <tp:rationale>
          <p>Clients desiring &quot;instant apply&quot; semantics for CM parameters MAY
            call this method to achieve that.</p>
        </tp:rationale>

        <p>In particular, if the account's
          <tp:member-ref>Connection</tp:member-ref> is in the Connecting
          state, calling this method causes the attempt to connect to be
          aborted and re-tried.</p>

        <tp:rationale>
          <p>This is necessary to ensure that the new parameters are
            picked up.</p>
        </tp:rationale>
      </tp:docstring>
    </method>

    <property access="read" name="NormalizedName" tp:name-for-bindings="Normalized_Name" type="s">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The normalized user ID of the local user on this account (i.e. the
          string returned when the <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection">InspectHandles</tp:dbus-ref>
          method is called on the
          result of <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection">GetSelfHandle</tp:dbus-ref>
          for an active connection).</p>

        <p>It is unspecified whether this user ID is globally unique.</p>

        <tp:rationale>
          <p>As currently implemented, IRC user IDs are only unique within
            the same IRCnet. On some saner protocols, the user ID includes a
            DNS name which provides global uniqueness.</p>
        </tp:rationale>

        <p>If this value is not known yet (which will always be the case for
          accounts that have never been online), it will be an empty
          string.</p>

        <p>It is possible that this value will change if the connection
          manager's normalization algorithm changes, although this SHOULD
          be avoided.</p>

        <tp:rationale>
          <p>It's not always completely clear what normalization algorithm
            should be used; for instance, in Gabble, we currently use JIDs,
            but it would also have been reasonable to use xmpp URIs.</p>
        </tp:rationale>
      </tp:docstring>
    </property>

    <property access="read" name="HasBeenOnline" tp:name-for-bindings="Has_Been_Online" type="b">
      <tp:docstring>
        If true, this account has successfully been put online at some point
        in the past.

        <tp:rationale>
          UIs could apply a policy that the 'account' parameter can only be
          edited in accounts that have never been online, or that
          ConnectAutomatically cannot be set on such accounts. The account
          manager should not enforce such policies, but it can expose enough
          information to UIs that the UI can decide what to do.
        </tp:rationale>
      </tp:docstring>
    </property>

  </interface>
</node>

<node name="/Account_Interface_Avatar" xml:base="../spec/Account_Interface_Avatar.xml">
  <tp:copyright>Copyright (C) 2008 Collabora Ltd.</tp:copyright>
  <tp:copyright>Copyright (C) 2008 Nokia Corporation</tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
<p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Account.Interface.Avatar">
    <tp:requires interface="org.freedesktop.Telepathy.Account"/>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>This interface extends the core Account interface to provide a
        user-settable avatar image.</p>

      <tp:rationale>
        <p>The avatar could have been a property on the core Account interface,
          but was moved to a separate interface because it is likely to be
          large. This means that clients can safely use GetAll to get
          properties on the core Account interface without flooding the
          session bus with large images.</p>
      </tp:rationale>

    </tp:docstring>
    <tp:added version="0.17.6"/>

    <tp:struct name="Avatar">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>A struct containing avatar data marked with its MIME type.</p>
      </tp:docstring>
      <tp:member name="Avatar_Data" type="ay"/>
      <tp:member name="MIME_Type" type="s"/>
    </tp:struct>

    <property access="readwrite" name="Avatar" tp:name-for-bindings="Avatar" tp:type="Avatar" type="(ays)">
      <tp:docstring>
        The avatar to set on this account for display to other contacts,
        represented as a structure containing the bytes of the avatar,
        and the MIME type as a string; may be set to an empty byte-array and
        an empty string to indicate no avatar. When the account becomes
        connected, the account manager SHOULD set this avatar using SetAvatar
        if appropriate.

        <tp:rationale>
          This corresponds to NMC 4.x mc_account_get_avatar.
        </tp:rationale>
      </tp:docstring>
    </property>

    <signal name="AvatarChanged" tp:name-for-bindings="Avatar_Changed">
      <tp:docstring>
        Emitted when the Avatar property changes.

        <tp:rationale>The avatar itself is deliberately not included in this
          signal, to reduce bus traffic in the (likely common) case where no
          running application cares about the user's own avatar.</tp:rationale>
      </tp:docstring>
    </signal>

  </interface>
</node>

</tp:spec>

<tp:spec>

<tp:title>Channel Dispatcher interfaces</tp:title>

<node name="/Channel_Dispatcher" xml:base="../spec/Channel_Dispatcher.xml">

  <tp:copyright>Copyright © 2008-2009 Collabora Ltd.</tp:copyright>
  <tp:copyright>Copyright © 2008-2009 Nokia Corporation</tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
      modify it under the terms of the GNU Lesser General Public
      License as published by the Free Software Foundation; either
      version 2.1 of the License, or (at your option) any later version.</p>

    <p>This library is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
      Lesser General Public License for more details.</p>

    <p>You should have received a copy of the GNU Lesser General Public
      License along with this library; if not, write to the Free Software
      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
      USA.</p>
  </tp:license>

  <interface name="org.freedesktop.Telepathy.ChannelDispatcher">
    <tp:added version="0.17.26">(as a stable interface)</tp:added>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>The channel dispatcher is responsible for responding to new
        channels and launching client processes to handle them. It also
        provides functionality for client processes to request that new
        channels are created.</p>

      <p>If a channel dispatcher is running, it is responsible for dispatching
        new channels on all
        <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection</tp:dbus-ref>s
        created by the
        <tp:dbus-ref namespace="org.freedesktop.Telepathy">AccountManager</tp:dbus-ref>.
        Connections not created by the AccountManager are outside the scope
        of the channel dispatcher.</p>

      <tp:rationale>
        <p>Connections created by standalone Telepathy clients
          that do not intend to interact with the channel dispatcher
          should be ignored - otherwise, the channel dispatcher would try
          to launch handlers for channels that the standalone client
          was already handling internally.</p>
      </tp:rationale>

      <p>The current channel dispatcher is defined to be the process that
        owns the well-known bus name
        <code>org.freedesktop.Telepathy.ChannelDispatcher</code> on
        the session bus. This process MUST export an object with this
        interface at the object path
        <code>/org/freedesktop/Telepathy/ChannelDispatcher</code>.</p>

      <p>Until a mechanism exists for making a reasonable automatic choice
        of ChannelDispatcher implementation, implementations SHOULD NOT
        register as an activatable service for the ChannelDispatcher's
        well-known bus name. Instead, it is RECOMMENDED that some component
        of the user's session will select and activate a particular
        implementation, and that other Telepathy-enabled programs
        can detect whether channel request/dispatch functionality is available
        by checking whether the ChannelDispatcher's well-known name is in use
        at runtime.</p>

      <p>There are three categories of client process defined by this
        specification:</p>

      <dl>
        <dt><tp:dbus-ref namespace="org.freedesktop.Telepathy.Client">Observer</tp:dbus-ref></dt>
        <dd><p>Observers monitor the creation of new channels. This
            functionality can be used for things like message logging.
            All observers are notified simultaneously.</p></dd>

        <dt><tp:dbus-ref namespace="org.freedesktop.Telepathy.Client">Approver</tp:dbus-ref></dt>
        <dd>
          <p>Approvers notify the user that new channels have been created,
            and also select which channel handler will be used for the channel,
            either by asking the user or by choosing the most appropriate
            channel handler.</p>
        </dd>

        <dt><tp:dbus-ref namespace="org.freedesktop.Telepathy.Client">Handler</tp:dbus-ref></dt>
        <dd>
          <p>Each new channel or set of channels is passed to exactly one
            handler as its final destination. A typical channel handler is a
            user interface process handling channels of a particular type.</p>
        </dd>
      </dl>
    </tp:docstring>

    <property access="read" name="Interfaces" tp:name-for-bindings="Interfaces" tp:type="DBus_Interface[]" type="as">
      <tp:docstring>
        A list of the extra interfaces provided by this channel dispatcher.
      </tp:docstring>
    </property>

    <method name="CreateChannel" tp:name-for-bindings="Create_Channel">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Start a request to create a channel. This initially just creates a
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">ChannelRequest</tp:dbus-ref>
          object, which can be used to continue the request and track its
          success or failure.</p>

        <tp:rationale>
          <p>The request can take a long time - in the worst case, the
            channel dispatcher has to ask the account manager to put the
            account online, the account manager has to ask the operating
            system to obtain an Internet connection, and the operating
            system has to ask the user whether to activate an Internet
            connection using an on-demand mechanism like dialup.</p>

          <p>This means that using a single D-Bus method call and response
            to represent the whole request will tend to lead to that call
            timing out, which is not the behaviour we want.</p>
        </tp:rationale>

        <p>If this method is called for an Account that is disabled, invalid
          or otherwise unusable, no error is signalled until
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">ChannelRequest.Proceed</tp:dbus-ref>
          is called, at which point
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">ChannelRequest.Failed</tp:dbus-ref>
          is emitted with an appropriate error.</p>

        <tp:rationale>
          <p>This means there's only one code path for errors, apart from
            InvalidArgument for &quot;that request makes no sense&quot;.</p>

          <p>It also means that the request will proceed if the account is
            enabled after calling CreateChannel, but before calling
            Proceed.</p>
        </tp:rationale>
      </tp:docstring>

      <arg direction="in" name="Account" type="o">
        <tp:docstring>
          The
            <tp:dbus-ref namespace="org.freedesktop.Telepathy">Account</tp:dbus-ref>
          for which the new channel is to be created.
        </tp:docstring>
      </arg>

      <arg direction="in" name="Requested_Properties" tp:type="Qualified_Property_Value_Map" type="a{sv}">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>A dictionary containing desirable properties. This has the same
            semantics as the corresponding parameter to
            <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection.Interface.Requests.CreateChannel</tp:dbus-ref>.
          </p>

          <p>Certain properties will not necessarily make sense in this
            dictionary: for instance,
            <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel">TargetHandle</tp:dbus-ref>
            can only be given if the requester is able to interact with a
            <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection</tp:dbus-ref>
            to the desired account.</p>
        </tp:docstring>
      </arg>

      <arg direction="in" name="User_Action_Time" tp:type="Unix_Timestamp64" type="x">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The time at which user action occurred, or 0 if this channel
            request is for some reason not involving user action.
            The <tp:dbus-ref namespace="org.freedesktop.Telepathy.ChannelRequest">UserActionTime</tp:dbus-ref>
            property will be set to this value, and it will eventually be
            passed as the <code>User_Action_Time</code> parameter of <tp:dbus-ref namespace="org.freedesktop.Telepathy.Client.Handler">HandleChannels</tp:dbus-ref>.</p>
        </tp:docstring>
      </arg>

      <arg direction="in" name="Preferred_Handler" tp:type="DBus_Well_Known_Name" type="s">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>Either the well-known bus name (starting with
            <code>org.freedesktop.Telepathy.Client.</code>)
            of the preferred handler for this
            channel, or an empty string to indicate that any handler would be
            acceptable. The channel dispatcher SHOULD dispatch as many as
            possible of the resulting channels (ideally, all of them)
            to that handler, and SHOULD remember the preferred handler
            so it can try to dispatch subsequent channels in the same bundle
            to the same handler.</p>

          <tp:rationale>
            <p>This must be the well-known bus name, not the unique name,
              to ensure that all handlers do indeed have the Client API,
              and the Client object on the handler can be located easily.</p>

            <p>This is partly so the channel dispatcher can call
              <tp:dbus-ref namespace="org.freedesktop.Telepathy.Client.Handler">HandleChannels</tp:dbus-ref>
              on it, and partly so the channel dispatcher
              can recover state if it crashes and is restarted.</p>
          </tp:rationale>

          <p>If this is a well-known bus name and the handler has the
            Requests interface, the channel dispatcher SHOULD
            call <tp:dbus-ref namespace="org.freedesktop.Telepathy.Client.Interface.Requests">AddRequest</tp:dbus-ref>
            on that Handler after this method has returned.</p>

          <tp:rationale>
            <p>This ordering allows a Handler which calls CreateChannel with
              itself as the preferred handler to associate the call to
              AddRequest with that call.</p>
          </tp:rationale>

          <p>This is copied to the ChannelRequest that is returned,
            as the <tp:dbus-ref namespace="org.freedesktop.Telepathy.ChannelRequest">PreferredHandler</tp:dbus-ref>
            property.</p>
        </tp:docstring>
      </arg>

      <arg direction="out" name="Request" type="o">
        <tp:docstring>
          A
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">ChannelRequest</tp:dbus-ref>
          object.
        </tp:docstring>
      </arg>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument">
          <tp:docstring>
            The Preferred_Handler is syntactically invalid or does
            not start with <code>org.freedesktop.Telepathy.Client.</code>,
            the Account does not exist, or one of the Requested_Properties
            is invalid
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>

    </method>

    <method name="EnsureChannel" tp:name-for-bindings="Ensure_Channel">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Start a request to ensure that a channel exists, creating it if
          necessary.  This initially just creates a <tp:dbus-ref namespace="org.freedesktop.Telepathy">ChannelRequest</tp:dbus-ref>
          object, which can be used to continue the request and track its
          success or failure.</p>

        <p>If this method is called for an Account that is disabled, invalid
          or otherwise unusable, no error is signalled until
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">ChannelRequest.Proceed</tp:dbus-ref>
          is called, at which point
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">ChannelRequest.Failed</tp:dbus-ref>
          is emitted with an appropriate error.</p>

        <tp:rationale>
          <p>The rationale is as for <tp:dbus-ref namespace="org.freedesktop.Telepathy.ChannelDispatcher">CreateChannel</tp:dbus-ref>.</p>
        </tp:rationale>
      </tp:docstring>

      <arg direction="in" name="Account" type="o">
        <tp:docstring>
          The
            <tp:dbus-ref namespace="org.freedesktop.Telepathy">Account</tp:dbus-ref>
          for which the new channel is to be created.
        </tp:docstring>
      </arg>

      <arg direction="in" name="Requested_Properties" tp:type="Qualified_Property_Value_Map" type="a{sv}">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>A dictionary containing desirable properties. This has the same
            semantics as the corresponding parameter to
            <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection.Interface.Requests.EnsureChannel</tp:dbus-ref>.
          </p>

          <p>Certain properties will not necessarily make sense in this
            dictionary: for instance,
            <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel">TargetHandle</tp:dbus-ref>
            can only be given if the requester is able to interact with a
            <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection</tp:dbus-ref>
            to the desired account.</p>
        </tp:docstring>
      </arg>

      <arg direction="in" name="User_Action_Time" tp:type="Unix_Timestamp64" type="x">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The time at which user action occurred, or 0 if this channel
            request is for some reason not involving user action.</p>

          <p>This parameter is used in the same way as the corresponding
            parameter to <tp:member-ref>CreateChannel</tp:member-ref>.</p>
        </tp:docstring>
      </arg>

      <arg direction="in" name="Preferred_Handler" tp:type="DBus_Well_Known_Name" type="s">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>Either the well-known bus name (starting with
            <code>org.freedesktop.Telepathy.Client.</code>)
            of the preferred handler for this
            channel, or an empty string to indicate that any handler would be
            acceptable. The behaviour and rationale are the same as for the
            corresponding parameter to
            <tp:member-ref>CreateChannel</tp:member-ref>, except as noted
            here.</p>

          <p>If any new channels are created in response to this
            request, the channel dispatcher SHOULD dispatch as many as
            possible of the resulting channels (ideally, all of them)
            to that handler, and SHOULD remember the preferred handler
            so it can try to dispatch subsequent channels in the same bundle
            to the same handler. If the requested channel already exists (that
            is, <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection.Interface.Requests.EnsureChannel</tp:dbus-ref>
            returns <code>Yours=False</code>) then the channel dispatcher
            SHOULD re-dispatch the channel to its existing handler, and MUST
            NOT dispatch it to this client (unless it is the existing handler);
            the request is still deemed to have succeeded in this case.</p>

          <tp:rationale>
            <p>An address book application, for example, might call <tp:dbus-ref namespace="org.freedesktop.Telepathy.ChannelDispatcher">EnsureChannel</tp:dbus-ref>
              to ensure that a text channel with a particular contact is
              displayed to the user; it does not care whether a new channel was
              made. An IM client might call <tp:dbus-ref namespace="org.freedesktop.Telepathy.ChannelDispatcher">EnsureChannel</tp:dbus-ref>
              in response to the user double-clicking an entry in the contact
              list, with itself as the <code>Preferred_Handler</code>; if the
              user already has a conversation with that contact in another
              application, they would expect the existing window to be
              presented, rather than their double-click leading to an error
              message.  So the request should succeed, even if its
              <code>Preferred_Handler</code> is not used.</p>
          </tp:rationale>

        </tp:docstring>
      </arg>

      <arg direction="out" name="Request" type="o">
        <tp:docstring>
          A
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">ChannelRequest</tp:dbus-ref>
          object.
        </tp:docstring>
      </arg>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument">
          <tp:docstring>
            The Preferred_Handler is syntactically invalid or does
            not start with <code>org.freedesktop.Telepathy.Client.</code>,
            the Account does not exist, or one of the Requested_Properties
            is invalid
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>

    </method>

  </interface>
</node>
<node name="/Channel_Dispatcher_Interface_Operation_List" xml:base="../spec/Channel_Dispatcher_Interface_Operation_List.xml">

  <tp:copyright>Copyright © 2008-2009 Collabora Ltd.</tp:copyright>
  <tp:copyright>Copyright © 2008-2009 Nokia Corporation</tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
      modify it under the terms of the GNU Lesser General Public
      License as published by the Free Software Foundation; either
      version 2.1 of the License, or (at your option) any later version.</p>

    <p>This library is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
      Lesser General Public License for more details.</p>

    <p>You should have received a copy of the GNU Lesser General Public
      License along with this library; if not, write to the Free Software
      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
      USA.</p>
  </tp:license>

  <interface name="org.freedesktop.Telepathy.ChannelDispatcher.Interface.OperationList">
    <tp:added version="0.17.26">(as a stable interface)</tp:added>

    <tp:requires interface="org.freedesktop.Telepathy.ChannelDispatcher"/>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>This interface allows users of the ChannelDispatcher to enumerate
        all the pending dispatch operations, with change notification.</p>

      <tp:rationale>
        <p>The existence of the
          <tp:member-ref>DispatchOperations</tp:member-ref> property allows a
          newly started approver to pick up existing dispatch operations.</p>

        <p>This is on a separate interface so clients that aren't interested
          in doing this aren't woken up by its signals.</p>
      </tp:rationale>
    </tp:docstring>

    <tp:struct array-name="Dispatch_Operation_Details_List" name="Dispatch_Operation_Details">

      <tp:docstring>
        Details of a channel dispatch operation.
      </tp:docstring>

      <tp:member name="Channel_Dispatch_Operation" type="o">
        <tp:docstring>
          The object path of the
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">ChannelDispatchOperation</tp:dbus-ref>.
        </tp:docstring>
      </tp:member>

      <tp:member name="Properties" tp:type="Qualified_Property_Value_Map" type="a{sv}">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>Properties of the channel dispatch operation.</p>

          <p>Connection managers MUST NOT include properties in this mapping
            if their values can change. Clients MUST ignore properties
            that appear in this mapping if their values can change.</p>

          <tp:rationale>
            <p>The rationale is the same as for
              <tp:type-ref>Channel_Details</tp:type-ref>.</p>
          </tp:rationale>

          <p>Each dictionary MUST contain at least the following keys:</p>
          <ul>
            <li><tp:dbus-ref>org.freedesktop.Telepathy.ChannelDispatchOperation.Interfaces</tp:dbus-ref></li>
            <li><tp:dbus-ref>org.freedesktop.Telepathy.ChannelDispatchOperation.Connection</tp:dbus-ref></li>
            <li><tp:dbus-ref>org.freedesktop.Telepathy.ChannelDispatchOperation.Account</tp:dbus-ref></li>
            <li><tp:dbus-ref>org.freedesktop.Telepathy.ChannelDispatchOperation.PossibleHandlers</tp:dbus-ref></li>
          </ul>
        </tp:docstring>
      </tp:member>
    </tp:struct>

    <property access="read" name="DispatchOperations" tp:name-for-bindings="Dispatch_Operations" tp:type="Dispatch_Operation_Details[]" type="a(oa{sv})">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The list of ChannelDispatchOperation objects currently being
          processed. Change notification is via the
          <tp:member-ref>NewDispatchOperation</tp:member-ref> and
          <tp:member-ref>DispatchOperationFinished</tp:member-ref> signals.</p>
      </tp:docstring>
    </property>

    <signal name="NewDispatchOperation" tp:name-for-bindings="New_Dispatch_Operation">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Emitted when a dispatch operation is added to
          <tp:member-ref>DispatchOperations</tp:member-ref>.</p>
      </tp:docstring>

      <arg name="Dispatch_Operation" type="o">
        <tp:docstring>
          The dispatch operation that was created.
        </tp:docstring>
      </arg>

      <arg name="Properties" tp:type="Qualified_Property_Value_Map" type="a{sv}">
        <tp:docstring>
          The same properties that would appear in the Properties member of
          <tp:type-ref>Dispatch_Operation_Details</tp:type-ref>.
        </tp:docstring>
      </arg>
    </signal>

    <signal name="DispatchOperationFinished" tp:name-for-bindings="Dispatch_Operation_Finished">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        Emitted when a dispatch operation finishes (i.e. exactly once per
        emission of <tp:dbus-ref namespace="org.freedesktop.Telepathy">ChannelDispatchOperation.Finished</tp:dbus-ref>).

        <tp:rationale>
          Strictly speaking this is redundant with
          ChannelDispatchOperation.Finished, but it provides full
          change-notification for the
          <tp:member-ref>DispatchOperations</tp:member-ref> property.
        </tp:rationale>
      </tp:docstring>

      <arg name="Dispatch_Operation" type="o">
        <tp:docstring>
          The dispatch operation that was closed.
        </tp:docstring>
      </arg>
    </signal>

  </interface>
</node>

</tp:spec>
<tp:spec>

<tp:title>CDO interfaces</tp:title>

<node name="/Channel_Dispatch_Operation" xml:base="../spec/Channel_Dispatch_Operation.xml">

  <tp:copyright>Copyright © 2008-2009 Collabora Ltd.</tp:copyright>
  <tp:copyright>Copyright © 2008-2009 Nokia Corporation</tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
      modify it under the terms of the GNU Lesser General Public
      License as published by the Free Software Foundation; either
      version 2.1 of the License, or (at your option) any later version.</p>

    <p>This library is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
      Lesser General Public License for more details.</p>

    <p>You should have received a copy of the GNU Lesser General Public
      License along with this library; if not, write to the Free Software
      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
      MA 02110-1301, USA.</p>
  </tp:license>

  <interface name="org.freedesktop.Telepathy.ChannelDispatchOperation">
    <tp:added version="0.17.26">(as a stable interface)</tp:added>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>A channel dispatch operation is an object in the ChannelDispatcher
        representing a batch of unrequested channels being announced to
        client
        <tp:dbus-ref namespace="org.freedesktop.Telepathy.Client">Approver</tp:dbus-ref>
        processes.</p>

      <p>These objects can result from new incoming channels or channels
        which are automatically created for some reason, but cannot result
        from outgoing requests for channels.</p>

      <p>More specifically, whenever the
        <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection.Interface.Requests.NewChannels</tp:dbus-ref>
        signal contains channels whose
        <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel">Requested</tp:dbus-ref>
        property is false, or whenever the
        <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection.NewChannel</tp:dbus-ref>
        signal contains a channel with suppress_handler false,
        one or more ChannelDispatchOperation objects are created for those
        channels.</p>

      <p>(If some channels in a NewChannels signal are in different bundles,
        this is an error. The channel dispatcher SHOULD recover by treating
        the NewChannels signal as if it had been several NewChannels signals
        each containing one channel.)</p>

      <p>First, the channel dispatcher SHOULD construct a list of all the
        <tp:dbus-ref namespace="org.freedesktop.Telepathy.Client">Handler</tp:dbus-ref>s
        that could handle all the channels (based on their <tp:dbus-ref namespace="org.freedesktop.Telepathy.Client.Handler">HandlerChannelFilter</tp:dbus-ref>
        property), ordered by
        priority in some implementation-dependent way. If there are handlers
        which could handle all the channels, one channel dispatch operation
        SHOULD be created for all the channels. If there are not, one channel
        dispatch operation SHOULD be created for each channel, each with
        a list of channel handlers that could handle that channel.</p>

      <p>If no handler at all can handle a channel, the channel dispatcher
        SHOULD terminate that channel instead of creating a channel dispatcher
        for it. It is RECOMMENDED that the channel dispatcher closes
        the channels using <tp:dbus-ref namespace="org.freedesktop.Telepathy">Channel.Interface.Destroyable.Destroy</tp:dbus-ref>
        if supported, or <tp:dbus-ref namespace="org.freedesktop.Telepathy">Channel.Close</tp:dbus-ref>
        otherwise. As a special case, the channel dispatcher SHOULD NOT close
        <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type">ContactList</tp:dbus-ref>
        channels, and if Close fails, the channel dispatcher SHOULD ignore
        that channel.</p>

      <tp:rationale>
        <p>ContactList channels are strange. We hope to replace them with
          something better, such as an interface on the Connection, in a
          future version of this specification.</p>
      </tp:rationale>

      <p>When listing channel handlers, priority SHOULD be given to
        channel handlers that are already handling channels from the same
        bundle.</p>

      <p>If a handler with <tp:dbus-ref namespace="org.freedesktop.Telepathy.Client.Handler">BypassApproval</tp:dbus-ref>
        <code>= True</code> could handle all of the channels in the dispatch
        operation, then the channel dispatcher SHOULD call <tp:dbus-ref namespace="org.freedesktop.Telepathy.Client.Handler">HandleChannels</tp:dbus-ref>
        on that handler, and (assuming the call succeeds) emit
        <tp:member-ref>Finished</tp:member-ref> and stop processing those
        channels without involving any approvers.</p>

      <tp:rationale>
        <p>Some channel types can be picked up &quot;quietly&quot; by an existing
          channel handler. If a <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type">Text</tp:dbus-ref>
          channel is added to an existing bundle containing a <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type">StreamedMedia</tp:dbus-ref>
          channel, there shouldn't be
          any approvers, flashing icons or notification bubbles, if the
          the UI for the StreamedMedia channel can just add a text box
          and display the message.</p>
      </tp:rationale>

      <p>Otherwise, the channel dispatcher SHOULD send the channel dispatch
        operation to all relevant approvers (in parallel) and wait for an
        approver to claim the channels or request that they are handled.
        See
        <tp:dbus-ref namespace="org.freedesktop.Telepathy.Client.Approver">AddDispatchOperation</tp:dbus-ref>
        for more details on this.</p>

      <p>Finally, if the approver requested it, the channel dispatcher SHOULD
        send the channels to a handler.</p>
    </tp:docstring>

    <property access="read" name="Interfaces" tp:name-for-bindings="Interfaces" tp:type="DBus_Interface[]" type="as">
      <tp:docstring>
        A list of the extra interfaces provided by this channel dispatch
        operation. This property cannot change.
      </tp:docstring>
    </property>

    <property access="read" name="Connection" tp:name-for-bindings="Connection" type="o">
      <tp:docstring>
        The <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection</tp:dbus-ref>
        with which the <tp:member-ref>Channels</tp:member-ref> are
        associated. The well-known bus name to use can be derived from
        this object path by removing the leading '/' and replacing all
        subsequent '/' by '.'. This property cannot change.
      </tp:docstring>
    </property>

    <property access="read" name="Account" tp:name-for-bindings="Account" type="o">
      <tp:docstring>
        The <tp:dbus-ref namespace="org.freedesktop.Telepathy">Account</tp:dbus-ref>
        with which the <tp:member-ref>Connection</tp:member-ref>
        and <tp:member-ref>Channels</tp:member-ref> are
        associated. This property cannot change.
      </tp:docstring>
    </property>

    <property access="read" name="Channels" tp:name-for-bindings="Channels" tp:type="Channel_Details[]" type="a(oa{sv})">
      <tp:docstring>
        The <tp:dbus-ref namespace="org.freedesktop.Telepathy">Channel</tp:dbus-ref>s
        to be dispatched, and their properties. Change notification is via
        the <tp:member-ref>ChannelLost</tp:member-ref> signal (channels
        cannot be added to this property, only removed).
      </tp:docstring>
    </property>

    <signal name="ChannelLost" tp:name-for-bindings="Channel_Lost">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>A channel has closed before it could be claimed or handled. If
          this is emitted for the last remaining channel in a channel
          dispatch operation, it MUST immediately be followed by
          <tp:member-ref>Finished</tp:member-ref>.</p>

        <p>This signal MUST NOT be emitted until all Approvers that were
          invoked have returned (successfully or with an error) from
          their <tp:dbus-ref namespace="org.freedesktop.Telepathy.Client.Approver">AddDispatchOperation</tp:dbus-ref>
          method.</p>

        <tp:rationale>
          <p>This means that Approvers can connect to the ChannelLost signal
            in a race-free way. Non-approver processes that discover
            a channel dispatch operation in some way (such as observers)
            will have to follow the usual &quot;connect to signals then recover
            state&quot; model - first connect to ChannelLost and
            <tp:member-ref>Finished</tp:member-ref>,
            then download <tp:member-ref>Channels</tp:member-ref> (and
            on error, perhaps assume that the operation has already
            Finished).</p>
        </tp:rationale>
      </tp:docstring>

      <arg name="Channel" type="o">
        <tp:docstring>
          The <tp:dbus-ref namespace="org.freedesktop.Telepathy">Channel</tp:dbus-ref>
          that closed.
        </tp:docstring>
      </arg>

      <arg name="Error" tp:type="DBus_Error_Name" type="s">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The name of a D-Bus error indicating why the channel closed. If
            no better reason can be found,
            <code>org.freedesktop.Telepathy.Error.NotAvailable</code> MAY
            be used as a fallback; this means that this error SHOULD NOT be
            given any more specific meaning.</p>
        </tp:docstring>
      </arg>

      <arg name="Message" type="s">
        <tp:docstring>
          A string associated with the D-Bus error.
        </tp:docstring>
      </arg>
    </signal>

    <property access="read" name="PossibleHandlers" tp:name-for-bindings="Possible_Handlers" tp:type="DBus_Well_Known_Name[]" type="as">
      <tp:docstring>
        <p>The well known bus names (starting with
          <code>org.freedesktop.Telepathy.Client.</code>) of the possible
          <tp:dbus-ref namespace="org.freedesktop.Telepathy.Client">Handler</tp:dbus-ref>s
          for these channels. The channel dispatcher MUST place the most
          preferred handlers first, according to some reasonable heuristic.
          As a result, approvers SHOULD use the first handler by default.</p>

        <p>The heuristic used to prioritize handlers SHOULD give a higher
          priority to handlers that are already running.</p>

        <tp:rationale>
          <p>If, for instance, Empathy and Kopete have similar functionality,
            and Empathy is running, we should prefer to send channels to it
            rather than launching Kopete via service activation.</p>
        </tp:rationale>
      </tp:docstring>
    </property>

    <method name="HandleWith" tp:name-for-bindings="Handle_With">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Called by an approver to accept a channel bundle and request that
          the given handler be used to handle it.</p>

        <p>If successful, this method will cause the ChannelDispatchOperation
          object to disappear, emitting
          <tp:member-ref>Finished</tp:member-ref>.</p>

        <p>However, this method may fail because the dispatch has already been
          completed and the object has already gone. If this occurs, it
          indicates that another approver has asked for the bundle to be
          handled by a particular handler. The approver MUST NOT attempt
          to interact with the channels further in this case, unless it is
          separately invoked as the handler.</p>

        <p>Approvers which are also channel handlers SHOULD use
          <tp:member-ref>Claim</tp:member-ref> instead
          of HandleWith to request that they can handle a channel bundle
          themselves.</p>

        <p>(FIXME: list some possible errors)</p>

        <p>If the channel handler raises an error from <tp:dbus-ref namespace="org.freedesktop.Telepathy.Client.Handler">HandleChannels</tp:dbus-ref>,
          this method
          MAY respond by raising that same error, even if it is not
          specifically documented here.</p>
      </tp:docstring>

      <arg direction="in" name="Handler" tp:type="DBus_Bus_Name" type="s">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The well-known bus name (starting with
            <code>org.freedesktop.Telepathy.Client.</code>) of the channel
            handler that should handle the channel, or the empty string
            if the client has no preferred channel handler.</p>
        </tp:docstring>
      </arg>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument">
          <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
            The selected handler is non-empty, but is not a syntactically
            correct <tp:type>DBus_Bus_Name</tp:type> or does not start with
            &quot;<code>org.freedesktop.Telepathy.Client.</code>&quot;.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable">
          <tp:docstring>
            The selected handler is temporarily unable to handle these
            channels.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotImplemented">
          <tp:docstring>
            The selected handler is syntactically correct, but will never
            be able to handle these channels (for instance because the channels
            do not match its HandlerChannelFilter, or because HandleChannels
            raised NotImplemented).
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotYours">
          <tp:docstring>
            At the time that HandleWith was called, this dispatch operation was
            processing an earlier call to HandleWith. The earlier call has
            now succeeded, so some Handler nominated by another approver is
            now responsible for the channels. In this situation, the second
            call to HandleWith MUST NOT return until the first one has
            returned successfully or unsuccessfully, and if the first call
            to HandleChannels fails, the channel dispatcher SHOULD try to obey
            the choice of Handler made by the second call to HandleWith.
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <method name="Claim" tp:name-for-bindings="Claim">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Called by an approver to claim channels for handling
          internally. If this method is called successfully, the process
          calling this method becomes the handler for the channel, but
          <em>does not</em> have the <tp:dbus-ref namespace="org.freedesktop.Telepathy.Client.Handler">HandleChannels</tp:dbus-ref>
          method called on it.</p>

        <p>Clients that call Claim on channels but do not immediately
          close them SHOULD implement the Handler interface and its
          <tp:dbus-ref namespace="org.freedesktop.Telepathy.Client.Handler">HandledChannels</tp:dbus-ref>
          property.</p>

        <p>Approvers wishing to reject channels MUST call this method to
          claim ownership of them, and MUST NOT call
          <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel">Close</tp:dbus-ref>
          on the channels unless/until this method returns successfully.</p>

        <tp:rationale>
          <p>The channel dispatcher can't know how best to close arbitrary
            channel types, so it leaves it up to the approver to do so.
            For instance, for Text channels it is necessary
            to acknowledge any messages that have already been displayed to
            the user first - ideally, the approver would display and then
            acknowledge the messages - or to call <tp:dbus-ref namespace="org.freedesktop.Telepathy">Channel.Interface.Destroyable.Destroy</tp:dbus-ref>
            if the destructive behaviour of that method is desired.</p>

          <p>Similarly, an Approver for StreamedMedia channels can close the
            channel with a reason (e.g. &quot;busy&quot;) if desired. The channel
            dispatcher, which is designed to have no specific knowledge
            of particular channel types, can't do that.</p>
        </tp:rationale>

        <p>If successful, this method will cause the ChannelDispatchOperation
          object to disappear, emitting
          <tp:member-ref>Finished</tp:member-ref>, in the same way as for
          <tp:member-ref>HandleWith</tp:member-ref>.</p>

        <p>This method may fail because the dispatch operation has already
          been completed. Again, see HandleWith for more details. The approver
          MUST NOT attempt to interact with the channels further in this
          case.</p>

        <p>(FIXME: list some other possible errors)</p>
      </tp:docstring>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.NotYours">
          <tp:docstring>
            At the time that Claim was called, this dispatch operation was
            processing a call to HandleWith which has now succeeded, so
            some Handler nominated by another approver is now responsible for
            the channel.
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <signal name="Finished" tp:name-for-bindings="Finished">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Emitted when this dispatch operation finishes. The dispatch
          operation is no longer present and further methods must not be
          called on it.</p>

        <p>Approvers that have a user interface SHOULD stop notifying the user
          about the channels in response to this signal; they MAY assume that
          on errors, they would have received
          <tp:member-ref>ChannelLost</tp:member-ref> first.</p>

        <p>Its object path SHOULD NOT be reused for a subsequent dispatch
          operation; the ChannelDispatcher MUST choose object paths
          in a way that avoids immediate re-use.</p>

        <tp:rationale>
          <p>Otherwise, clients might accidentally call
            <tp:member-ref>HandleWith</tp:member-ref> or
            <tp:member-ref>Claim</tp:member-ref> on a new dispatch operation
            instead of the one they intended to handle.</p>
        </tp:rationale>

        <p>This signal MUST NOT be emitted until all Approvers that were
          invoked have returned (successfully or with an error) from
          their <tp:dbus-ref namespace="org.freedesktop.Telepathy.Client.Approver">AddDispatchOperation</tp:dbus-ref>
          method.</p>

        <tp:rationale>
          <p>This means that Approvers can connect to the ChannelLost signal
            in a race-free way. Non-approver processes that discover
            a channel dispatch operation in some way (such as observers)
            will have to follow the usual &quot;connect to signals then recover
            state&quot; model - first connect to
            <tp:member-ref>ChannelLost</tp:member-ref> and
            Finished, then download <tp:member-ref>Channels</tp:member-ref>
            (and on error, perhaps assume that the operation has already
            Finished).</p>
        </tp:rationale>
      </tp:docstring>
    </signal>

  </interface>
</node>

</tp:spec>
<tp:spec>

<tp:title>CR interfaces</tp:title>

<node name="/Channel_Request" xml:base="../spec/Channel_Request.xml">

  <tp:copyright>Copyright © 2008-2009 Collabora Ltd.</tp:copyright>
  <tp:copyright>Copyright © 2008-2009 Nokia Corporation</tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
      modify it under the terms of the GNU Lesser General Public
      License as published by the Free Software Foundation; either
      version 2.1 of the License, or (at your option) any later version.</p>

    <p>This library is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
      Lesser General Public License for more details.</p>

    <p>You should have received a copy of the GNU Lesser General Public
      License along with this library; if not, write to the Free Software
      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
      MA 02110-1301, USA.</p>
  </tp:license>

  <interface name="org.freedesktop.Telepathy.ChannelRequest">
    <tp:added version="0.17.26">(as a stable interface)</tp:added>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>A channel request is an object in the ChannelDispatcher representing
        an ongoing request for some channels to be created or found. There
        can be any number of ChannelRequest objects at the same time.</p>

      <p>Its well-known bus name is the same as that of the ChannelDispatcher,
        &quot;org.freedesktop.Telepathy.ChannelDispatcher&quot;.</p>

      <tp:rationale>
        <p>See
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">ChannelDispatcher.CreateChannel</tp:dbus-ref>
          for rationale for ChannelRequest being a separate object.</p>
      </tp:rationale>

      <p>A channel request can be cancelled by any client (not just the one
        that requested it). This means that the ChannelDispatcher will
        <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel">Close</tp:dbus-ref>
        the resulting channel, or refrain from requesting it at all, rather
        than dispatching it to a handler.</p>
    </tp:docstring>

    <property access="read" name="Account" tp:name-for-bindings="Account" type="o">
      <tp:docstring>
        The <tp:dbus-ref namespace="org.freedesktop.Telepathy">Account</tp:dbus-ref>
        on which this request was made. This property cannot change.
      </tp:docstring>
    </property>

    <property access="read" name="UserActionTime" tp:name-for-bindings="User_Action_Time" tp:type="Unix_Timestamp64" type="x">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The time at which user action occurred, or 0 if this channel
          request is for some reason not involving user action.</p>

        <p>This corresponds to the _NET_WM_USER_TIME property in
          <a href="http://standards.freedesktop.org/wm-spec/wm-spec-latest.html">EWMH</a>.</p>

        <p>This property is set when the channel request is created,
          and can never change.</p>
      </tp:docstring>
    </property>

    <property access="read" name="PreferredHandler" tp:name-for-bindings="Preferred_Handler" tp:type="DBus_Well_Known_Name" type="s">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>Either the well-known bus name (starting with
            <code>org.freedesktop.Telepathy.Client.</code>)
            of the preferred handler for this
            channel, or an empty string to indicate that any handler would be
            acceptable.</p>

        <p>This property is set when the channel request is created,
          and can never change.</p>
      </tp:docstring>
    </property>

    <property access="read" name="Requests" tp:name-for-bindings="Requests" tp:type="Qualified_Property_Value_Map[]" type="aa{sv}">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>An array of dictionaries containing desirable properties for
          the channel or channels to be created.</p>

        <tp:rationale>
          <p>This is an array so that we could add a CreateChannels method in
            future without redefining the API of ChannelRequest.</p>
        </tp:rationale>

        <p>This property is set when the channel request is created,
          and can never change.</p>
      </tp:docstring>
    </property>

    <property access="read" name="Interfaces" tp:name-for-bindings="Interfaces" tp:type="DBus_Interface[]" type="as">
      <tp:docstring>
        A list of the extra interfaces provided by this channel request.
        This property cannot change.
      </tp:docstring>
    </property>

    <method name="Proceed" tp:name-for-bindings="Proceed">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Proceed with the channel request.</p>

        <tp:rationale>
          <p>The client that created this object calls this method
            when it has connected signal handlers for
            <tp:member-ref>Succeeded</tp:member-ref> and
            <tp:member-ref>Failed</tp:member-ref>.</p>
        </tp:rationale>

        <p>Clients other than the client which created the ChannelRequest
          MUST NOT call this method.</p>

        <p>This method SHOULD return immediately; on success, the request
          might still fail, but this will be indicated asynchronously
          by the <tp:member-ref>Failed</tp:member-ref> signal.</p>

        <p>Proceed cannot fail, unless clients have got the life-cycle
          of a ChannelRequest seriously wrong (e.g. a client calls this
          method twice, or a client that did not create the ChannelRequest
          calls this method). If it fails, clients SHOULD assume that the
          whole ChannelRequest has become useless.</p>
      </tp:docstring>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable">
          <tp:docstring>
            This method has already been called, so it is no longer
            available. Stop calling it.
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <method name="Cancel" tp:name-for-bindings="Cancel">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Cancel the channel request. The precise effect depends on the
          current progress of the request.</p>

        <p>If the connection manager has not already been asked to create
          a channel, then <tp:member-ref>Failed</tp:member-ref> is emitted
          immediately, and the channel request is removed.</p>

        <p>If the connection manager has already been asked to create a
          channel but has not produced one yet (e.g. if <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection.Interface.Requests.CreateChannel</tp:dbus-ref>
          has been called, but has not yet returned), then the
          ChannelDispatcher will remember that the request has been cancelled.
          When the channel appears, it will be closed (if it was newly
          created and can be closed), and will not be dispatched to a
          handler.</p>

        <p>If the connection manager has already returned a channel, but the
          channel has not yet been dispatched to a handler
          then the channel dispatcher will not dispatch that
          channel to a handler. If the channel was newly created for this
          request, the channel dispatcher will close it with <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel">Close</tp:dbus-ref>;
          otherwise, the channel dispatcher will ignore it. In either case,
          <tp:member-ref>Failed</tp:member-ref> will be emitted when processing
          has been completed.</p>

        <p>If <tp:member-ref>Failed</tp:member-ref> is emitted in response to
          this method, the error SHOULD be
          <code>org.freedesktop.Telepathy.Error.Cancelled</code>.</p>

        <p>If the channel has already been dispatched to a handler, then
          it's too late to call this method, and the channel request will
          no longer exist.</p>
      </tp:docstring>
    </method>

    <signal name="Failed" tp:name-for-bindings="Failed">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The channel request has failed. It is no longer present,
          and further methods must not be called on it.</p>
      </tp:docstring>

      <arg name="Error" tp:type="DBus_Error_Name" type="s">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The name of a D-Bus error. This can come from various sources,
            including the error raised by <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection.Interface.Requests">CreateChannel</tp:dbus-ref>,
            or an error generated
            to represent failure to establish the <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection</tp:dbus-ref>.</p>
        </tp:docstring>
      </arg>

      <arg name="Message" type="s">
        <tp:docstring>
          If the first argument of the D-Bus error message was a string,
          that string. Otherwise, an empty string.
        </tp:docstring>
      </arg>
    </signal>

    <signal name="Succeeded" tp:name-for-bindings="Succeeded">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The channel request has succeeded. It is no longer present,
          and further methods must not be called on it.</p>
      </tp:docstring>
    </signal>

  </interface>
</node>

</tp:spec>

<tp:spec>

<tp:title>Client interfaces</tp:title>

<node name="/Client" xml:base="../spec/Client.xml">
  <tp:copyright>Copyright © 2008-2009 Collabora Ltd.</tp:copyright>
  <tp:copyright>Copyright © 2008-2009 Nokia Corporation</tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
      modify it under the terms of the GNU Lesser General Public
      License as published by the Free Software Foundation; either
      version 2.1 of the License, or (at your option) any later version.</p>

    <p>This library is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
      Lesser General Public License for more details.</p>

    <p>You should have received a copy of the GNU Lesser General Public
      License along with this library; if not, write to the Free Software
      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
      02110-1301, USA.</p>
  </tp:license>

  <interface name="org.freedesktop.Telepathy.Client">
    <tp:added version="0.17.26">(as a stable interface)</tp:added>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>Telepathy clients use connection managers, the channel dispatcher
        and optionally the account manager to provide useful
        functionality.</p>

      <p>User interface processes are the obvious example of Telepathy
        clients, but they can provide other functionality, such as
        address-book synchronization.</p>

      <p>Every running or activatable process with a well-known
        name of the form org.freedesktop.Telepathy.Client.<em>clientname</em>
        should be probed by the channel dispatcher to discover its
        capabilities. Each client is either an <em>observer</em>, an
        <em>approver</em>, a <em>channel handler</em>, or some combination
        of these.</p>

      <tp:rationale>
        <p>Activatable services (those with a D-Bus <code>.service</code>
          file) must be supported so that we can run clients
          in response to channel creation.</p>

        <p>Non-activatable services (those that do not register a D-Bus
          <code>.service</code> file for their well-known name, but do
          request it at runtime) must be supported so that we can have
          programs that process channels, but only if they are already
          running - for instance, a full-screen media centre
          application might do this.</p>
      </tp:rationale>

      <p>The client name, <em>clientname</em>, MUST be a non-empty string of
        ASCII digits, letters, dots and/or underscores, starting with a
        letter, and without sets of two consecutive dots or a dot
        followed by a digit. For non-activatable services, it MAY contain a
        part that is generated per instance at runtime.</p>

      <tp:rationale>
        <p>If each of a client Foo's instances should be able to manipulate
          channels separately, the instance with unique name
          <code>:1.25</code> might request a well-known name like
          <code>org.freedesktop.Telepathy.Client.Foo._1._25</code>.</p>

        <p>(Note that well-known bus-name components may not start with a
          digit, so o.f.T.Client.Foo.1.25 would not be acceptable.)</p>
      </tp:rationale>

      <p>Each Client MUST export an object whose object path may be
        determined by replacing '.' with '/' in the well-known name and
        prepending '/'. This object represents its API as a Telepathy
        client; the channel dispatcher will call its methods and read
        its properties when appropriate.</p>

      <p>As an optimization, activatable clients SHOULD install a file
        <code><a href="http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html">$XDG_DATA_DIRS</a>/telepathy/clients/<em>clientname</em>.client</code>
        containing a cached version of its immutable properties,
        so that for most clients, the channel dispatcher can
        just read a file to discover capabilities, instead of
        having to service-activate the client immediately in order to fetch
        its read-only properties. However, the D-Bus API is canonical, and
        the channel dispatcher MUST support clients without such a file.</p>

      <p>Non-activatable clients MAY install a <code>.client</code> file,
        but there's not much point in them doing so.</p>

      <p>The .client files MUST contain UTF-8 text with the same syntax
        as
        <a href="http://standards.freedesktop.org/desktop-entry-spec/latest/">Desktop
          Entry files</a> (although the allowed groups, keys and values differ).
        Every <code>.client</code> file MUST contain a group whose name is
        the name of this interface.</p>

      <p>The groups, keys and values in the <code>.client</code> file are
        defined by individual interfaces. Each interface that can usefully
        cache information in the <code>.client</code> file SHOULD correspond
        to a group with the same name.</p>
    </tp:docstring>

    <property access="read" name="Interfaces" tp:name-for-bindings="Interfaces" tp:type="DBus_Interface[]" type="as">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>A list of the extra interfaces provided by this client.
          This SHOULD include at least one of
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">Client.Observer</tp:dbus-ref>,
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">Client.Approver</tp:dbus-ref> or
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">Client.Handler</tp:dbus-ref>.</p>

        <p>In the <code>.client</code> file, this is represented by key
          &quot;<code>Interfaces</code>&quot; in the group named after this interface.
          The value of the key is a list of interface names each followed by
          a semicolon (so it always ends with a semicolon unless it is empty),
          i.e. a key of type &quot;strings&quot; as described in the Desktop Entry
          specification.</p>
      </tp:docstring>
    </property>

  </interface>
</node>
<node name="/Client_Observer" xml:base="../spec/Client_Observer.xml">
  <tp:copyright>Copyright © 2008-2009 Collabora Ltd.</tp:copyright>
  <tp:copyright>Copyright © 2008-2009 Nokia Corporation</tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
      modify it under the terms of the GNU Lesser General Public
      License as published by the Free Software Foundation; either
      version 2.1 of the License, or (at your option) any later version.</p>

    <p>This library is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
      Lesser General Public License for more details.</p>

    <p>You should have received a copy of the GNU Lesser General Public
      License along with this library; if not, write to the Free Software
      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
      02110-1301, USA.</p>
  </tp:license>

  <interface name="org.freedesktop.Telepathy.Client.Observer">
    <tp:added version="0.17.26">(as a stable interface)</tp:added>

    <tp:requires interface="org.freedesktop.Telepathy.Client"/>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>Observers monitor the creation of new channels. This
        functionality can be used for things like message logging.
        All observers are notified simultaneously.</p>

      <p>Observers SHOULD NOT modify the state of a channel except
        via user interaction.</p>

      <tp:rationale>
        <p>We want Observer UIs for file transfer channels (a progress
          bar for the transfer) to be able to have a Cancel button.</p>
      </tp:rationale>

      <p>Observers MUST NOT carry out actions that exactly one process
        must take responsibility for (e.g. acknowledging Text
        messages, or carrying out the actual transfer in a file transfer
        channel).</p>

      <tp:rationale>
        <p>Since arbitrarily many observers can be activated for
          each channel, it would not make sense for observers to do things
          that can only be done by one process (acknowledging
          <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type">Text</tp:dbus-ref>
          messages, carrying out streaming for
          <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type">StreamedMedia</tp:dbus-ref>
          channels, doing the actual data transfer for file transfers,
          setting up the out-of-band connection for Tubes). The
          <tp:dbus-ref namespace="org.freedesktop.Telepathy.Client">Handler</tp:dbus-ref>
          is responsible for such tasks.</p>

        <p>Handlers MAY, of course, delegate responsibility for these
          tasks to other processes (including those run as observers),
          but this MUST be done explicitly via a request from the Handler
          to the Observer.</p>
      </tp:rationale>

      <p>Whenever a collection of new channels is signalled, the channel
        dispatcher will notify all running or activatable observers whose
        <tp:member-ref>ObserverChannelFilter</tp:member-ref> property
        (possibly as cached in the .client file) indicates that they are
        interested in some of the channels.</p>

      <p>Observers are activated for all channels in which they have
        registered an interest - incoming, outgoing or automatically created -
        although of course the ObserverChannelFilter property can be set
        to filter on the
        <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel">Requested</tp:dbus-ref>
        property.</p>

      <p>Because it might take time for an observer to become ready (for
        instance, a Text logger needs to wait until pending messages have been
        downloaded), the channel dispatcher must wait (up to some timeout) for
        all observers to return from
        <tp:member-ref>ObserveChannels</tp:member-ref> before letting anything
        destructive happen. Destructive things (e.g. acknowledging messages)
        are defined to be done by handlers, therefore HandleWith and Claim
        aren't allowed to succeed until all observers are ready.</p>
    </tp:docstring>

    <property access="read" name="ObserverChannelFilter" tp:name-for-bindings="Observer_Channel_Filter" tp:type="Channel_Class[]" type="aa{sv}">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>A specification of the channels in which this observer is
          interested. The <tp:member-ref>ObserveChannels</tp:member-ref> method
          should be called by the channel dispatcher whenever any of the new
          channels in a <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection.Interface.Requests">NewChannels</tp:dbus-ref>
          signal match this description.</p>

        <p>Only certain D-Bus types have useful semantics for matching like this,
          so only certain types are allowed:</p>

        <dl>
          <dt>Integers of all sizes, including byte (y, n, q, i, u, x, t)</dt>
          <dd>Matched by numeric value, regardless of type (e.g. 42 as a
            16-bit signed integer 'n' is considered equal to 42 as a 32-bit
            unsigned integer 'u')</dd>

          <dt>Booleans (b)</dt>
          <dd>Matched by equality in the obvious way; not considered equal to any
            other type</dd>

          <dt>Strings (s)</dt>
          <dd>Matched by equality in the obvious way; not considered equal to any
            other type</dd>

          <dt>Object paths (o)</dt>
          <dd>Matched by equality in the obvious way; not considered equal to any
            other type</dd>

        </dl>

        <p>This property never changes while the observer process owns its
          Client bus name. For activatable processes, the filter can change
          due to an upgrade - the channel dispatcher SHOULD observe changes to
          .client files using a mechanism like inotify.</p>

        <tp:rationale>
          <p>Not allowing this property to change is a simplification,
            particularly for activatable processes (we reject the possibility
            that a process with a .client file, when activated, has a filter
            that differs from what its .client file said).</p>

          <p>If an Observer wants to add extra channels to its list of
            interests at runtime, it can register an additional Client bus name
            (for instance, the org.freedesktop.Telepathy.Client.Empathy process
            with unique name :1.42 could additionally register
            org.freedesktop.Telepathy.Client.Empathy._1_42) with additional
            filters. To remove those filters, it can release the bus name;
            it could even re-claim the bus name immediately, with different
            filters.</p>

          <p>The same principle is applied to Approvers and Handlers.</p>
        </tp:rationale>

        <p>For observers that have a .client file, the channel dispatcher
          may discover this property from keys of the form
          <code><em>propertyname</em>/<em>type</em></code>,
          in groups in the .client file whose name is the name of this
          interface followed by <code>.ObserverChannelFilter</code>,
          a space and an ASCII decimal number starting from 0.</p>

        <p>Integers in the .client file are encoded in ASCII decimal, booleans
          are encoded as &quot;true&quot; or &quot;false&quot;, and strings are encoded in the usual
          way for desktop files (including the C-style backslash escapes
          documented in the Desktop Entry specification).</p>

        <p>For instance, a .client file for an observer that is only interested
          in Text channels, with CONTACT or ROOM handles, that were requested by
          a local client:</p>

<pre>
[org.freedesktop.Telepathy.Client]
Interfaces=org.freedesktop.Telepathy.Client.Observer;

[org.freedesktop.Telepathy.Client.Observer.ObserverChannelFilter 0]
org.freedesktop.Telepathy.Channel.Type s=org.freedesktop.Telepathy.Channel.Type.Text
org.freedesktop.Telepathy.Channel.TargetHandleType u=1
org.freedesktop.Telepathy.Channel.Requested b=true

[org.freedesktop.Telepathy.Client.Observer.ObserverChannelFilter 1]
org.freedesktop.Telepathy.Channel.Type s=org.freedesktop.Telepathy.Channel.Type.Text
org.freedesktop.Telepathy.Channel.TargetHandleType u=2
org.freedesktop.Telepathy.Channel.Requested b=true
</pre>

      </tp:docstring>
    </property>

    <method name="ObserveChannels" tp:name-for-bindings="Observe_Channels">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Called by the channel dispatcher when channels in which the
          observer has registered an interest are announced in a <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection.Interface.Requests">NewChannels</tp:dbus-ref>
          signal.</p>

        <p>If the same NewChannels signal announces some channels that match
          the filter, and some that do not, then only a subset of the channels
          (those that do match the filter) are passed to this method.</p>

        <p>If the channel dispatcher will split up the channels from a single
          NewChannels signal and dispatch them separately (for instance
          because no installed Handler can handle all of them), it will call
          ObserveChannels several times.</p>

        <p>The observer MUST NOT return from this method call until it is ready
          for a handler for the channel to run (which may change the channel's
          state).</p>

        <tp:rationale>
          <p>The channel dispatcher must wait for observers to start up,
            to avoid the following race: text channel logger (observer) gets
            ObserveChannels, text channel handler gets
            <tp:dbus-ref namespace="org.freedesktop.Telepathy.Client.Handler">HandleChannels</tp:dbus-ref>
            channel handler starts up faster and acknowledges messages,
            logger never sees those messages.</p>
        </tp:rationale>

        <p>The channel dispatcher SHOULD NOT change its behaviour based on
          whether this method succeeds or fails: there are no defined D-Bus
          errors for this method, and if it fails, this only indicates that
          an Observer is somehow broken.</p>

        <tp:rationale>
          <p>The expected error response in the channel dispatcher is to
            log a warning, and otherwise continue as though this method
            had succeeded.</p>
        </tp:rationale>
      </tp:docstring>

      <arg direction="in" name="Account" type="o">
        <tp:docstring>
          The
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">Account</tp:dbus-ref>
          with which the channels are associated. The
          well-known bus name to use is that of the
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">AccountManager</tp:dbus-ref>.
        </tp:docstring>
      </arg>

      <arg direction="in" name="Connection" type="o">
        <tp:docstring>
          The
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection</tp:dbus-ref>
          with which the channels are associated. The
          well-known bus name to use can be derived from this object
          path by removing the leading '/' and replacing all subsequent
          '/' by '.'.
        </tp:docstring>
      </arg>

      <arg direction="in" name="Channels" tp:type="Channel_Details[]" type="a(oa{sv})">
        <tp:docstring>
          The <tp:dbus-ref namespace="org.freedesktop.Telepathy">Channel</tp:dbus-ref>s
          and their properties. Their well-known bus names are all the same as
          that of the Connection.
        </tp:docstring>
      </arg>

      <arg direction="in" name="Dispatch_Operation" type="o">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The path to the <tp:dbus-ref namespace="org.freedesktop.Telepathy">ChannelDispatchOperation</tp:dbus-ref>
            for these channels, or the special value '/' if there is no
            ChannelDispatchOperation (because the channels were requested, not
            incoming).</p>

          <p>If the Observer calls <tp:dbus-ref namespace="org.freedesktop.Telepathy.ChannelDispatchOperation">Claim</tp:dbus-ref>
            or <tp:dbus-ref namespace="org.freedesktop.Telepathy.ChannelDispatchOperation">HandleWith</tp:dbus-ref>
            on the dispatch operation, it MUST be careful to avoid deadlock,
            since these methods cannot return until the Observer has returned
            from <tp:member-ref>ObserveChannels</tp:member-ref>.</p>

          <tp:rationale>
            <p>This allows an Observer to <tp:dbus-ref namespace="org.freedesktop.Telepathy.ChannelDispatchOperation">Claim</tp:dbus-ref>
              a set of channels without having to match up calls to this method
              with calls to <tp:dbus-ref namespace="org.freedesktop.Telepathy.Client.Approver">AddDispatchOperation</tp:dbus-ref>.</p>
          </tp:rationale>
        </tp:docstring>
      </arg>

      <arg direction="in" name="Requests_Satisfied" type="ao">
        <tp:docstring>
          The requests satisfied by these channels.

          <tp:rationale>
            If the same process is an Observer and a Handler, it can be useful
            to be given this information as soon as possible (it will also
            be passed to <tp:dbus-ref namespace="org.freedesktop.Telepathy.Client">Handler.HandleChannels</tp:dbus-ref>).
          </tp:rationale>
        </tp:docstring>
      </arg>

      <arg direction="in" name="Observer_Info" type="a{sv}">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>Additional information about these channels. No keys are
            currently defined.</p>

          <p>If keys are defined for this dictionary, all will be optional;
            observers MAY safely ignore any entry in this dictionary.</p>
        </tp:docstring>
      </arg>

    </method>

  </interface>
</node>
<node name="/Client_Approver" xml:base="../spec/Client_Approver.xml">
  <tp:copyright>Copyright © 2008-2009 Collabora Ltd.</tp:copyright>
  <tp:copyright>Copyright © 2008-2009 Nokia Corporation</tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
      modify it under the terms of the GNU Lesser General Public
      License as published by the Free Software Foundation; either
      version 2.1 of the License, or (at your option) any later version.</p>

    <p>This library is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
      Lesser General Public License for more details.</p>

    <p>You should have received a copy of the GNU Lesser General Public
      License along with this library; if not, write to the Free Software
      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
      02110-1301, USA.</p>
  </tp:license>

  <interface name="org.freedesktop.Telepathy.Client.Approver">
    <tp:added version="0.17.26">(as a stable interface)</tp:added>

    <tp:requires interface="org.freedesktop.Telepathy.Client"/>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>Approvers are clients that notify the user that new channels have
        been created by a contact, and allow the user to accept or reject
        those channels. The new channels are represented by a <tp:dbus-ref namespace="org.freedesktop.Telepathy">ChannelDispatchOperation</tp:dbus-ref>
        object, which is passed to the
        <tp:member-ref>AddDispatchOperation</tp:member-ref> method.</p>

      <tp:rationale>
        <p>For instance, Empathy's tray icon, or the answer/reject window
          seen when a Maemo device receives a VoIP call, should be
          Approvers.</p>
      </tp:rationale>

      <p>Approvers can also select which channel handler will be used for the
        channel, for instance by offering the user a list of possible
        handlers rather than just an accept/reject choice.
        However, the Channel Dispatcher must be able to prioritize
        possible handlers on its own using some reasonable heuristic,
        probably based on user configuration.</p>

      <p>It is possible (and useful) to have an approver and
        a channel handler in the same process; this is particularly useful
        if a channel handler wants to claim responsibility for particular
        channels itself.</p>

      <p>All approvers are notified simultaneously. For instance, in a
        desktop system, there might be one approver that displays a
        notification-area icon, one that is part of a contact list
        window and highlights contacts there, and one that is part
        of a full-screen media player.</p>

      <p>Any approver can approve the handling of a channel dispatch operation
        with a particular channel handler by calling the <tp:dbus-ref namespace="org.freedesktop.Telepathy.ChannelDispatchOperation">HandleWith</tp:dbus-ref>
        method. Approvers can also attempt to <tp:dbus-ref namespace="org.freedesktop.Telepathy.ChannelDispatchOperation">Claim</tp:dbus-ref>
        channels; if this succeeds, the approver may handle the channels
        itself (if it is also a Handler), or close the channels in order to
        reject them.</p>

      <p>At the D-Bus level, there is no &quot;reject&quot; operation: approvers wishing
        to reject channels SHOULD call the Claim method, then (if it succeeds)
        close the channels in any way they see fit.</p>

      <p>The first approver to reply gets its decision acted on; any other
        approvers that reply at approximately the same time will get a D-Bus
        error, indicating that the channel has already been dealt with.</p>

      <p>Approvers should usually prompt the user and ask for
        confirmation, rather than dispatching the channel to a handler
        straight away.</p>
    </tp:docstring>

    <property access="read" name="ApproverChannelFilter" tp:name-for-bindings="Approver_Channel_Filter" tp:type="Channel_Class[]" type="aa{sv}">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>A specification of the channels in which this approver is
          interested. The <tp:member-ref>AddDispatchOperation</tp:member-ref>
          method should be called by the channel dispatcher whenever at least
          one of the channels in a channel dispatch operation matches this
          description.</p>

        <p>This property works in exactly the same way as the
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">Client.Observer.ObserverChannelFilter</tp:dbus-ref>
          property. In particular, it cannot change while the approver process
          continues to own the corresponding Client bus name.</p>

        <p>In the .client file, it is represented in the
          same way as ObserverChannelFilter, but the group has the same
          name as this interface and the keys start with
          ApproverChannelFilter instead of ObserverChannelFilter.</p>
      </tp:docstring>
    </property>

    <method name="AddDispatchOperation" tp:name-for-bindings="Add_Dispatch_Operation">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Called by the channel dispatcher when a ChannelDispatchOperation
          in which the approver has registered an interest is created,
          or when the approver starts up while such channel dispatch
          operations already exist.</p>

        <p>The channel dispatcher SHOULD call this method on all approvers
          at the same time. If an approver returns an error from this method,
          the approver is assumed to be faulty.</p>

        <p>If no approvers return from this method
          successfully (including situations where there are no matching
          approvers at all), the channel dispatcher SHOULD consider this
          to be an error, and recover by dispatching the channel to the
          most preferred handler.</p>

        <tp:rationale>
          Processes that aren't approvers (or don't at least ensure that there
          is some approver) probably shouldn't be making connections
          anyway, so there should always be at least one approver running.
        </tp:rationale>
      </tp:docstring>

      <arg direction="in" name="Channels" tp:type="Channel_Details[]" type="a(oa{sv})">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The initial value of the <tp:dbus-ref namespace="org.freedesktop.Telepathy">ChannelDispatchOperation.Channels</tp:dbus-ref>
            property, containing the <tp:dbus-ref namespace="org.freedesktop.Telepathy">Channel</tp:dbus-ref>s
            to be dispatched and their properties.</p>

          <tp:rationale>
            <p>This can't be signalled to the approver through the Properties
              parameter of this method, because Channels is not an immutable
              property.</p>
          </tp:rationale>

          <p>This argument always contains all of the channels in the channel
            dispatch operation, even if not all of them actually match
            the <tp:member-ref>ApproverChannelFilter</tp:member-ref>.</p>

          <tp:rationale>
            <p>This seems the least bad way to handle such a situation;
              see the discussion on
              <a href="http://bugs.freedesktop.org/show_bug.cgi?id=21090">bug
                #21090</a>.</p>
          </tp:rationale>

          <p>The actual channels to be dispatched may reduce as channels are
            closed: this is signalled by <tp:dbus-ref namespace="org.freedesktop.Telepathy">ChannelDispatchOperation.ChannelLost</tp:dbus-ref>.
          </p>

          <p>Approvers SHOULD connect to ChannelLost and <tp:dbus-ref namespace="org.freedesktop.Telepathy">ChannelDispatchOperation.Finished</tp:dbus-ref>.
            (if desired) before returning from AddDispatchOperation, since
            those signals are guaranteed not to be emitted until after all
            AddDispatchOperation calls have returned (with success or failure)
            or timed out.</p>
        </tp:docstring>
      </arg>

      <arg direction="in" name="DispatchOperation" type="o">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">ChannelDispatchOperation</tp:dbus-ref>
            to be processed.</p>
        </tp:docstring>
      </arg>

      <arg direction="in" name="Properties" tp:type="Qualified_Property_Value_Map" type="a{sv}">
        <tp:docstring>
          <p>Properties of the channel dispatch operation. The keys MUST be
            fully qualified D-Bus property names. This MUST NOT include
            properties that could change, SHOULD include as many properties as
            possible given that constraint, and MUST include at least the
            <tp:dbus-ref namespace="org.freedesktop.Telepathy.ChannelDispatchOperation">Account</tp:dbus-ref>,
            <tp:dbus-ref namespace="org.freedesktop.Telepathy.ChannelDispatchOperation">Connection</tp:dbus-ref>
            and <tp:dbus-ref namespace="org.freedesktop.Telepathy.ChannelDispatchOperation">PossibleHandlers</tp:dbus-ref>
            properties.</p>
        </tp:docstring>
      </arg>
    </method>

  </interface>
</node>r
<node name="/Client_Handler" xml:base="../spec/Client_Handler.xml">
  <tp:copyright>Copyright © 2008-2009 Collabora Ltd.</tp:copyright>
  <tp:copyright>Copyright © 2008-2009 Nokia Corporation</tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
      modify it under the terms of the GNU Lesser General Public
      License as published by the Free Software Foundation; either
      version 2.1 of the License, or (at your option) any later version.</p>

    <p>This library is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
      Lesser General Public License for more details.</p>

    <p>You should have received a copy of the GNU Lesser General Public
      License along with this library; if not, write to the Free Software
      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
      02110-1301, USA.</p>
  </tp:license>

  <interface name="org.freedesktop.Telepathy.Client.Handler">
    <tp:added version="0.17.26">(as a stable interface)</tp:added>

    <tp:requires interface="org.freedesktop.Telepathy.Client"/>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>Handlers are the user interface for a channel. They turn an abstract
        Telepathy channel into something the user wants to see, like a text
        message stream or an audio and/or video call.</p>

      <p>For its entire lifetime, each channel on a connection known to the
        channel dispatcher is either being processed by the channel dispatcher,
        or being handled by precisely one Handler.</p>

      <p>Because each channel is only handled by one Handler, handlers may
        perform actions that only make sense to do once, such as acknowledging
        <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type">Text</tp:dbus-ref>
        messages, doing the actual streaming for <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type">StreamedMedia</tp:dbus-ref>
        channels with the <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Interface">MediaSignalling</tp:dbus-ref>
        interface, or transferring the file in <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type">FileTransfer</tp:dbus-ref>
        channels.</p>

      <p>When a new incoming channel (one with
        <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel">Requested</tp:dbus-ref>
        = FALSE) is offered to
        <tp:dbus-ref namespace="org.freedesktop.Telepathy.Client">Approver</tp:dbus-ref>s
        by the channel dispatcher, it also offers the Approvers a list of all
        the running or activatable handlers whose
        <tp:member-ref>HandlerChannelFilter</tp:member-ref> property
        (possibly as cached in the .client file) indicates that they
        are able to handle the channel. The Approvers can choose one of
        those channel handlers to handle the channel.</p>

      <p>When a new outgoing channel (one with
        <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel">Requested</tp:dbus-ref>
        = TRUE) appears, the channel dispatcher passes it to an appropriate
        channel handler automatically.
      </p>

    </tp:docstring>

    <property access="read" name="HandlerChannelFilter" tp:name-for-bindings="Handler_Channel_Filter" tp:type="Channel_Class[]" type="aa{sv}">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>A specification of the channels that this channel handler can
          deal with. It will be offered to approvers as a potential
          channel handler for bundles that contain only suitable channels,
          or for suitable channels that must be handled separately.</p>

        <p>This property works in exactly the same way as the
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">Client.Observer.ObserverChannelFilter</tp:dbus-ref>
          property. In particular, it cannot change while the handler process
          continues to own the corresponding Client bus name.</p>

        <p>In the .client file, it is represented in the
          same way as ObserverChannelFilter, but the group has the same
          name as this interface and the keys start with
          HandlerChannelFilter instead of ObserverChannelFilter.</p>
      </tp:docstring>
    </property>

    <property access="read" name="BypassApproval" tp:name-for-bindings="Bypass_Approval" type="b">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>If true, channels destined for this handler are automatically
          handled, without invoking approvers.</p>

        <tp:rationale>
          <p>The intended usage is to allow a client handling one channel to
            pick up closely related channels. Suppose a client capable of
            handling both Text and StreamedMedia,
            <code>org.freedesktop.Telepathy.Client.Empathy</code>, is
            handling a StreamedMedia channel. That client can take a second
            well-known bus name, say
            <code>org.freedesktop.Telepathy.Client.Empathy._1._42.Bundle1</code>,
            and configure an object at
            <code>/org/freedesktop/Telepathy/Client/Empathy/_1/_42/Bundle1</code>
            with BypassApproval = TRUE,
            whose <tp:member-ref>HandlerChannelFilter</tp:member-ref>
            matches closely related Text channels by their Bundle property.
            (This is use-case dis5)</p>
        </tp:rationale>
      </tp:docstring>
    </property>

    <tp:simple-type array-name="Handler_Capability_Token_List" name="Handler_Capability_Token" type="s">
      <tp:docstring>
        A <tp:type>DBus_Interface</tp:type>, followed by a slash '/' character
        and an identifier for a capability defined by that interface. The
        capability identifier SHOULD be in lower case. If an interface
        references an external specification which is case-insensitive (such
        as MIME), then names from that specification MUST be normalized to
        lower-case before providing them to this Telepathy API, so that
        implementations can safely rely on simple byte-by-byte comparison.

        <tp:rationale>
          These aren't D-Bus core Properties, and we want them to look visibly
          different.
        </tp:rationale>

        <p>So far, all client capabilities are defined by the <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Interface">MediaSignalling</tp:dbus-ref>
          interface.</p>
      </tp:docstring>
    </tp:simple-type>

    <property access="read" name="Capabilities" tp:name-for-bindings="Capabilities" tp:type="Handler_Capability_Token[]" type="as">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The set of additional capabilities supported by this handler.
          This describes things like support for streamed media codecs and
          NAT traversal mechanisms: see the Contact Capabilities
          interface for more details.</p>

        <p>For handlers that have a <code>.client</code> file, the
          channel dispatcher may discover this property from the
          <code>org.freedesktop.Telepathy.Client.Handler.Capabilities</code>
          group; for each capability, that group contains a key
          whose name is the capability, with value <code>true</code>.
          Keys with other values SHOULD NOT appear in this group.</p>

        <p>For instance, the <code>.client</code> file for a streamed media
          handler that supports ICE-UDP NAT traversal, Speex audio,
          and Theora and H264 video might contain this group:</p>

<pre>
[org.freedesktop.Telepathy.Client.Handler.Capabilities]
org.freedesktop.Telepathy.Channel.Interface.MediaSignalling/ice-udp=true
org.freedesktop.Telepathy.Channel.Interface.MediaSignalling/audio/speex=true
org.freedesktop.Telepathy.Channel.Interface.MediaSignalling/video/theora=true
org.freedesktop.Telepathy.Channel.Interface.MediaSignalling/video/h264=true
</pre>

        <p>Like the <tp:member-ref>HandlerChannelFilter</tp:member-ref>
          property, this property cannot change while the Handler owns its
          Client bus name. However, the <code>.client</code> file, if any,
          can change (due to upgrades or installation of pluggable codecs),
          and the capabilities really supported by the handler might not
          exactly match what is cached in the <code>.client</code> file.</p>

        <tp:rationale>
          <p>The client file is installed statically and is intended to list
            codecs etc. that the handler guarantees it can support (e.g. by
            having a hard dependency on them), whereas the running handler
            process might be able to find additional codecs.</p>
        </tp:rationale>
      </tp:docstring>
    </property>

    <method name="HandleChannels" tp:name-for-bindings="Handle_Channels">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Called by the channel dispatcher when this client should handle these
          channels, or when this client should present channels that it is already
          handling to the user (e.g. bring them into the foreground).</p>

        <tp:rationale>
          <p>Clients are expected to know what channels they're already handling,
            and which channel object path corresponds to which window or tab.
            This can easily be done using a hash table keyed by channels' object
            paths.</p>
        </tp:rationale>

        <p>This method can raise any D-Bus error. If it does, the
          handler is assumed to have failed or crashed, and the channel
          dispatcher MUST recover in an implementation-specific way; it MAY
          attempt to dispatch the channels to another handler, or close the
          channels.</p>

        <p>If closing the channels, it is RECOMMENDED that the channel
          dispatcher attempts to close the channels using
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">Channel.Close</tp:dbus-ref>,
          but resorts to calling
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">Channel.Interface.Destroyable.Destroy</tp:dbus-ref>
          (if available) or ignoring the channel (if not) if the same handler
          repeatedly fails to handle channels.</p>

        <p>After HandleChannels returns successfully, the client process is
          considered to be responsible for the channel until it its unique
          name disappears from the bus.</p>

        <tp:rationale>
          <p>If a process has multiple Client bus names - some temporary and
            some long-lived - and drops one of the temporary bus names in order
            to reduce the set of channels that it will handle, any channels
            that it is already handling should remain unaffected.</p>
        </tp:rationale>
      </tp:docstring>

      <arg direction="in" name="Account" type="o">
        <tp:docstring>
          The
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">Account</tp:dbus-ref>
          with which the channels are associated. The
          well-known bus name to use is that of the
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">AccountManager</tp:dbus-ref>.
        </tp:docstring>
      </arg>

      <arg direction="in" name="Connection" type="o">
        <tp:docstring>
          The Connection with which the channels are associated. The
          well-known bus name to use can be derived from this object
          path by removing the leading '/' and replacing all subsequent
          '/' by '.'.
        </tp:docstring>
      </arg>

      <arg direction="in" name="Channels" tp:type="Channel_Details[]" type="a(oa{sv})">
        <tp:docstring>
          The channels and their immutable properties. Their well-known
          bus name is the same as that of the Connection.
        </tp:docstring>
      </arg>

      <arg direction="in" name="Requests_Satisfied" type="ao">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The requests satisfied by these channels.</p>

          <tp:rationale>
            <p>If the handler implements Requests, this tells it
              that these channels match previous <tp:dbus-ref namespace="org.freedesktop.Telepathy.Client.Interface.Requests">AddRequest</tp:dbus-ref>
              calls that it may have received.</p>

            <p>There can be more than one, if they were EnsureChannel
              requests.</p>
          </tp:rationale>
        </tp:docstring>
      </arg>

      <arg direction="in" name="User_Action_Time" type="t">
        <tp:docstring>
          The time at which user action occurred, or 0 if this channel
          is to be handled for some reason not involving user action.
          Handlers SHOULD use this for focus-stealing prevention,
          if applicable.
        </tp:docstring>
      </arg>

      <arg direction="in" name="Handler_Info" type="a{sv}">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>Additional information about these channels. No keys are
            currently defined.</p>

          <p>If keys are defined for this dictionary, all will be optional;
            handlers MAY safely ignore any entry in this dictionary.</p>
        </tp:docstring>
      </arg>

      <!-- FIXME: invent a way to say "any error is possible" in spec markup -->
    </method>

    <property access="read" name="HandledChannels" tp:name-for-bindings="Handled_Channels" type="ao">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>A list of the channels that this process is currently handling.</p>

        <p>There is no change notification.</p>

        <tp:rationale>
          <p>This property exists for state recovery - it makes it possible
            for channel handling to survive a ChannelDispatcher crash.</p>

          <p>If the channel dispatcher is automatically replaced, the
            replacement can discover all Handlers by looking for the Client
            well-known bus names, and discover which channels they are
            currently handling. Once this has been done, all unhandled
            channels can be re-dispatched, and the only issue visible to
            the user is that unhandled channels that they have already
            approved might be sent back to Approvers.</p>
        </tp:rationale>

        <p>The value of this property SHOULD be the same for all Client
          instances that share a unique bus name, and SHOULD include all
          channels that are being handled, even if they were conceptually
          handled by a different Client instance.</p>

        <tp:rationale>
          <p>Otherwise, when a process released a temporary Client name,
            channels that it handled because of that Client name would no
            longer be state-recoverable.</p>
        </tp:rationale>
      </tp:docstring>
    </property>

  </interface>
</node>
<node name="/Client_Interface_Requests" xml:base="../spec/Client_Interface_Requests.xml">
  <tp:copyright>Copyright © 2008-2009 Collabora Ltd.</tp:copyright>
  <tp:copyright>Copyright © 2008-2009 Nokia Corporation</tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
      modify it under the terms of the GNU Lesser General Public
      License as published by the Free Software Foundation; either
      version 2.1 of the License, or (at your option) any later version.</p>

    <p>This library is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
      Lesser General Public License for more details.</p>

    <p>You should have received a copy of the GNU Lesser General Public
      License along with this library; if not, write to the Free Software
      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
      02110-1301, USA.</p>
  </tp:license>

  <interface name="org.freedesktop.Telepathy.Client.Interface.Requests">
    <tp:added version="0.17.26">(as a stable interface)</tp:added>

    <tp:requires interface="org.freedesktop.Telepathy.Client"/>
    <tp:requires interface="org.freedesktop.Telepathy.Client.Handler"/>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>This interface can be implemented by a Handler to be notified about
        requests for channels that it is likely to be asked to handle.</p>
    </tp:docstring>

    <method name="AddRequest" tp:name-for-bindings="Add_Request">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Called by the ChannelDispatcher to indicate that channels have been
          requested, and that if the request is successful, they will probably
          be handled by this Handler. The ChannelDispatcher SHOULD only
          call this method on one handler per request.</p>

        <tp:rationale>
          <p>This allows the UI to start preparing to handle the channels
            in advance (e.g. render a window with an &quot;in progress&quot; message),
            improving perceived responsiveness.</p>

          <p>The use of &quot;probably&quot; is because you can't necessarily tell from
            a channel request which handler will handle particular channels.
            A reasonable heuristic would be to match the request against the
            <tp:dbus-ref namespace="org.freedesktop.Telepathy.Client.Handler">HandlerChannelFilter</tp:dbus-ref>,
            and respect the preferred handler (if any).</p>
        </tp:rationale>

        <p>If the request succeeds and is given to the expected Handler,
          the Requests_Satisfied parameter to
          <tp:dbus-ref namespace="org.freedesktop.Telepathy.Client.Handler">HandleChannels</tp:dbus-ref>
          can be used to match the channel to a previous AddRequest call.</p>

        <tp:rationale>
          <p>This lets the UI direct the channels to the window that it
            already opened.</p>
        </tp:rationale>

        <p>If the request fails, the expected handler is notified by the
          channel dispatcher calling its
          <tp:member-ref>RemoveRequest</tp:member-ref> method.</p>

        <tp:rationale>
          <p>This lets the UI close the window or display the error.</p>
        </tp:rationale>

        <p>The channel dispatcher SHOULD remember which handler was notified,
          and if the channel request succeeds, it SHOULD dispatch the channels
          to the expected handler, unless the channels do not match that
          handler's <tp:dbus-ref namespace="org.freedesktop.Telepathy.Client.Handler">HandlerChannelFilter</tp:dbus-ref>.
          If the channels are not dispatched to the expected handler, the
          handler that was expected is notified by the channel dispatcher
          calling its <tp:member-ref>RemoveRequest</tp:member-ref> method
          with the NotYours error.</p>

        <tp:rationale>
          <p>Expected handling is for the UI to close the window it
            previously opened.</p>
        </tp:rationale>

        <p>Handlers SHOULD NOT return an error from this method; errors
          returned from this method SHOULD NOT alter the channel dispatcher's
          behaviour.</p>

        <tp:rationale>
          <p>Calls to this method are merely a notification.</p>
        </tp:rationale>
      </tp:docstring>

      <arg direction="in" name="Request" type="o">
        <tp:docstring>
          The <tp:dbus-ref namespace="org.freedesktop.Telepathy">ChannelRequest</tp:dbus-ref>
          object, which MUST have been returned by <tp:dbus-ref namespace="org.freedesktop.Telepathy.ChannelDispatcher">CreateChannel</tp:dbus-ref>
          or <tp:dbus-ref namespace="org.freedesktop.Telepathy.ChannelDispatcher">EnsureChannel</tp:dbus-ref>
          before this method is called.

          <tp:rationale>
            See those methods for the rationale of this ordering.
          </tp:rationale>
        </tp:docstring>
      </arg>

      <arg direction="in" name="Properties" tp:type="Qualified_Property_Value_Map" type="a{sv}">
        <tp:docstring>
          <p>Some of the properties of the ChannelRequest. To avoid race
            conditions, this dictionary MUST NOT include properties whose
            values could subsequently change. It SHOULD include as many
            properties as possible, given that constraint.</p>

          <p>In particular, the properties <tp:dbus-ref namespace="org.freedesktop.Telepathy.ChannelRequest">Requests</tp:dbus-ref>
            and <tp:dbus-ref namespace="org.freedesktop.Telepathy.ChannelRequest">UserActionTime</tp:dbus-ref>
            MUST be included.</p>
        </tp:docstring>
      </arg>
    </method>

    <method name="RemoveRequest" tp:name-for-bindings="Remove_Request">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Called by the ChannelDispatcher to indicate that a request
          previously passed to <tp:member-ref>AddRequest</tp:member-ref>
          has failed and should be disregarded.</p>

        <p>Handlers SHOULD NOT return an error from this method; errors
          returned from this method SHOULD NOT alter the channel dispatcher's
          behaviour.</p>

        <tp:rationale>
          <p>Calls to this method are merely a notification.</p>
        </tp:rationale>
      </tp:docstring>

      <arg direction="in" name="Request" type="o">
        <tp:docstring>
          The request that failed.
        </tp:docstring>
      </arg>

      <arg direction="in" name="Error" tp:type="DBus_Error_Name" type="s">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The name of the D-Bus error with which the request failed.</p>

          <p>If this is <code>org.freedesktop.Telepathy.Error.NotYours</code>,
            this indicates that the request succeeded, but all the resulting
            channels were given to some other handler.</p>
        </tp:docstring>
      </arg>

      <arg direction="in" name="Message" type="s">
        <tp:docstring>
          Any message supplied with the D-Bus error.
        </tp:docstring>
      </arg>
    </method>

  </interface>
</node>

</tp:spec>

<tp:spec>

<tp:title>Debug interfaces</tp:title>

<node name="/Debug" xml:base="../spec/Debug.xml">
  <tp:copyright>Copyright (C) 2009 Collabora Ltd.</tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Debug">
    <tp:added version="0.17.27">(as stable API)</tp:added>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>An interface for providing debug messages.</p>

      <p>This interface is primarily provided by one object per
      service, at the path <tt>/org/freedesktop/Telepathy/debug</tt>.</p>
    </tp:docstring>

    <property access="readwrite" name="Enabled" tp:name-for-bindings="Enabled" type="b">
      <tp:docstring>
        TRUE if the <tp:member-ref>NewDebugMessage</tp:member-ref> signal
        should be emitted when a new debug message is generated.
      </tp:docstring>
    </property>

    <method name="GetMessages" tp:name-for-bindings="Get_Messages">
      <tp:docstring>
        Retrieve buffered debug messages. An implementation could have a
        limit on how many message it keeps and so the array returned from
        this method should not be assumed to be all of the messages in
        the lifetime of the service.
      </tp:docstring>

      <arg direction="out" name="Messages" tp:type="Debug_Message[]" type="a(dsus)">
        <tp:docstring>
          A list of debug messages.
        </tp:docstring>
      </arg>
    </method>

    <signal name="NewDebugMessage" tp:name-for-bindings="New_Debug_Message">
      <tp:docstring>
        Emitted when a debug messages is generated if the
        <tp:member-ref>Enabled</tp:member-ref> property is set to TRUE.
      </tp:docstring>

      <arg name="time" type="d">
        <tp:docstring>
          Timestamp of the debug message.
        </tp:docstring>
      </arg>
      <arg name="domain" type="s">
        <tp:docstring>
          Domain of the debug message, as described in the Debug_Message struct.
        </tp:docstring>
      </arg>
      <arg name="level" tp:type="Debug_Level" type="u">
        <tp:docstring>
          Level of the debug message.
        </tp:docstring>
      </arg>
      <arg name="message" type="s">
        <tp:docstring>
          The text of the debug message.
        </tp:docstring>
      </arg>
    </signal>

    <tp:enum name="Debug_Level" type="u">
      <tp:enumvalue suffix="Error" value="0">
        <tp:docstring>
          Log level for errors. Error messages are always fatal, resulting
          in the service terminating after something completely
          unexpected occurred.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Critical" value="1">
        <tp:docstring>
          Log level for critical messages. Critical messages are messages
          that the service might predict and it is up to the service itself
          to decide whether to terminate following a critical message.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Warning" value="2">
        <tp:docstring>
          Log level for warnings.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Message" value="3">
        <tp:docstring>
          Log level for messages.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Info" value="4">
        <tp:docstring>
          Log level for information messages.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Debug" value="5">
        <tp:docstring>
          Log level for debug messages.
        </tp:docstring>
      </tp:enumvalue>
    </tp:enum>

    <tp:struct array-name="Debug_Message_List" name="Debug_Message">
      <tp:docstring>
        A struct representing a debug message, as returned by
        <tp:member-ref>GetMessages</tp:member-ref>.
      </tp:docstring>

      <tp:member name="Timestamp" type="d">
        <tp:docstring>
          Timestamp of the debug message. This is a double to allow
          more accuracy in the time the message was logged.
        </tp:docstring>
      </tp:member>

      <tp:member name="Domain" type="s">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>Domain of the debug message. This is used to identify
          the source of debug messages. For example, debug messages
          from a connection manager could have this Domain struct
          member be the name of the connection manager, and logs
          from any helper library could have the name of the helper
          library.</p>

          <p>The domain could also contain a category as to where
          the log message originated separated by a forward-slash.
          For example, if a debug message was output in a connection
          manager called &quot;dummy&quot;, in the file-transfer code, this
          Domain struct member might be <tt>dummy/file-transfer</tt>.</p>
        </tp:docstring>
      </tp:member>

      <tp:member name="Level" tp:type="Debug_Level" type="u">
        <tp:docstring>
          Level of the debug message. This states the severity of the
          debug message.
        </tp:docstring>
      </tp:member>

      <tp:member name="Message" type="s">
        <tp:docstring>
          The text of the debug message.
        </tp:docstring>
      </tp:member>
    </tp:struct>

  </interface>
</node>

</tp:spec>

<tp:generic-types xml:base="../spec/generic-types.xml">

  <tp:simple-type name="Unix_Timestamp" type="u">
    <tp:docstring>An unsigned 32-bit integer representing time as the number
      of seconds elapsed since the Unix epoch
      (1970-01-01T00:00:00Z)</tp:docstring>
  </tp:simple-type>

  <tp:simple-type name="Unix_Timestamp64" type="x">
    <tp:docstring>An signed 64-bit integer representing time as the number
      of seconds elapsed since the Unix epoch
      (1970-01-01T00:00:00Z); negative for times before the epoch</tp:docstring>

    <tp:rationale>The Text interface is the only user of Unix_Timestamp so
      far, and we'd like to be Y2038 compatible in future
      interfaces.</tp:rationale>
  </tp:simple-type>

  <tp:simple-type array-name="DBus_Bus_Name_List" name="DBus_Bus_Name" type="s">
    <tp:docstring>A string representing a D-Bus bus name - either a well-known
      name like &quot;org.freedesktop.Telepathy.MissionControl&quot; or a unique name
      like &quot;:1.123&quot;</tp:docstring>
  </tp:simple-type>

  <tp:simple-type array-name="DBus_Well_Known_Name_List" name="DBus_Well_Known_Name" type="s">
    <tp:docstring>A string representing a D-Bus well-known
      name like &quot;org.freedesktop.Telepathy.MissionControl&quot;.</tp:docstring>
  </tp:simple-type>

  <tp:simple-type array-name="DBus_Unique_Name_List" name="DBus_Unique_Name" type="s">
    <tp:docstring>A string representing a D-Bus unique name, such as
      &quot;:1.123&quot;</tp:docstring>
  </tp:simple-type>

  <tp:simple-type array-name="DBus_Interface_List" name="DBus_Interface" type="s">
    <tp:docstring>An ASCII string representing a D-Bus interface - two or more
      elements separated by dots, where each element is a non-empty
      string of ASCII letters, digits and underscores, not starting with
      a digit. The maximum total length is 255 characters. For example,
      &quot;org.freedesktop.DBus.Peer&quot;.</tp:docstring>
  </tp:simple-type>

  <tp:simple-type name="DBus_Error_Name" type="s">
    <tp:docstring>An ASCII string representing a D-Bus error. This is
      syntactically the same as a <tp:type>DBus_Interface</tp:type>, but the
      meaning is different.</tp:docstring>
  </tp:simple-type>

  <tp:simple-type name="DBus_Signature" type="s">
    <tp:docstring>A string representing a D-Bus signature
      (the 'g' type isn't used because of poor interoperability, particularly
      with dbus-glib)</tp:docstring>
  </tp:simple-type>

  <tp:simple-type name="DBus_Member" type="s">
    <tp:docstring>An ASCII string representing a D-Bus method, signal
      or property name - a non-empty string of ASCII letters, digits and
      underscores, not starting with a digit, with a maximum length of 255
      characters. For example, &quot;Ping&quot;.</tp:docstring>
  </tp:simple-type>

  <tp:simple-type array-name="DBus_Qualified_Member_List" name="DBus_Qualified_Member" type="s">
    <tp:docstring>A string representing the full name of a D-Bus method,
      signal or property, consisting of a DBus_Interface, followed by
      a dot, followed by a DBus_Member. For example,
      &quot;org.freedesktop.DBus.Peer.Ping&quot;.</tp:docstring>
  </tp:simple-type>

  <tp:mapping array-name="Qualified_Property_Value_Map_List" name="Qualified_Property_Value_Map">
    <tp:docstring>A mapping from strings representing D-Bus
      properties (by their namespaced names) to their values.</tp:docstring>
    <tp:member name="Key" tp:type="DBus_Qualified_Member" type="s">
      <tp:docstring>
        A D-Bus interface name, followed by a dot and a D-Bus property name.
      </tp:docstring>
    </tp:member>
    <tp:member name="Value" type="v">
      <tp:docstring>
        The value of the property.
      </tp:docstring>
    </tp:member>
  </tp:mapping>

  <tp:mapping array-name="String_Variant_Map_List" name="String_Variant_Map">
    <tp:docstring>A mapping from strings to variants representing extra
      key-value pairs.</tp:docstring>
    <tp:member name="Key" type="s"/>
    <tp:member name="Value" type="v"/>
  </tp:mapping>

  <tp:mapping array-name="String_String_Map_List" name="String_String_Map">
    <tp:docstring>A mapping from strings to strings representing extra
      key-value pairs.</tp:docstring>
    <tp:member name="Key" type="s"/>
    <tp:member name="Value" type="s"/>
  </tp:mapping>

  <tp:struct array-name="Socket_Address_IP_List" name="Socket_Address_IP">
    <tp:docstring>An IP address and port.</tp:docstring>
    <tp:member name="Address" type="s">
      <tp:docstring>Either a dotted-quad IPv4 address literal as for
        <tp:type>Socket_Address_IPv4</tp:type>, or an RFC2373 IPv6 address
        as for <tp:type>Socket_Address_IPv6</tp:type>.
      </tp:docstring>
    </tp:member>
    <tp:member name="Port" type="q">
      <tp:docstring>The TCP or UDP port number.</tp:docstring>
    </tp:member>
  </tp:struct>

  <tp:struct name="Socket_Address_IPv4">
    <tp:docstring>An IPv4 address and port.</tp:docstring>
    <tp:member name="Address" type="s">
      <tp:docstring>A dotted-quad IPv4 address literal: four ASCII decimal
        numbers, each between 0 and 255 inclusive, e.g.
        &quot;192.168.0.1&quot;.</tp:docstring>
    </tp:member>
    <tp:member name="Port" type="q">
      <tp:docstring>The TCP or UDP port number.</tp:docstring>
    </tp:member>
  </tp:struct>

  <tp:struct name="Socket_Address_IPv6">
    <tp:docstring>An IPv6 address and port.</tp:docstring>
    <tp:member name="Address" type="s">
      <tp:docstring>An IPv6 address literal as specified by RFC2373
        section 2.2, e.g. &quot;2001:DB8::8:800:200C:4171&quot;.</tp:docstring>
    </tp:member>
    <tp:member name="Port" type="q">
      <tp:docstring>The TCP or UDP port number.</tp:docstring>
    </tp:member>
  </tp:struct>

  <tp:struct name="Socket_Netmask_IPv4">
    <tp:docstring>An IPv4 network or subnet.</tp:docstring>
    <tp:member name="Address" type="s">
      <tp:docstring>A dotted-quad IPv4 address literal: four ASCII decimal
        numbers, each between 0 and 255 inclusive, e.g.
        &quot;192.168.0.1&quot;.</tp:docstring>
    </tp:member>
    <tp:member name="Prefix_Length" type="y">
      <tp:docstring>The number of leading bits of the address that must
        match, for this netmask to be considered to match an
        address.</tp:docstring>
    </tp:member>
  </tp:struct>

  <tp:struct name="Socket_Netmask_IPv6">
    <tp:docstring>An IPv6 network or subnet.</tp:docstring>
    <tp:member name="Address" type="s">
      <tp:docstring>An IPv6 address literal as specified by RFC2373
        section 2.2, e.g. &quot;2001:DB8::8:800:200C:4171&quot;.</tp:docstring>
    </tp:member>
    <tp:member name="Prefix_Length" type="y">
      <tp:docstring>The number of leading bits of the address that must
        match, for this netmask to be considered to match an
        address.</tp:docstring>
    </tp:member>
  </tp:struct>

</tp:generic-types>
<tp:errors namespace="org.freedesktop.Telepathy.Error" xml:base="../spec/errors.xml">
  <tp:error name="Network Error">
    <tp:docstring>
    Raised when there is an error reading from or writing to the network.
    </tp:docstring>
  </tp:error>

  <tp:error name="Not Implemented">
    <tp:docstring>
    Raised when the requested method, channel, etc is not available on this connection.
    </tp:docstring>
  </tp:error>

  <tp:error name="Invalid Argument">
    <tp:docstring>
    Raised when one of the provided arguments is invalid.
    </tp:docstring>
  </tp:error>

  <tp:error name="Not Available">
    <tp:docstring>
    Raised when the requested functionality is temporarily unavailable.
    </tp:docstring>
  </tp:error>

  <tp:error name="Permission Denied">
    <tp:docstring>
    The user is not permitted to perform the requested operation.
    </tp:docstring>
  </tp:error>

  <tp:error name="Disconnected">
    <tp:docstring>
      The connection is not currently connected and cannot be used.
      This error may also be raised when operations are performed on a
      Connection for which
      <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection">StatusChanged</tp:dbus-ref>
      has signalled status Disconnected for reason None.

      <tp:rationale>
        The second usage corresponds to None in the
        <tp:type>Connection_Status_Reason</tp:type> enum; if a better reason
        is available, the corresponding error should be used instead.
      </tp:rationale>
    </tp:docstring>
  </tp:error>

  <tp:error name="Invalid Handle">
    <tp:docstring>
    The handle specified is unknown on this channel or connection.
    </tp:docstring>
  </tp:error>

  <tp:error name="Channel.Banned">
    <tp:docstring>
    You are banned from the channel.
    </tp:docstring>
  </tp:error>

  <tp:error name="Channel.Full">
    <tp:docstring>
    The channel is full.
    </tp:docstring>
  </tp:error>

  <tp:error name="Channel.Invite Only">
    <tp:docstring>
    The requested channel is invite-only.
    </tp:docstring>
  </tp:error>

  <tp:error name="Not Yours">
    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>The requested channel or other resource already exists, and another
        user interface in this session is responsible for it.</p>

      <p>User interfaces SHOULD handle this error unobtrusively, since it
        indicates that some other user interface is already processing the
        channel.</p>
    </tp:docstring>
  </tp:error>

  <tp:error name="Cancelled">
    <tp:docstring>
      Raised by an ongoing request if it is cancelled by user request before
      it has completed, or when operations are performed on an object which
      the user has asked to close (for instance, a Connection where the user
      has called Disconnect, or a Channel where the user has called Close).

      <tp:rationale>
        The second form can be used to correspond to the Requested member in
        the <tp:type>Connection_Status_Reason</tp:type> enum, or to
        to represent the situation where disconnecting a Connection,
        closing a Channel, etc. has been requested by the user but this
        request has not yet been acted on, for instance because the
        service will only act on the request when it has finished processing
        an event queue.
      </tp:rationale>
    </tp:docstring>
  </tp:error>

  <tp:error name="Authentication Failed">
    <tp:docstring>
      Raised when authentication with a service was unsuccessful.
      <tp:rationale>
        This corresponds to Authentication_Failed in the
        <tp:type>Connection_Status_Reason</tp:type> enum.
      </tp:rationale>
    </tp:docstring>
  </tp:error>

  <tp:error name="Encryption Not Available">
    <tp:docstring>
      Raised if a user request insisted that encryption should be used,
      but encryption was not actually available.

      <tp:rationale>
        This corresponds to part of Encryption_Error in the
        <tp:type>Connection_Status_Reason</tp:type> enum. It's been separated
        into a distinct error here because the two concepts that were part
        of EncryptionError seem to be things that could reasonably appear
        differently in the UI.
      </tp:rationale>
    </tp:docstring>
  </tp:error>

  <tp:error name="Encryption Error">
    <tp:docstring>
      Raised if encryption appears to be available, but could not actually be
      used (for instance if SSL/TLS negotiation fails).
      <tp:rationale>
        This corresponds to part of Encryption_Error in the
        <tp:type>Connection_Status_Reason</tp:type> enum.
      </tp:rationale>
    </tp:docstring>
  </tp:error>

  <tp:error name="Cert.Not Provided">
    <tp:docstring>
      Raised if the server did not provide a SSL/TLS certificate. This error
      MUST NOT be used to represent the absence of a client certificate
      provided by the Telepathy connection manager.
      <tp:rationale>
        This corresponds to Cert_Not_Provided in the
        <tp:type>Connection_Status_Reason</tp:type> enum. That error
        explicitly applied only to server SSL certificates, so this one
        is similarly limited; having the CM present a client certificate
        is a possible future feature, but it should have its own error
        handling.
      </tp:rationale>
    </tp:docstring>
  </tp:error>

  <tp:error name="Cert.Untrusted">
    <tp:docstring>
      Raised if the server provided a SSL/TLS certificate signed by an
      untrusted certifying authority. This error SHOULD NOT be used to
      represent a self-signed certificate: see the Self Signed error for that.
      <tp:rationale>
        This corresponds to Cert_Untrusted in the
        <tp:type>Connection_Status_Reason</tp:type> enum, with a clarification
        to avoid ambiguity.
      </tp:rationale>
    </tp:docstring>
  </tp:error>

  <tp:error name="Cert.Expired">
    <tp:docstring>
      Raised if the server provided an expired SSL/TLS certificate.
      <tp:rationale>
        This corresponds to Cert_Expired in the
        <tp:type>Connection_Status_Reason</tp:type> enum.
      </tp:rationale>
    </tp:docstring>
  </tp:error>

  <tp:error name="Cert.Not Activated">
    <tp:docstring>
      Raised if the server provided an SSL/TLS certificate that will become
      valid at some point in the future.
      <tp:rationale>
        This corresponds to Cert_Not_Activated in the
        <tp:type>Connection_Status_Reason</tp:type> enum.
      </tp:rationale>
    </tp:docstring>
  </tp:error>

  <tp:error name="Cert.Fingerprint Mismatch">
    <tp:docstring>
      Raised if the server provided an SSL/TLS certificate that did not have
      the expected fingerprint.
      <tp:rationale>
        This corresponds to Cert_Fingerprint_Mismatch in the
        <tp:type>Connection_Status_Reason</tp:type> enum.
      </tp:rationale>
    </tp:docstring>
  </tp:error>

  <tp:error name="Cert.Hostname Mismatch">
    <tp:docstring>
      Raised if the server provided an SSL/TLS certificate that did not match
      its hostname.
      <tp:rationale>
        This corresponds to Cert_Hostname_Mismatch in the
        <tp:type>Connection_Status_Reason</tp:type> enum.
      </tp:rationale>
    </tp:docstring>
  </tp:error>

  <tp:error name="Cert.Self Signed">
    <tp:docstring>
      Raised if the server provided an SSL/TLS certificate that is self-signed
      and untrusted.
      <tp:rationale>
        This corresponds to Cert_Hostname_Mismatch in the
        <tp:type>Connection_Status_Reason</tp:type> enum.
      </tp:rationale>
    </tp:docstring>
  </tp:error>

  <tp:error name="Cert.Invalid">
    <tp:docstring>
      Raised if the server provided an SSL/TLS certificate that is
      unacceptable in some way that does not have a more specific error.
      <tp:rationale>
        This corresponds to Cert_Other_Error in the
        <tp:type>Connection_Status_Reason</tp:type> enum.
      </tp:rationale>
    </tp:docstring>
  </tp:error>

  <tp:error name="Not Capable">
    <tp:docstring>
    Raised when requested functionality is unavailable due to contact
    not having required capabilities.
    </tp:docstring>
  </tp:error>

  <tp:error name="Offline">
    <tp:docstring>
      Raised when requested functionality is unavailable because a contact is
      offline.

      <tp:rationale>
        This corresponds to Offline in the
        <tp:type>Channel_Group_Change_Reason</tp:type> enum.
      </tp:rationale>
    </tp:docstring>
  </tp:error>

  <tp:error name="Channel.Kicked">
    <tp:docstring>
      Used to represent a user being ejected from a channel by another user,
      for instance being kicked from a chatroom.

      <tp:rationale>
        This corresponds to Kicked in the
        <tp:type>Channel_Group_Change_Reason</tp:type> enum.
      </tp:rationale>
    </tp:docstring>
  </tp:error>

  <tp:error name="Busy">
    <tp:docstring>
      Used to represent a user being removed from a channel because of a
      &quot;busy&quot; indication. This error SHOULD NOT be used to represent a server
      or other infrastructure being too busy to process a request - for that,
      see ServerBusy.

      <tp:rationale>
        This corresponds to Busy in the
        <tp:type>Channel_Group_Change_Reason</tp:type> enum.
      </tp:rationale>
    </tp:docstring>
  </tp:error>

  <tp:error name="No Answer">
    <tp:docstring>
      Used to represent a user being removed from a channel because they did
      not respond, e.g. to a StreamedMedia call.

      <tp:rationale>
        This corresponds to No_Answer in the
        <tp:type>Channel_Group_Change_Reason</tp:type> enum.
      </tp:rationale>
    </tp:docstring>
  </tp:error>

  <tp:error name="Does Not Exist">
    <tp:docstring>
      Raised when the requested user does not, in fact, exist.

      <tp:rationale>
        This corresponds to Invalid_Contact in the
        <tp:type>Channel_Group_Change_Reason</tp:type> enum, but can also be
        used to represent other things not existing (like chatrooms, perhaps).
      </tp:rationale>
    </tp:docstring>
  </tp:error>

  <tp:error name="Terminated">
    <tp:docstring>
      Raised when a channel is terminated for an unspecified reason. In
      particular, this error SHOULD be used whenever normal termination of
      a 1-1 StreamedMedia call by the remote user is represented as a D-Bus
      error name.

      <tp:rationale>
        This corresponds to None in the
        <tp:type>Channel_Group_Change_Reason</tp:type> enum.
      </tp:rationale>
    </tp:docstring>
  </tp:error>

  <tp:error name="Connection Refused">
    <tp:docstring>
      Raised when a connection is refused.
    </tp:docstring>
  </tp:error>

  <tp:error name="Connection Failed">
    <tp:docstring>
      Raised when a connection can't be established.
    </tp:docstring>
  </tp:error>

  <tp:error name="Connection Lost">
    <tp:docstring>
      Raised when a connection is broken.
    </tp:docstring>
  </tp:error>

  <tp:error name="Already Connected">
    <tp:docstring>
      Raised when the user attempts to connect to an account but they are
      already connected (perhaps from another client or computer), and the
      protocol or account settings do not allow this.

      <tp:rationale>
        XMPP can have this behaviour if the user chooses the same resource
        in both clients (it is server-dependent whether the result is
        AlreadyConnected on the new connection, ConnectionReplaced on the
        old connection, or two successful connections).
      </tp:rationale>
    </tp:docstring>
  </tp:error>

  <tp:error name="Connection Replaced">
    <tp:docstring>
      Raised by an existing connection to an account if it is replaced by
      a new connection (perhaps from another client or computer).

      <tp:rationale>
        In MSNP, when connecting twice with the same Passport, the new
        connection &quot;wins&quot; and the old one is automatically disconnected.
        XMPP can also have this behaviour if the user chooses the same
        resource in two clients (it is server-dependent whether the result is
        AlreadyConnected on the new connection, ConnectionReplaced on the
        old connection, or two successful connections).
      </tp:rationale>
    </tp:docstring>
  </tp:error>

  <tp:error name="Registration Exists">
    <tp:docstring>
      Raised during in-band registration if the server indicates that the
      requested account already exists.
    </tp:docstring>
  </tp:error>

  <tp:error name="Service Busy">
    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      Raised if a server or some other piece of infrastructure cannot process
      the request, e.g. due to resource limitations. Clients MAY try again
      later.

      <tp:rationale>
        This is not the same error as Busy, which indicates that a
        <em>user</em> is busy.
      </tp:rationale>
    </tp:docstring>
  </tp:error>

  <tp:error name="Resource Unavailable">
    <tp:docstring>
      Raised if a request cannot be satisfied because a process local to the
      user has insufficient resources. Clients MAY try again
      later.

      <tp:rationale>
        For instance, the <tp:dbus-ref namespace="org.freedesktop.Telepathy">ChannelDispatcher</tp:dbus-ref>
        might raise this error for some or all channel requests if it has
        detected that there is not enough free memory.
      </tp:rationale>
    </tp:docstring>
  </tp:error>

  <tp:copyright>Copyright © 2005-2009 Collabora Limited</tp:copyright>
  <tp:copyright>Copyright © 2005-2009 Nokia Corporation</tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
<p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</p>
  </tp:license>
</tp:errors>

</tp:spec>
