/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Spicebird code.
 *
 * The Initial Developer of the Original Code is
 *   Synovel Software Technologies
 * Portions created by the Initial Developer are Copyright (C) 2009
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Prasad Sunkari <prasad@synovel.com> (Original Author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "csITpChannel.idl"
#include "nsIArray.idl"
#include "nsISupports.idl"

interface csITpChannelDetails;
interface csITpConnection;

[scriptable, uuid(8e33b744-feea-471a-b915-a5a94102777b)]
interface csITpChannelReadyCB: nsISupports
{
  void onChannelReady();
  void onChannelReadyError(in ACString aErrorDomain, in PRUint32 aErrorCode, in AUTF8String aErrorDesc);
};

[scriptable, uuid(69d80c91-65b5-484e-81c1-d60e8c1ee367)]
interface csITpChannelUtils: nsISupports
{
  void initWithDetails(in csITpChannelDetails aDetails);
  void init(in ACString aConnectionObjectPath,
            in ACString aObjectPath, in ACString aChannelType,
            in PRUint32 aHandleType, in PRUint32 aHandle);

  void callWhenReady(in csITpChannelReadyCB cb);

  PRUint32 getGroupHandleOwner(in PRUint32 aHandle);

  void getGroupMembers(out PRUint32 aMembersCount,
               [array,retval,size_is(aMembersCount)] out PRUint32 aMembers);

  void getGroupLocalPending(out PRUint32 aMembersCount,
               [array,retval,size_is(aMembersCount)] out PRUint32 aMembers);

  void getGroupRemotePending(out PRUint32 aMembersCount,
               [array,retval,size_is(aMembersCount)] out PRUint32 aMembers);

  boolean getGroupLocalPendingInfo(in PRUint32 aHandle, out PRUint32 aActor,
                                   out PRUint32 aReason, out string aMessage);

  readonly attribute PRBool channelReady;
  readonly attribute nsIArray channelProperties;
  readonly attribute PRUint32 groupFlags;
  readonly attribute PRUint32 groupSelfHandle;
  readonly attribute AUTF8String identifier;
  readonly attribute ACString connectionObjectPath;
};

