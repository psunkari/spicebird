/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Spicebird code.
 *
 * The Initial Developer of the Original Code is
 *   Synovel Software Technologies
 * Portions created by the Initial Developer are Copyright (C) 2008
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Prasad Sunkari <prasad@synovel.com> (Original Author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

/*
 * Code in this file is generated using a computer program.
 * Please refer to the corresponding telepathy spec for any help in using the
 * code here.  You may also feel free to contact the original developer for
 * any related help.
 */


#include "nsISupports.idl"


%{C++
#include "glib/gtypes.h"
%}
native gpointer(gpointer);



[scriptable, uuid(fa751f0a-c3bc-4468-86ca-52f698bd733d)]
interface csITpChannelInterfacePasswordGetPasswordFlagsCB : nsISupports
{
  void onGetPasswordFlagsError(in ACString aErrorDomain, in PRUint32 aErrorCode, in ACString aErrorDesc);
  void onGetPasswordFlagsDone(in PRUint32 aPasswordFlags);
};

[scriptable, uuid(5ad82975-edbb-42d7-ada6-83cfa0d4f5ea)]
interface csITpChannelInterfacePasswordPasswordFlagsChangedObserver : nsISupports
{
  void onPasswordFlagsChanged(in PRUint32 aAdded, in PRUint32 aRemoved);
};

[scriptable, uuid(fd2266f0-349d-48d9-ace1-52b09ac72b3f)]
interface csITpChannelInterfacePasswordProvidePasswordCB : nsISupports
{
  void onProvidePasswordError(in ACString aErrorDomain, in PRUint32 aErrorCode, in ACString aErrorDesc);
  void onProvidePasswordDone(in PRBool aCorrect);
};



[scriptable, uuid(bc79b0e8-d879-4aaa-bc0d-8ecb6a3a3bb9)]
interface csITpChannelInterfacePassword : nsISupports
{
  const short Channel_Password_Flags_Provide = 8;

  void callGetPasswordFlags(in csITpChannelInterfacePasswordGetPasswordFlagsCB cb);

  void connectToPasswordFlagsChanged(in csITpChannelInterfacePasswordPasswordFlagsChangedObserver observer);
  void disconnectFromPasswordFlagsChanged(in csITpChannelInterfacePasswordPasswordFlagsChangedObserver observer);

  void callProvidePassword(in AUTF8String aPassword, in csITpChannelInterfacePasswordProvidePasswordCB cb);

};