/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Spicebird code.
 *
 * The Initial Developer of the Original Code is
 *   Synovel Software Technologies
 * Portions created by the Initial Developer are Copyright (C) 2008
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Prasad Sunkari <prasad@synovel.com> (Original Author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

/*
 * Code in this file is generated using a computer program.
 * Please refer to the corresponding telepathy spec for any help in using the
 * code here.  You may also feel free to contact the original developer for
 * any related help.
 */


#include "nsISupports.idl"
#include "nsIArray.idl"


%{C++
#include "glib/gtypes.h"
%}
native gpointer(gpointer);



[scriptable, uuid(357034cc-31f1-4ffc-8512-97bd9841b77b)]
interface csITpChannelInterfaceTubeParametersCB : nsISupports
{
  void getPropertyParametersError(in ACString aErrorDomain, in PRUint32 aErrorCode, in ACString aErrorDesc);
  void getPropertyParametersDone(in nsIArray aParameters);
};

[scriptable, uuid(248ce80e-b77d-4931-8a3e-86f679c56e28)]
interface csITpChannelInterfaceTubeStateCB : nsISupports
{
  void getPropertyStateError(in ACString aErrorDomain, in PRUint32 aErrorCode, in ACString aErrorDesc);
  void getPropertyStateDone(in PRUint32 aState);
};

[scriptable, uuid(4d423f0a-4d45-42c1-9659-e357a2cd28aa)]
interface csITpChannelInterfaceTubeTubeChannelStateChangedObserver : nsISupports
{
  void onTubeChannelStateChanged(in PRUint32 aState);
};



[scriptable, uuid(dc181194-c24e-4777-958f-1b563f533114)]
interface csITpChannelInterfaceTube : nsISupports
{
  void getPropertyParameters(in csITpChannelInterfaceTubeParametersCB cb);

  void getPropertyState(in csITpChannelInterfaceTubeStateCB cb);

  const short Tube_Channel_State_Local_Pending = 0;
  const short Tube_Channel_State_Remote_Pending = 1;
  const short Tube_Channel_State_Open = 2;
  const short Tube_Channel_State_Not_Offered = 3;

  void connectToTubeChannelStateChanged(in csITpChannelInterfaceTubeTubeChannelStateChangedObserver observer);
  void disconnectFromTubeChannelStateChanged(in csITpChannelInterfaceTubeTubeChannelStateChangedObserver observer);

  const short Socket_Address_Type_Unix = 0;
  const short Socket_Address_Type_Abstract_Unix = 1;
  const short Socket_Address_Type_IPv4 = 2;
  const short Socket_Address_Type_IPv6 = 3;

  const short Socket_Access_Control_Localhost = 0;
  const short Socket_Access_Control_Port = 1;
  const short Socket_Access_Control_Netmask = 2;
  const short Socket_Access_Control_Credentials = 3;

};