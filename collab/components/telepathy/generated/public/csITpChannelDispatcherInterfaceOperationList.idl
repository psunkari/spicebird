/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Spicebird code.
 *
 * The Initial Developer of the Original Code is
 *   Synovel Software Technologies
 * Portions created by the Initial Developer are Copyright (C) 2008
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Prasad Sunkari <prasad@synovel.com> (Original Author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

/*
 * Code in this file is generated using a computer program.
 * Please refer to the corresponding telepathy spec for any help in using the
 * code here.  You may also feel free to contact the original developer for
 * any related help.
 */


#include "nsISupports.idl"
#include "nsIArray.idl"


%{C++
#include "glib/gtypes.h"
%}
native gpointer(gpointer);



/*
 * Details of a channel dispatch operation.
 */
[scriptable, uuid(8379ab4c-d6da-4336-9e0b-0028f442fdfd)]
interface csITpDispatchOperationDetails : nsISupports
{
  /* The object path of the */
  readonly attribute ACString channelDispatchOperation;
  /*  */
  readonly attribute nsIArray properties;

  [noscript] gpointer toGLib();
};

[scriptable, uuid(b530e746-d29e-473e-90f4-ad9085201b8a)]
interface csITpChannelDispatcherInterfaceOperationListDispatchOperationsCB : nsISupports
{
  void getPropertyDispatchOperationsError(in ACString aErrorDomain, in PRUint32 aErrorCode, in ACString aErrorDesc);
  void getPropertyDispatchOperationsDone(in nsIArray aDispatchOperations);
};

[scriptable, uuid(731d1198-2780-4e5b-8132-808e69e96dcf)]
interface csITpChannelDispatcherInterfaceOperationListNewDispatchOperationObserver : nsISupports
{
  void onNewDispatchOperation(in ACString aDispatchOperation, in nsIArray aProperties);
};

[scriptable, uuid(6a88703b-4e1f-4bed-ad5d-0eab7a5af403)]
interface csITpChannelDispatcherInterfaceOperationListDispatchOperationFinishedObserver : nsISupports
{
  void onDispatchOperationFinished(in ACString aDispatchOperation);
};



[scriptable, uuid(afd91d37-1e3e-423a-910f-b9bc3b608096)]
interface csITpChannelDispatcherInterfaceOperationList : nsISupports
{
  void getPropertyDispatchOperations(in csITpChannelDispatcherInterfaceOperationListDispatchOperationsCB cb);

  void connectToNewDispatchOperation(in csITpChannelDispatcherInterfaceOperationListNewDispatchOperationObserver observer);
  void disconnectFromNewDispatchOperation(in csITpChannelDispatcherInterfaceOperationListNewDispatchOperationObserver observer);

  void connectToDispatchOperationFinished(in csITpChannelDispatcherInterfaceOperationListDispatchOperationFinishedObserver observer);
  void disconnectFromDispatchOperationFinished(in csITpChannelDispatcherInterfaceOperationListDispatchOperationFinishedObserver observer);

};