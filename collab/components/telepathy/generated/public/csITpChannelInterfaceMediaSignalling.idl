/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Spicebird code.
 *
 * The Initial Developer of the Original Code is
 *   Synovel Software Technologies
 * Portions created by the Initial Developer are Copyright (C) 2008
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Prasad Sunkari <prasad@synovel.com> (Original Author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

/*
 * Code in this file is generated using a computer program.
 * Please refer to the corresponding telepathy spec for any help in using the
 * code here.  You may also feel free to contact the original developer for
 * any related help.
 */


#include "nsISupports.idl"
#include "nsIArray.idl"


%{C++
#include "glib/gtypes.h"
%}
native gpointer(gpointer);



/*
 * A struct representing a active session handler.
 */
[scriptable, uuid(0072fe6c-a0e3-4fa9-8476-4f877e46cfdb)]
interface csITpMediaSessionHandlerInfo : nsISupports
{
  /* The object path of the session handler, which is on the
          same bus name as the channel. */
  readonly attribute ACString sessionHandler;
  /* The media session's type */
  readonly attribute AUTF8String mediaSessionType;

  [noscript] gpointer toGLib();
};

[scriptable, uuid(b2f43706-9e18-4699-883d-d4cfd6dc8472)]
interface csITpChannelInterfaceMediaSignallingGetSessionHandlersCB : nsISupports
{
  void onGetSessionHandlersError(in ACString aErrorDomain, in PRUint32 aErrorCode, in ACString aErrorDesc);
  void onGetSessionHandlersDone(in nsIArray aSessionHandlers);
};

[scriptable, uuid(29a87c7c-cab1-47c5-959a-02b70ec895ae)]
interface csITpChannelInterfaceMediaSignallingNewSessionHandlerObserver : nsISupports
{
  void onNewSessionHandler(in ACString aSessionHandler, in AUTF8String aSessionType);
};



[scriptable, uuid(8cc1befa-6e30-46de-9c80-f33609bc2c78)]
interface csITpChannelInterfaceMediaSignalling : nsISupports
{
  void callGetSessionHandlers(in csITpChannelInterfaceMediaSignallingGetSessionHandlersCB cb);

  void connectToNewSessionHandler(in csITpChannelInterfaceMediaSignallingNewSessionHandlerObserver observer);
  void disconnectFromNewSessionHandler(in csITpChannelInterfaceMediaSignallingNewSessionHandlerObserver observer);

};