/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Spicebird code.
 *
 * The Initial Developer of the Original Code is
 *   Synovel Software Technologies
 * Portions created by the Initial Developer are Copyright (C) 2008
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Prasad Sunkari <prasad@synovel.com> (Original Author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

/*
 * Code in this file is generated using a computer program.
 * Please refer to the corresponding telepathy spec for any help in using the
 * code here.  You may also feel free to contact the original developer for
 * any related help.
 */


#include "nsISupports.idl"
#include "nsIArray.idl"


%{C++
#include "glib/gtypes.h"
%}
native gpointer(gpointer);



[scriptable, uuid(8ad2b0d1-eb30-4eee-a21d-5ced9c19cb03)]
interface csITpRoomInfo : nsISupports
{
  readonly attribute PRUint32 handle;
  readonly attribute AUTF8String channelType;
  readonly attribute nsIArray info;

  [noscript] gpointer toGLib();
};

[scriptable, uuid(26821114-0b95-4338-9bfc-17f4523fefac)]
interface csITpChannelTypeRoomListServerCB : nsISupports
{
  void getPropertyServerError(in ACString aErrorDomain, in PRUint32 aErrorCode, in ACString aErrorDesc);
  void getPropertyServerDone(in AUTF8String aServer);
};

[scriptable, uuid(b281862e-711d-41fa-b21b-aa27e98e7086)]
interface csITpChannelTypeRoomListGetListingRoomsCB : nsISupports
{
  void onGetListingRoomsError(in ACString aErrorDomain, in PRUint32 aErrorCode, in ACString aErrorDesc);
  void onGetListingRoomsDone(in PRBool aInProgress);
};

[scriptable, uuid(9267b30f-f0b9-49ab-8433-117a5bfa85d1)]
interface csITpChannelTypeRoomListGotRoomsObserver : nsISupports
{
  void onGotRooms(in nsIArray aRooms);
};

[scriptable, uuid(f0f08456-4666-4290-a6e6-d27810912c55)]
interface csITpChannelTypeRoomListListRoomsCB : nsISupports
{
  void onListRoomsError(in ACString aErrorDomain, in PRUint32 aErrorCode, in ACString aErrorDesc);
  void onListRoomsDone();
};

[scriptable, uuid(54621841-70f7-426f-b143-81d14bc9567f)]
interface csITpChannelTypeRoomListStopListingCB : nsISupports
{
  void onStopListingError(in ACString aErrorDomain, in PRUint32 aErrorCode, in ACString aErrorDesc);
  void onStopListingDone();
};

[scriptable, uuid(4b96c72e-7237-45ef-b9b4-15772f9385e6)]
interface csITpChannelTypeRoomListListingRoomsObserver : nsISupports
{
  void onListingRooms(in PRBool aListing);
};



[scriptable, uuid(8cf79dd9-9a4e-4306-b01c-06a08b71a102)]
interface csITpChannelTypeRoomList : nsISupports
{
  void getPropertyServer(in csITpChannelTypeRoomListServerCB cb);

  void callGetListingRooms(in csITpChannelTypeRoomListGetListingRoomsCB cb);

  void connectToGotRooms(in csITpChannelTypeRoomListGotRoomsObserver observer);
  void disconnectFromGotRooms(in csITpChannelTypeRoomListGotRoomsObserver observer);

  void callListRooms(in csITpChannelTypeRoomListListRoomsCB cb);

  void callStopListing(in csITpChannelTypeRoomListStopListingCB cb);

  void connectToListingRooms(in csITpChannelTypeRoomListListingRoomsObserver observer);
  void disconnectFromListingRooms(in csITpChannelTypeRoomListListingRoomsObserver observer);

};