/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Spicebird code.
 *
 * The Initial Developer of the Original Code is
 *   Synovel Software Technologies
 * Portions created by the Initial Developer are Copyright (C) 2008
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Prasad Sunkari <prasad@synovel.com> (Original Author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

/*
 * Code in this file is generated using a computer program.
 * Please refer to the corresponding telepathy spec for any help in using the
 * code here.  You may also feel free to contact the original developer for
 * any related help.
 */


#include "nsISupports.idl"
#include "nsIVariant.idl"
#include "nsIArray.idl"


%{C++
#include "glib/gtypes.h"
%}
native gpointer(gpointer);



/*
 * A struct representing an allowed parameter, as returned
        by GetParameters on the ConnectionManager interface.
 */
[scriptable, uuid(5bf939ea-a468-47df-93d4-4b67239c69a8)]
interface csITpParamSpec : nsISupports
{
  /* A string parameter name */
  readonly attribute AUTF8String name;
  /* A bitwise OR of the parameter flags */
  readonly attribute PRUint32 flags;
  /* A string containing the D-Bus type signature
          for this parameter */
  readonly attribute AUTF8String signature;
  /* The default value (if the Has_Default flag is not
          present, there is no default and this takes some dummy value,
          which SHOULD be of the appropriate D-Bus type) */
  readonly attribute nsIVariant defaultValue;

  [noscript] gpointer toGLib();
};

[scriptable, uuid(1c160bfb-bda7-4f26-9f63-4c4d12b7f4cd)]
interface csITpConnectionManagerGetParametersCB : nsISupports
{
  void onGetParametersError(in ACString aErrorDomain, in PRUint32 aErrorCode, in ACString aErrorDesc);
  void onGetParametersDone(in nsIArray aParameters);
};

[scriptable, uuid(4427a022-9073-44ca-a2a3-90dfbb7bd924)]
interface csITpConnectionManagerListProtocolsCB : nsISupports
{
  void onListProtocolsError(in ACString aErrorDomain, in PRUint32 aErrorCode, in ACString aErrorDesc);
  void onListProtocolsDone(in PRUint32 aProtocolsCount, [array, size_is(aProtocolsCount)] in string aProtocols);
};

[scriptable, uuid(dfa755f1-8d29-448d-b08d-8d1f241c9e0b)]
interface csITpConnectionManagerNewConnectionObserver : nsISupports
{
  void onNewConnection(in AUTF8String aBusName, in ACString aObjectPath, in AUTF8String aProtocol);
};

[scriptable, uuid(3a120acf-f8ec-47c6-be26-ba843757e012)]
interface csITpConnectionManagerRequestConnectionCB : nsISupports
{
  void onRequestConnectionError(in ACString aErrorDomain, in PRUint32 aErrorCode, in ACString aErrorDesc);
  void onRequestConnectionDone(in AUTF8String aBusName, in ACString aObjectPath);
};

[scriptable, uuid(95bf4b4b-264d-49bc-8a4a-6ff11cf5fa8c)]
interface csITpConnectionManagerInterfacesCB : nsISupports
{
  void getPropertyInterfacesError(in ACString aErrorDomain, in PRUint32 aErrorCode, in ACString aErrorDesc);
  void getPropertyInterfacesDone(in PRUint32 aInterfacesCount, [array, size_is(aInterfacesCount)] in string aInterfaces);
};



[scriptable, uuid(7ca75da7-b635-4372-ac7f-32b6240d00b6)]
interface csITpConnectionManager : nsISupports
{
  const short Conn_Mgr_Param_Flags_Required = 1;
  const short Conn_Mgr_Param_Flags_Register = 2;
  const short Conn_Mgr_Param_Flags_Has_Default = 4;
  const short Conn_Mgr_Param_Flags_Secret = 8;
  const short Conn_Mgr_Param_Flags_DBus_Property = 16;

  void callGetParameters(in AUTF8String aProtocol, in csITpConnectionManagerGetParametersCB cb);

  void callListProtocols(in csITpConnectionManagerListProtocolsCB cb);

  void connectToNewConnection(in csITpConnectionManagerNewConnectionObserver observer);
  void disconnectFromNewConnection(in csITpConnectionManagerNewConnectionObserver observer);

  void callRequestConnection(in AUTF8String aProtocol, in nsIArray aParameters, in csITpConnectionManagerRequestConnectionCB cb);

  void getPropertyInterfaces(in csITpConnectionManagerInterfacesCB cb);

};