/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Spicebird code.
 *
 * The Initial Developer of the Original Code is
 *   Synovel Software Technologies
 * Portions created by the Initial Developer are Copyright (C) 2008
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Prasad Sunkari <prasad@synovel.com> (Original Author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

/*
 * Code in this file is generated using a computer program.
 * Please refer to the corresponding telepathy spec for any help in using the
 * code here.  You may also feel free to contact the original developer for
 * any related help.
 */


#include "nsISupports.idl"


%{C++
#include "glib/gtypes.h"
%}
native gpointer(gpointer);



[scriptable, uuid(6264516d-36ca-47e7-b40e-596d821a77b7)]
interface csITpChannelInterfaceHoldGetHoldStateCB : nsISupports
{
  void onGetHoldStateError(in ACString aErrorDomain, in PRUint32 aErrorCode, in ACString aErrorDesc);
  void onGetHoldStateDone(in PRUint32 aHoldState, in PRUint32 aReason);
};

[scriptable, uuid(b3a010a4-8bba-4f54-9f76-aac227a57685)]
interface csITpChannelInterfaceHoldHoldStateChangedObserver : nsISupports
{
  void onHoldStateChanged(in PRUint32 aHoldState, in PRUint32 aReason);
};

[scriptable, uuid(dbf09f09-e89a-450b-9462-1ce313fa3d04)]
interface csITpChannelInterfaceHoldRequestHoldCB : nsISupports
{
  void onRequestHoldError(in ACString aErrorDomain, in PRUint32 aErrorCode, in ACString aErrorDesc);
  void onRequestHoldDone();
};



[scriptable, uuid(ede697c5-16ae-4b82-be12-06a94f9c8b3f)]
interface csITpChannelInterfaceHold : nsISupports
{
  void callGetHoldState(in csITpChannelInterfaceHoldGetHoldStateCB cb);

  void connectToHoldStateChanged(in csITpChannelInterfaceHoldHoldStateChangedObserver observer);
  void disconnectFromHoldStateChanged(in csITpChannelInterfaceHoldHoldStateChangedObserver observer);

  /* The hold state of a channel. */
  const short Local_Hold_State_Unheld = 0;
  const short Local_Hold_State_Held = 1;
  const short Local_Hold_State_Pending_Hold = 2;
  const short Local_Hold_State_Pending_Unhold = 3;

  /* The reason for a change to the Local_Hold_State. Clients MUST
        treat unknown values as equivalent to Local_Hold_State_Reason_None. */
  const short Local_Hold_State_Reason_None = 0;
  const short Local_Hold_State_Reason_Requested = 1;
  const short Local_Hold_State_Reason_Resource_Not_Available = 2;

  void callRequestHold(in PRBool aHold, in csITpChannelInterfaceHoldRequestHoldCB cb);

};