/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Spicebird code.
 *
 * The Initial Developer of the Original Code is
 *   Synovel Software Technologies
 * Portions created by the Initial Developer are Copyright (C) 2008
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Prasad Sunkari <prasad@synovel.com> (Original Author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

/*
 * Code in this file is generated using a computer program.
 * Please refer to the corresponding telepathy spec for any help in using the
 * code here.  You may also feel free to contact the original developer for
 * any related help.
 */


#include "nsISupports.idl"
#include "nsIArray.idl"
#include "nsIVariant.idl"


%{C++
#include "glib/gtypes.h"
%}
native gpointer(gpointer);



[scriptable, uuid(999ab74c-e7ab-4b13-b31e-bcf13460b9df)]
interface csITpChannelTypeFileTransferStateCB : nsISupports
{
  void getPropertyStateError(in ACString aErrorDomain, in PRUint32 aErrorCode, in ACString aErrorDesc);
  void getPropertyStateDone(in PRUint32 aState);
};

[scriptable, uuid(2a69d444-0cd2-4b09-9c91-e17b686879de)]
interface csITpChannelTypeFileTransferContentTypeCB : nsISupports
{
  void getPropertyContentTypeError(in ACString aErrorDomain, in PRUint32 aErrorCode, in ACString aErrorDesc);
  void getPropertyContentTypeDone(in AUTF8String aContentType);
};

[scriptable, uuid(ef4ccea8-8b6f-412b-bb96-e23deb71848d)]
interface csITpChannelTypeFileTransferFilenameCB : nsISupports
{
  void getPropertyFilenameError(in ACString aErrorDomain, in PRUint32 aErrorCode, in ACString aErrorDesc);
  void getPropertyFilenameDone(in AUTF8String aFilename);
};

[scriptable, uuid(0baa4279-b30b-49b5-a0a1-7fcc4454f628)]
interface csITpChannelTypeFileTransferSizeCB : nsISupports
{
  void getPropertySizeError(in ACString aErrorDomain, in PRUint32 aErrorCode, in ACString aErrorDesc);
  void getPropertySizeDone(in PRUint64 aSize);
};

[scriptable, uuid(04456906-337f-4893-b111-b3b9eeae782f)]
interface csITpChannelTypeFileTransferContentHashTypeCB : nsISupports
{
  void getPropertyContentHashTypeError(in ACString aErrorDomain, in PRUint32 aErrorCode, in ACString aErrorDesc);
  void getPropertyContentHashTypeDone(in PRUint32 aContentHashType);
};

[scriptable, uuid(a61068b9-9bbe-4203-a94d-91a56937d74f)]
interface csITpChannelTypeFileTransferContentHashCB : nsISupports
{
  void getPropertyContentHashError(in ACString aErrorDomain, in PRUint32 aErrorCode, in ACString aErrorDesc);
  void getPropertyContentHashDone(in AUTF8String aContentHash);
};

[scriptable, uuid(917c2246-22f0-42a0-9d04-5edb34207f35)]
interface csITpChannelTypeFileTransferDescriptionCB : nsISupports
{
  void getPropertyDescriptionError(in ACString aErrorDomain, in PRUint32 aErrorCode, in ACString aErrorDesc);
  void getPropertyDescriptionDone(in AUTF8String aDescription);
};

[scriptable, uuid(f006e758-63cb-4732-a2db-dfa8c48610ae)]
interface csITpChannelTypeFileTransferDateCB : nsISupports
{
  void getPropertyDateError(in ACString aErrorDomain, in PRUint32 aErrorCode, in ACString aErrorDesc);
  void getPropertyDateDone(in PRInt64 aDate);
};

[scriptable, uuid(ca19bb47-7228-4e10-9a19-8324c28a3b38)]
interface csITpChannelTypeFileTransferAvailableSocketTypesCB : nsISupports
{
  void getPropertyAvailableSocketTypesError(in ACString aErrorDomain, in PRUint32 aErrorCode, in ACString aErrorDesc);
  void getPropertyAvailableSocketTypesDone(in nsIArray aAvailableSocketTypes);
};

[scriptable, uuid(0ed1c06c-ddb9-4d50-a667-1365241caada)]
interface csITpChannelTypeFileTransferTransferredBytesCB : nsISupports
{
  void getPropertyTransferredBytesError(in ACString aErrorDomain, in PRUint32 aErrorCode, in ACString aErrorDesc);
  void getPropertyTransferredBytesDone(in PRUint64 aTransferredBytes);
};

[scriptable, uuid(0bd91f17-5c41-47c6-bf2d-63e96785fb35)]
interface csITpChannelTypeFileTransferInitialOffsetCB : nsISupports
{
  void getPropertyInitialOffsetError(in ACString aErrorDomain, in PRUint32 aErrorCode, in ACString aErrorDesc);
  void getPropertyInitialOffsetDone(in PRUint64 aInitialOffset);
};

[scriptable, uuid(c296285a-d376-4388-b5a4-f1affae5edb8)]
interface csITpChannelTypeFileTransferAcceptFileCB : nsISupports
{
  void onAcceptFileError(in ACString aErrorDomain, in PRUint32 aErrorCode, in ACString aErrorDesc);
  void onAcceptFileDone(in nsIVariant aAddress);
};

[scriptable, uuid(19a13ef1-f818-4fbc-90c4-dc1ef7664539)]
interface csITpChannelTypeFileTransferProvideFileCB : nsISupports
{
  void onProvideFileError(in ACString aErrorDomain, in PRUint32 aErrorCode, in ACString aErrorDesc);
  void onProvideFileDone(in nsIVariant aAddress);
};

[scriptable, uuid(72fd865c-4087-43b3-b670-57657814ff1a)]
interface csITpChannelTypeFileTransferFileTransferStateChangedObserver : nsISupports
{
  void onFileTransferStateChanged(in PRUint32 aState, in PRUint32 aReason);
};

[scriptable, uuid(3464465f-0257-4d39-ba4b-36c4df9ec90c)]
interface csITpChannelTypeFileTransferTransferredBytesChangedObserver : nsISupports
{
  void onTransferredBytesChanged(in PRUint64 aCount);
};

[scriptable, uuid(39f8b3e8-7790-48a1-bff2-1f9fa445bcee)]
interface csITpChannelTypeFileTransferInitialOffsetDefinedObserver : nsISupports
{
  void onInitialOffsetDefined(in PRUint64 aInitialOffset);
};



[scriptable, uuid(9787e367-0374-4bb4-9aad-eed7944bb077)]
interface csITpChannelTypeFileTransfer : nsISupports
{
  void getPropertyState(in csITpChannelTypeFileTransferStateCB cb);

  void getPropertyContentType(in csITpChannelTypeFileTransferContentTypeCB cb);

  void getPropertyFilename(in csITpChannelTypeFileTransferFilenameCB cb);

  void getPropertySize(in csITpChannelTypeFileTransferSizeCB cb);

  void getPropertyContentHashType(in csITpChannelTypeFileTransferContentHashTypeCB cb);

  void getPropertyContentHash(in csITpChannelTypeFileTransferContentHashCB cb);

  void getPropertyDescription(in csITpChannelTypeFileTransferDescriptionCB cb);

  void getPropertyDate(in csITpChannelTypeFileTransferDateCB cb);

  void getPropertyAvailableSocketTypes(in csITpChannelTypeFileTransferAvailableSocketTypesCB cb);

  void getPropertyTransferredBytes(in csITpChannelTypeFileTransferTransferredBytesCB cb);

  void getPropertyInitialOffset(in csITpChannelTypeFileTransferInitialOffsetCB cb);

  const short File_Transfer_State_None = 0;
  const short File_Transfer_State_Pending = 1;
  const short File_Transfer_State_Accepted = 2;
  const short File_Transfer_State_Open = 3;
  const short File_Transfer_State_Completed = 4;
  const short File_Transfer_State_Cancelled = 5;

  const short File_Transfer_State_Change_Reason_None = 0;
  const short File_Transfer_State_Change_Reason_Requested = 1;
  const short File_Transfer_State_Change_Reason_Local_Stopped = 2;
  const short File_Transfer_State_Change_Reason_Remote_Stopped = 3;
  const short File_Transfer_State_Change_Reason_Local_Error = 4;
  const short File_Transfer_State_Change_Reason_Remote_Error = 5;

  const short File_Hash_Type_None = 0;
  const short File_Hash_Type_MD5 = 1;
  const short File_Hash_Type_SHA1 = 2;
  const short File_Hash_Type_SHA256 = 3;

  void callAcceptFile(in PRUint32 aAddressType, in PRUint32 aAccessControl, in nsIVariant aAccessControlParam, in PRUint64 aOffset, in csITpChannelTypeFileTransferAcceptFileCB cb);

  void callProvideFile(in PRUint32 aAddressType, in PRUint32 aAccessControl, in nsIVariant aAccessControlParam, in csITpChannelTypeFileTransferProvideFileCB cb);

  void connectToFileTransferStateChanged(in csITpChannelTypeFileTransferFileTransferStateChangedObserver observer);
  void disconnectFromFileTransferStateChanged(in csITpChannelTypeFileTransferFileTransferStateChangedObserver observer);

  void connectToTransferredBytesChanged(in csITpChannelTypeFileTransferTransferredBytesChangedObserver observer);
  void disconnectFromTransferredBytesChanged(in csITpChannelTypeFileTransferTransferredBytesChangedObserver observer);

  void connectToInitialOffsetDefined(in csITpChannelTypeFileTransferInitialOffsetDefinedObserver observer);
  void disconnectFromInitialOffsetDefined(in csITpChannelTypeFileTransferInitialOffsetDefinedObserver observer);

};